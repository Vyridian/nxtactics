(package nx/tactics/ui/uitactics
 :libs (lib base   :path nx/tactics/base)
       (lib coll   :path vx/collection)
       (lib deck   :path nx/tactics/decks/deck)
       (lib event  :path vx/event)
       (lib file   :path vx/data/file)
       (lib nav    :path nx/tactics/ui/navigation)
       (lib styles :path nx/tactics/ui/stylesheet)
       (lib type   :path vx/type)
       (lib ui     :path vx/ui/ui)
 :doc "Tactics UI")

(const event-navigate-card-click : event/event
 (copy event/event-click
  :event<-event event-navigate-card-click<-event))

(func event-navigate-card-click<-event : event/event
 [event : event/event]
 (let : event/event
  [parent : string := "app/nav"
   uifrom : ui/ui :=
    (ui/ui-from<-event
     event)
   data : any := (:data uifrom)
   uinav : ui/ui :=
    (ui<-any-parent
     data parent)
   uichg : ui/ui :=
    (ui-navigate<-ui
     uinav)]
  event)
 :context
 :doc "Event handler for card clicks")

(const event-printbutton-click : event/event
 (copy event/event-click
  :event<-event event-printbutton-click<-event))

(func event-printbutton-click<-event : event/event
 [event : event/event]
 (let : event/event
  [uimain : ui/ui :=
    (nav/ui-readstate-main)
   isprint : boolean :=
    (ui/boolean-print
     uimain)]
  event)
 :context
 :doc "Event handler for card clicks")

(const eventmap-app-home-card : event/eventmap
 (event/eventmap<-eventlist
  (event/eventlist
   event-navigate-card-click))
 :doc "Eventmap for app-home-card")

(func string<-conscience-beast-shadow : string
 [conscience : string
  beast      : string
  shadow     : string]
 (let
  [s1 : string :=
    (if : string
     (then
      (!-empty conscience)
      (string "conscience:" conscience)))
   s2 : string :=
    (if : string
     (then
      (!-empty beast)
      (string "beast:" beast)))
   s3 : string :=
    (if : string
     (then
      (!-empty shadow)
      (string "shadow:" shadow)))
   slist : stringlist :=
    (stringlist s1 s2 s3)
   sjoin : string :=
    (type/string<-stringlist-join
     slist " ")]
  (type/string-trim sjoin))
 :test (test
        "conscience:1x1 beast:2x1 shadow:3x1"
        (string<-conscience-beast-shadow
         "1x1" "2x1" "3x1"))
 :doc "Returns a string for will string")

(func string<-demeanor-nature : string
 [demeanor : string
  nature   : string]
 (let
  [sdemeanor : string :=
    (if : string
     (then
      (!-empty demeanor)
      (string "demeanor:" demeanor)))
   snature : string :=
    (if : string
     (then
      (!-empty nature)
      (string "nature:" nature)))
   slist : stringlist :=
    (stringlist sdemeanor snature)
   sjoin : string :=
    (type/string<-stringlist-join
     slist " ")]
  (type/string-trim sjoin))
 :test (test
        "demeanor:nice nature:naughty"
        (string<-demeanor-nature
         "nice" "naughty"))
 :doc "Returns a string for mind string")

(func string<-land-water-air-space : string
 [land  : string
  water : string
  air   : string
  space : string]
 (let
  [s1 : string :=
    (if : string
     (then
      (!-empty land)
      (string "land:" land)))
   s2 : string :=
    (if : string
     (then
      (!-empty water)
      (string "water:" water)))
   s3 : string :=
    (if : string
     (then
      (!-empty air)
      (string "air:" air)))
   s4 : string :=
    (if : string
     (then
      (!-empty space)
      (string "space:" space)))
   slist : stringlist :=
    (stringlist s1 s2 s3 s4)
   sjoin : string :=
    (type/string<-stringlist-join
     slist " ")]
  (type/string-trim sjoin))
 :test (test
        "land:1 water:2 air:3 space:4"
        (string<-land-water-air-space
         "1" "2" "3" "4"))
 :doc "Returns a string for will string")

(func string<-mass-h-l-w : string
 [mass   : string
  height : string
  length : string
  width  : string]
 (let
  [smass : string :=
    (if : string
     (then
      (!-empty mass)
      (string "mass:" mass)))
   h : string :=
    (if : string
     (then
      (!-empty height)
      (string "h:" height)))
   l : string :=
    (if : string
     (then
      (!-empty length)
      (string "l:" length)))
   w : string :=
    (if : string
     (then
      (!-empty width)
      (string "w:" width)))
   slist : stringlist :=
    (stringlist smass h l w)
   sjoin : string :=
    (type/string<-stringlist-join
     slist " ")]
  (type/string-trim sjoin))
 :test (test
        "mass:80kg/160lb h:2m/6ft l:1m/3ft w:1m/3ft"
        (string<-mass-h-l-w
         "80kg/160lb" "2m/6ft" "1m/3ft" "1m/3ft"))
 :doc "Returns a string from a mass, height, length, width")

(func string-display<-any : string
 [value : any]
 (let : string
  [datatype : any := (type<-any value)
   display : string :=
    (if : string
     (then
      (== datatype base/book)
      (string-display<-book
       (any<-any : base/book
        value)))
     (then
      (== datatype base/deck)
      (string-display<-deck
       (any<-any : base/deck
        value)))
     (then
      (== datatype base/skill)
       (string-display<-skill
        (any<-any : base/skill
         value)))
     (then
      (or
       (== datatype base/item)
       (== datatype base/unit))
      "")
     (then
      (is-type datatype base/card)
      (let : string
       [card : base/card :=
         (any<-any : base/card
          value)
        summary : string :=
         (:summary card)]
       summary)))]
  display)
 :doc "Returns display text from any")

(func string-display<-book : string
 [book : base/book]
 (let : string
  [chaptermap : base/chaptermap :=
    (:chaptermap book)
   names : stringlist :=
    (list<-map : stringlist
     chaptermap
     (fn : string
      [key   : string
       value : base/chapter]
      (:name value)))
   display : string :=
    (string<-stringlist-join
     names
     ", ")]
  display)
 :doc "Returns display text from a book")

(func string-display<-deck : string
 [deck : base/deck]
 (let : string
  [cardmap : base/cardmap :=
    (:cardmap deck)
   names : stringlist :=
    (list<-map : stringlist
     cardmap
     (fn : string
      [key   : string
       value : base/card]
      (:name value)))
   display : string :=
    (string<-stringlist-join
     names
     ", ")]
  display)
 :doc "Returns display text from a deck")

(func string-display<-skill : string
 [skill : base/skill]
 (let : string
  [summary : string := (:summary skill)
   specialtymap : base/specialtymap := (:specialtymap skill)
   abilitymap   : base/abilitymap   := (:abilitymap skill)
   specialnames : stringlist :=
    (list<-map : stringlist
     specialtymap
     (fn : string
      [key   : string
       value : base/specialty]
      (:name value)))
   abilitynames : stringlist :=
    (list<-map : stringlist
     abilitymap
     (fn : string
      [key   : string
       value : base/ability]
      (:name value)))
   appended : stringlist :=
    (stringlist
     summary
     specialnames
     abilitynames)
   display : string :=
    (string<-stringlist-join
     appended
     " ")]
  display)
 :doc "Returns display text from a skill")

(func string-display<-unit : string
 [unit : base/unit]
 (let : string
  [summary : string := (:summary unit)
   skilllist : stringlist :=
    (stringlist-display<-unitskillmap
     (:unitskillmap unit))
   powerlist : stringlist :=
    (stringlist-display<-unitpowermap
     (:unitpowermap unit))
   summarylist : stringlist :=
    (if : stringlist
     (then
      (!-empty summary)
      (stringlist summary)))
   displaylist : stringlist :=
    (stringlist
     summarylist
     skilllist
     powerlist)]
  (string<-stringlist-join
   displaylist newline))
 :doc "Returns display text from a unit")

(func string-display<-unitpower : string
 [unitpower : base/unitpower]
 (let : string
  [power : base/power := (:power unitpower)
   level : string     := (:level unitpower)
   name  : string     := (:name power)
   specialties : stringlist :=
    (stringlist-display<-unitspecialtymap
     (:unitspecialtymap unitpower))
   abilities : stringlist :=
    (stringlist-display<-unitabilitymap
     (:unitabilitymap unitpower))
   extralist : stringlist :=
    (stringlist
     specialties
     abilities)
   extras : string :=
    (if : string
     (then
      (!-empty extralist)
      (string
       " "
       (string<-stringlist-join
        extralist " "))))]
  (string
   "* ["
   name
   "]:"
   level
   extras))
 :doc "Returns a string from a unitpower")

(func string-display<-unitskill : string
 [unitskill : base/unitskill]
 (let : string
  [skill : base/skill := (:skill unitskill)
   level : string     := (:level unitskill)
   skillname : string := (:name skill)
   items : stringlist :=
    (stringlist-display<-unititemmap
     (:unititemmap unitskill))
   specialties : stringlist :=
    (stringlist-display<-unitspecialtymap
     (:unitspecialtymap unitskill))
   abilities : stringlist :=
    (stringlist-display<-unitabilitymap
     (:unitabilitymap unitskill))
   extralist : stringlist :=
    (stringlist
     items
     specialties
     abilities)
   extras : string :=
    (if : string
     (then
      (!-empty extralist)
      (string
       " "
       (string<-stringlist-join
        extralist " "))))]
  (string
   "* ["
   skillname
   "]:"
   level
   extras))
 :doc "Returns a string from a unitskill")

(func stringlist-display<-unitabilitymap : stringlist
 [unitabilitymap : base/unitabilitymap]
 (list<-map : stringlist
  unitabilitymap
  (fn : string
   [key : string
    unitability : unitability]
   (string "[" key "]")))
 :doc "Returns a stringlist from a unitabilitymap")

(func stringlist-display<-unititemmap : stringlist
 [unititemmap : base/unititemmap]
 (list<-map : stringlist
  unititemmap
  (fn : string
   [key      : string
    unititem : unititem]
   (string "[" key "]")))
 :doc "Returns a stringlist from a unititemmap")

(func stringlist-display<-unitpowermap : stringlist
 [unitpowermap : base/unitpowermap]
 (list<-map : stringlist
  unitpowermap
  (fn : string
   [key : string
    unitpower : unitpower]
   (string-display<-unitpower
    unitpower)))
 :doc "Returns a stringlist from a unitpowermap")

(func stringlist-display<-unitskillmap : stringlist
 [unitskillmap : base/unitskillmap]
 (list<-map : stringlist
  unitskillmap
  (fn : string
   [key : string
    unitskill : unitskill]
   (string-display<-unitskill
    unitskill)))
 :doc "Returns a stringlist from a unitskillmap")

(func stringlist-display<-unitspecialtymap : stringlist
 [unitspecialtymap : base/unitspecialtymap]
 (list<-map : stringlist
  unitspecialtymap
  (fn : string
   [key : string
    unitspecialty : unitspecialty]
   (string "[" key "]")))
 :doc "Returns a stringlist from a unitspecialtymap")

(func ui<-any-parent : ui/ui
 [data   : any
  parent : string]
 (let : ui/ui
  [datatype : any := (type<-any data)]
  (if : ui/ui
   (then
    (type/is-type datatype base/card)
    (ui<-card-parent
     (any<-any : base/card
      data)
     parent))))
 :doc "Returns a ui created from any value")

(func ui-title1<-uid-text : ui/ui
 [uid  : string
  text : string]
 (ui/ui
  :uid (string uid "/title1")
  :style styles/style-card-title1
  :stylelist
   (ui/stylelist
    styles/style-text-header1)
  :data text)
 :doc "Returns a card title1")

(func ui-title2<-uid-text : ui/ui
 [uid  : string
  text : string]
 (ui/ui
  :uid (string uid "/title2")
  :style styles/style-card-title2
  :stylelist
   (ui/stylelist
    styles/style-text-header1)
  :data text)
 :doc "Returns a card title2")

(func uilist<-card-parent : ui/uilist
 [card   : base/card
  parent : string]
 (let : ui/uilist
  [id   : string := (:id card)
   name : string := (:name card)
   datatype : any := (type<-any card)
   isdisplay4 : boolean :=
    (or
     (== datatype base/damage)
     (== datatype base/disorder)
     (== datatype base/trauma))
   id1 : string :=
    (if : string
     (!-empty id)
     id
     name)
   uid : string :=
    (string parent "/" id1)
   display : string :=
    (string-display<-any
     card)
   displaysplit : stringlist :=
    (if : stringlist
     (then isdisplay4
      (type/stringlist<-string-split
       display newline)))
   display1 : string :=
    (if : string
     (then isdisplay4
      (:1 displaysplit))
     (else display))
   uititle1 : ui/ui :=
    (ui-title1<-uid-text
     uid name)
   uititle2 : ui/ui :=
    (if : ui/ui
     (then
      (== datatype base/cardback)
      (ui-title2<-uid-text
       uid name)))
   uiddisplay : string :=
    (string uid "/display")
   uidisplay : ui/ui :=
    (if : ui/ui
     (then
      (!-empty display1)
      (ui/ui
       :uid uiddisplay
       :style styles/style-card-display
       :stylelist
        (ui/stylelist
         styles/style-textarea)
       :data display1)))
   ranksuit : base/ranksuit :=
    (:ranksuit card)
   uilist1 : ui/uilist :=
    (uilist<-ranksuit-parent
     ranksuit
     uid)
   uilist2 : ui/uilist :=
    (if : ui/uilist
     (then
      (== datatype base/item)
      (uilist<-item-parent
       (any<-any card)
       parent))
     (then
      (== datatype base/unit)
      (uilist<-unit-parent
       (any<-any card)
       parent))
     (then
      (== datatype base/cardimage)
      (uilist<-cardimage-parent
       (any<-any card)
       parent))
     (then
      isdisplay4
      (let : ui/uilist
       [uid2 : string := (string uid "/display2")
        display2 : string := (:2 displaysplit)
        uidisplay2 : ui/ui :=
         (ui/ui
          :uid uid2
          :style styles/style-card-display2
          :stylelist
           (ui/stylelist
            styles/style-textarea)
          :data display2)
        uid3 : string := (string uid "/display3")
        display3 : string := (:3 displaysplit)
        uidisplay3 : ui/ui :=
         (ui/ui
          :uid uid3
          :style styles/style-card-display3
          :stylelist
           (ui/stylelist
            styles/style-textarea)
          :data display3)
        uid4 : string := (string uid "/display4")
        display4 : string := (:4 displaysplit)
        uidisplay4 : ui/ui :=
         (ui/ui
          :uid uid4
          :style styles/style-card-display4
          :stylelist
           (ui/stylelist
            styles/style-textarea)
          :data display4)]
       (ui/uilist
        uidisplay2
        uidisplay3
        uidisplay4))))]
  (ui/uilist
   uilist1
   uilist2
   uititle1
   uititle2
   uidisplay)))

(func uilist<-item-parent : ui/uilist
 [unit   : base/item
  parent : string]
 (let : ui/uilist
  [name : string := (:name unit)
   titles : string := (:titles unit)
   image : string := (:image unit)
   value : string := (:value unit)
   summary : string := (:summary unit)
   body : string := (:body unit)
   bodydetail : string :=
    (string<-mass-h-l-w
     (:mass   unit)
     (:height unit)
     (:length unit)
     (:width  unit))
   prefix : string := (string parent "/" name)
/*
   uiitemsummary : ui/ui :=
    (if : ui/ui
     (then
      (!-empty summary)
      (ui/ui
       :uid (string prefix "/summary")
       :style styles/style-item-summary
       :stylelist
        (ui/stylelist
         styles/style-textarea)
       :data summary)))
*/
   detail : string := summary
   uiimage : ui/ui :=
    (if : ui/ui
     (then
      (!-empty image)
      (ui/ui
       :uid (string prefix "/image")
       :style styles/style-unit-image
       :data
        (file/file<-path
         image))))
   uivalue : ui/ui :=
    (if : ui/ui
     (then
      (!-empty value)
      (ui/ui
       :uid (string prefix "/value")
       :style styles/style-unit-value
       :stylelist
        (ui/stylelist
         styles/style-text-header1)
       :data value)))
   uititles : ui/ui :=
    (if : ui/ui
     (then
      (!-empty titles)
      (ui/ui
       :uid (string prefix "/titles")
       :style styles/style-unit-titles
       :stylelist
        (ui/stylelist
         styles/style-text)
       :data titles)))
   uibody : ui/ui :=
    (if : ui/ui
     (then
      (!-empty body)
      (ui/ui
       :uid (string prefix "/body")
       :style styles/style-unit-body
       :stylelist
        (ui/stylelist
         styles/style-text-header1)
       :data body)))
   uibodydetail : ui/ui :=
    (if : ui/ui
     (then
      (!-empty bodydetail)
      (ui/ui
       :uid (string prefix "/bodydetail")
       :style styles/style-unit-bodydetail
       :stylelist
        (ui/stylelist
         styles/style-text-2)
       :data bodydetail)))
   uidetail : ui/ui :=
    (if : ui/ui
     (then
      (!-empty detail)
      (ui/ui
       :uid (string prefix "/detail")
       :style styles/style-unit-detail
       :stylelist
        (ui/stylelist
         styles/style-textarea)
       :data detail)))]
  (ui/uilist
   uiimage
   uivalue
   uititles
   uibody
   uibodydetail
//   uiitemsummary
   uidetail))
 :doc "Returns a list of child ui from a item/parent")

(func uilist<-cardimage-parent : ui/uilist
 [cardimage : base/cardimage
  parent : string]
 (let : ui/uilist
  [name      : string  := (:name  cardimage :debug)
   image     : string  := (:image cardimage)
   imgmirror : boolean := (:imgmirror cardimage :debug)
   prefix    : string  := (string parent "/" name)
   uiimage1  : ui/ui :=
    (ui/ui
     :uid (string prefix "/image1")
     :style styles/style-cardimage-image1
     :data
      (file/file<-path
       image))
   uiimage2 : ui/ui :=
    (if
     (then imgmirror
      (ui/ui
       :uid (string prefix "/image2")
       :style styles/style-cardimage-image2
       :data
        (file/file<-path
         image))))]
  (ui/uilist
   uiimage1
   uiimage2))
 :doc "Returns a list of child ui from a cardimage/parent")

(func uilist<-unit-parent : ui/uilist
 [unit   : base/unit
  parent : string]
 (let : ui/uilist
  [name : string := (:name unit)
   titles : string := (:titles unit)
   image : string := (:image unit)
   value : string := (:value unit)
   summary : string := (:summary unit)
   body : string := (:body unit)
   bodydetail : string :=
    (string<-mass-h-l-w
     (:mass   unit)
     (:height unit)
     (:length unit)
     (:width  unit))
   mind : string := (:mind unit)
   minddetail : string :=
    (string<-demeanor-nature
     (:demeanor unit)
     (:nature unit))
   will : string := (:will unit)
   willdetail : string :=
    (string<-conscience-beast-shadow
     (:conscience unit)
     (:beast unit)
     (:shadow unit))
   speed : string := (:speed unit)
   speeddetail : string :=
    (string<-land-water-air-space
     (:speedland unit)
     (:speedwater unit)
     (:speedair unit)
     (:speedspace unit))
   detail : string :=
    (string-display<-unit unit)
   prefix : string := (string parent "/" name)
   uiimage : ui/ui :=
    (if : ui/ui
     (then
      (!-empty image)
      (ui/ui
       :uid (string prefix "/image")
       :style styles/style-unit-image
       :data
        (file/file<-path
         image))))
   uivalue : ui/ui :=
    (if : ui/ui
     (then
      (!-empty value)
      (ui/ui
       :uid (string prefix "/value")
       :style styles/style-unit-value
       :stylelist
        (ui/stylelist
         styles/style-text-header1)
       :data value)))
   uititles : ui/ui :=
    (if : ui/ui
     (then
      (!-empty titles)
      (ui/ui
       :uid (string prefix "/titles")
       :style styles/style-unit-titles
       :stylelist
        (ui/stylelist
         styles/style-text)
       :data titles)))
   uibody : ui/ui :=
    (if : ui/ui
     (then
      (!-empty body)
      (ui/ui
       :uid (string prefix "/body")
       :style styles/style-unit-body
       :stylelist
        (ui/stylelist
         styles/style-text-header1)
       :data body)))
   uibodydetail : ui/ui :=
    (if : ui/ui
     (then
      (!-empty bodydetail)
      (ui/ui
       :uid (string prefix "/bodydetail")
       :style styles/style-unit-bodydetail
       :stylelist
        (ui/stylelist
         styles/style-text-2)
       :data bodydetail)))
   uimind : ui/ui :=
    (if : ui/ui
     (then
      (!-empty mind)
      (ui/ui
       :uid (string prefix "/mind")
       :style styles/style-unit-mind
       :stylelist
        (ui/stylelist
         styles/style-text-header1)
       :data mind)))
   uiminddetail : ui/ui :=
    (if : ui/ui
     (then
      (!-empty minddetail)
      (ui/ui
       :uid (string prefix "/minddetail")
       :style styles/style-unit-minddetail
       :stylelist
        (ui/stylelist
         styles/style-text-2)
       :data minddetail)))
   uiwill : ui/ui :=
    (if : ui/ui
     (then
      (!-empty will)
      (ui/ui
       :uid (string prefix "/will")
       :style styles/style-unit-will
       :stylelist
        (ui/stylelist
         styles/style-text-header1)
       :data will)))
   uiwilldetail : ui/ui :=
    (if : ui/ui
     (then
      (!-empty willdetail)
      (ui/ui
       :uid (string prefix "/willdetail")
       :style styles/style-unit-willdetail
       :stylelist
        (ui/stylelist
         styles/style-text-2)
       :data willdetail)))
   uispeed : ui/ui :=
    (if : ui/ui
     (then
      (!-empty speed)
      (ui/ui
       :uid (string prefix "/speed")
       :style styles/style-unit-speed
       :stylelist
        (ui/stylelist
         styles/style-text-header1)
       :data speed)))
   uispeeddetail : ui/ui :=
    (if : ui/ui
     (then
      (!-empty speeddetail)
      (ui/ui
       :uid (string prefix "/speeddetail")
       :style styles/style-unit-speeddetail
       :stylelist
        (ui/stylelist
         styles/style-text-2)
       :data speeddetail)))
   uidetail : ui/ui :=
    (if : ui/ui
     (then
      (!-empty detail)
      (ui/ui
       :uid (string prefix "/detail")
       :style styles/style-unit-detail
       :stylelist
        (ui/stylelist
         styles/style-textarea)
       :data detail)))]
  (ui/uilist
   uiimage
   uivalue
   uititles
   uibody
   uibodydetail
   uimind
   uiminddetail
   uiwill
   uiwilldetail
   uispeed
   uispeeddetail
   uidetail))
 :doc "Returns a list of child ui from an unit/parent")

(func ui<-card-parent : ui/ui
 [card   : base/card
  parent : string]
 (let : ui/ui
  [id    : string := (:id card)
   name  : string := (:name card)
   image : string := (:image card)
   datatype : any := (type<-any card)
   display : string :=
    (string-display<-any
     card)
   id1 : string :=
    (if : string
     (!-empty id)
     id
     name)
   uid : string :=
    (string parent "/" id1)
   imgback : string :=
    (switch : string
     datatype
     (case base/item "images/card-item.svg")
     (case base/unit "images/card-unit.svg")
     (case base/cardimage "")
     (else image))
   uiimage : ui/ui :=
    (ui-image<-uid-path
     uid imgback)
   events : event/eventmap :=
    (if : event/eventmap
     (then
      (= display "")
      (empty eventmap))
     (else
      eventmap-app-home-card))
   styles : ui/stylelist :=
    (if : ui/stylelist
     (then
      (= display "")
      (ui/stylelist
       styles/style-card))
     (else
      (ui/stylelist
       styles/style-card
       styles/style-clickable)))
   uilist1 : ui/uilist :=
    (uilist<-card-parent
     card parent)
   uilist2 : ui/uilist :=
    (ui/uilist
     uiimage
     uilist1)]
  (ui/ui
   :uid  uid
   :name name
   :eventmap  events
   :stylelist styles
   :data card
   :uimap
    (ui/uimap<-uilist
     uilist2)))
 :doc "Returns the a card ui.")

(func ui-app : ui/ui
 (let : ui/ui
  [background   : ui/ui := (ui-app-background)
   main         : ui/ui := (ui-app-main)
   menubar      : ui/ui := (ui-app-menubar)
   menudrawer   : ui/ui := (ui-app-menudrawer)
   msgbox       : ui/ui := (ui-app-msgbox)
   navbar       : ui/ui := (ui-app-navbar)
   navdrawer    : ui/ui := (ui-app-navdrawer)
   parallax     : ui/ui := (ui-app-parallax)
   statusbar    : ui/ui := (ui-app-statusbar)
   statusdrawer : ui/ui := (ui-app-statusdrawer)
   titlebar     : ui/ui := (ui-app-titlebar)
   uimap : ui/uimap :=
    (ui/uimap<-uilist
     background
     main
     menubar
     menudrawer
     msgbox
     navbar
     navdrawer
     parallax
     statusbar
     statusdrawer
     titlebar)]
  (ui/ui
   :uid   "app"
   :style style-app
   :uimap uimap))
 :doc "Returns the template for the app ui.")

(func ui-app<-tactics : ui/ui
 [tactics : base/tactics]
 (let : ui/ui
  [appui : ui/ui := (ui-app)]
  (copy appui
   :data tactics))
 :doc "")

(func ui-app-background : ui/ui
 (ui/ui
  :uid "app/background"
  :stylelist
   (ui/stylelist
    style-app-background)))

(func ui-app-home : ui/ui
 (ui-nav<-deck-parent
  (deck/deck-home)
  "app/main")
 :doc "App Home Panel")

(func ui-app-main : ui/ui
 (ui/ui
  :uid "app/main"
  :stylelist
   (ui/stylelist
    style-app-main)
  :uimap
   (ui/uimap<-uilist
    (ui-app-home)))
 :doc "")

(func ui-app-menubar : ui/ui
 (ui/ui
  :uid "app/menubar"
  :stylelist
   (ui/stylelist
    style-app-menubar)))

(func ui-app-menudrawer : ui/ui
 (ui/ui
  :uid "app/menudrawer"
  :stylelist
   (ui/stylelist
    style-app-menudrawer)))

(func ui-app-msgbox : ui/ui
 (ui/ui
  :uid "app/msgbox"
  :stylelist
   (ui/stylelist
    style-app-msgbox)))

(func ui-app-navbar : ui/ui
 (ui/ui
  :uid "app/navbar"
  :stylelist
   (ui/stylelist
    style-app-navbar)
  :uimap
   (ui/uimap<-uilist
    (ui-navbutton-back)
    (nav/ui-navbutton<-ui-selected
     (ui/ui
      :name "Home")
     true)))
 :doc "Returns a new side navigation bar")

(func ui-app-navdrawer : ui/ui
 (ui/ui
  :uid "app/navdrawer"
  :stylelist
   (ui/stylelist
    style-app-navdrawer)))

(func ui-app-parallax : ui/ui
 (ui/ui
  :uid "app/parallax"
  :style style-app-parallax))

(func ui-app-statusbar : ui/ui
 (ui/ui
  :uid "app/statusbar"
  :stylelist
   (ui/stylelist
    style-app-statusbar)))

(func ui-app-statusdrawer : ui/ui
 (ui/ui
  :uid "app/statusdrawer"
  :stylelist
   (ui/stylelist
    style-app-statusdrawer)))

(func ui-app-titlebar : ui/ui
 (ui/ui
  :uid "app/titlebar"
  :stylelist
   (ui/stylelist
    style-app-titlebar)
  :uimap
   (ui/uimap<-uilist
    (ui-app-titlebar-title)
    (ui-app-titlebar-print)))
 :doc "")

(func ui-app-titlebar-print : ui/ui
 (ui/ui
  :uid "app/titlebar/print"
  :data
   (file/file
    :name "icon-printer.svg"
    :path "icons")
  :style
   (ui/style
    :layout ui/layout-image)
  :stylelist
   (ui/stylelist
    styles/style-app-titlebar-print
    styles/style-clickable)
  :eventmap
   (event/eventmap<-eventlist
    (event/eventlist
     event-printbutton-click))))

(func ui-app-titlebar-title : ui/ui
 (ui/ui
  :uid "app/titlebar/title"
  :data "Title"
  :style
   (ui/style
    :layout ui/layout-label)
  :stylelist
   (ui/stylelist
    styles/style-app-titlebar-title)))

(func ui-image<-uid-path : ui/ui
 [uid  : string
  path : string]
 (if : ui/ui
  (then
   (!-empty path)
   (ui/ui
    :uid (string uid "/imagebkgd")
    :style
     (ui/style
      :layout layout-image)
    :stylelist
     (ui/stylelist
      styles/style-image-background)
    :data
     (file/file<-path
      path)))))

(func ui-nav<-any-parent : ui/ui
 [data   : any
  parent : string]
 (if : ui/ui
  (then
   (is-empty data)
   (empty ui))
  (else
   (let : ui/ui
    [datatype : any := (type<-any data)]
    (if : ui/ui
     (then
      (== datatype base/deck)
      (ui-nav<-deck-parent
       (any<-any : base/deck
        data)
       parent))
     (then
      (== datatype base/skill)
       (ui-nav<-skill-parent
        (any<-any : base/skill
         data)
        parent))))))
 :doc "Returns a ui created from any value")

(func ui-nav<-deck-parent : ui/ui
 [deck   : base/deck
  parent : string]
 (let : ui/ui
  [name    : string       := (:name deck)
   uid     : string       := (string parent "/" name)
   cardmap : base/cardmap := (:cardmap deck)
   uimap : ui/uimap :=
    (uimap<-cardmap-parent-page-size
     cardmap uid 1 100)]
  (ui/ui
   :uid uid
   :stylelist
    (ui/stylelist
     style-deck)
   :data  deck
   :uimap uimap))
 :doc "Returns the a deck ui.")

(func ui-nav<-skill-parent : ui/ui
 [skill  : base/skill
  parent : string]
 (let : ui/ui
  [name  : string :=
    (:name skill)
   uid : string :=
    (string parent "/" name)
   specialtymap : base/specialtymap :=
    (:specialtymap skill)
   abilitymap : base/abilitymap :=
    (:abilitymap skill)
   cardmap1 : base/cardmap :=
    (map<-map : base/cardmap specialtymap)
   cardmap2 : base/cardmap :=
    (map<-map : base/cardmap abilitymap)
   cardmap3 : base/cardmap :=
    (copy cardmap1 cardmap2)
   uimap : ui/uimap :=
    (uimap<-cardmap-parent-page-size
     cardmap3 uid 1 100)]
  (ui/ui
   :uid uid
   :stylelist
    (ui/stylelist
     style-deck)
   :data  skill
   :uimap uimap))
 :doc "Returns the a deck ui.")

(func ui-navbutton-back : ui/ui
 (let : ui/ui
  [navbutton : ui/ui :=
    (nav/ui-navbutton)
   name : string := "Back"
   uid1 : string := (:uid navbutton)
   uid2 : string := (string uid1 "/" name)
   uiimage : ui/ui :=
    (ui-image<-uid-path
     uid2
     "icons/icon-backarrow.svg")
   uimap : ui/uimap :=
    (ui/uimap<-uilist
     uiimage)
   styles1 : ui/stylelist :=
    (:stylelist navbutton)]
  (copy navbutton
   :uid uid2
   :name name
   :stylelist styles1
   :uimap uimap))
 :doc "Returns the navigation back button")

(func ui-navigate<-ui : ui/ui
 [uiarg : ui/ui]
 (if : ui/ui
  (then
   (!-empty uiarg)
   (let : ui/ui
    [navbar : ui := (nav/ui-readstate-navbar)
     main   : ui := (nav/ui-readstate-main)
     ui1 : ui :=
      (ui-navigate<-ui-navbar
       uiarg
       navbar)
     ui2 : ui :=
      (ui-navigate<-ui-main
       uiarg main)]
    uiarg))
  (else uiarg))
 :context
 :sideeffects "Alters uinavbar and uimain"
 :doc "Navigate to the given ui")

(func ui-navigate<-ui-main : ui/ui
 [ui   : ui/ui
  main : ui/ui]
 (let : ui/ui
  [data    : any      := (:data ui)
   mainid  : string   := (:uid main)
   mainmap : ui/uimap := (:uimap main)
   pos : int :=
    (ui/int-visible<-ui main)
   len : int :=
    (length mainmap)
   isremoveend : boolean :=
    (if : boolean
     (then
      (> len pos)
      (ui/boolean-layoutremove<-ui-start-end
       main (+1 pos) len)))
   uivisible : ui :=
    (ui-visible<-ui main)
   ishidden : boolean :=
    (ui/boolean-layout<-ui-parent-visible
     uivisible main false)
   child : ui/ui :=
    (ui-nav<-any-parent
     data mainid)
   isadded : boolean :=
    (ui/boolean-layoutaddchild<-ui-parent
     child main)
   card : base/card :=
    (any<-any : base/card
     data)
   title : string := (:name card)
   istitle : boolean :=
    (nav/boolean-layouttitlebar<-string
     title)]
  main)
 :context
 :sideeffects "Alters uimain"
 :doc "Navigate to the given ui")

(func ui-navigate<-ui-navbar : ui/ui
 [ui     : ui/ui
  navbar : ui/ui]
 (let : ui/ui
  [uid    : string   := (:uid ui)
   navmap : ui/uimap := (:uimap navbar)
   pos : int :=
    (ui/int-selected<-ui navbar)
   len : int :=
    (length navmap)
   isremoveend : boolean :=
    (if : boolean
     (then
      (> len pos)
      (ui/boolean-layoutremove<-ui-start-end
       navbar (+1 pos) len)))
   uiselected : ui/ui :=
    (ui/ui-selected<-ui navbar)
   isselected : boolean :=
    (ui/boolean-layout<-ui-parent-selected
     uiselected navbar false)
   button : ui/ui :=
    (nav/ui-navbutton<-ui-selected
     ui true)
   isadded : boolean :=
    (ui/boolean-layoutaddchild<-ui-parent
     button navbar)]
  navbar)
 :context
 :sideeffects "Alters uinavbar"
 :doc "Navigate to the given ui")

(func ui-suit<-uid-rank-suit-pos : ui/ui
 [uid  : string
  rank : base/rank
  suit : base/suit
  pos  : int]
 (let : ui/ui
  [id : string :=
    (string uid "/suit-" pos)
   filename : string :=
    (switch
     suit
     (case base/suit-club "icon-wand.svg")
     (case base/suit-diamond "icon-coin.svg")
     (case base/suit-heart "icon-cup.svg")
     (case base/suit-spade "icon-sword.svg")
     (case base/suit-black "icon-jester-black.svg")
     (case base/suit-red "icon-jester-red.svg"))
   pointpos : ui/point :=
    (switch : ui/point
     pos
     (case 1
      styles/point-suit-pos1)
     (case 2
      styles/point-suit-pos2))
   style : ui/style :=
    (ui/style
     :layout ui/layout-image
     :pointpos pointpos
     :pointsize styles/point-suit-size)]
   (ui/ui
    :uid id
    :style style
    :data
     (file/file
      :name filename
      :path "icons")))
 :doc "")

(func uilist<-ranksuit-parent : ui/uilist
 [ranksuitarg : base/ranksuit
  parent      : string]
 (if : ui/uilist
  (then
   (is-empty ranksuitarg)
   (empty ranksuit))
  (else
   (let : ui/uilist
    [rank : base/rank := (:rank ranksuitarg)
     suit : base/suit := (:suit ranksuitarg)
     labelrank1 : string :=
      (string
       parent
       "/rank1")
     labelrank2 : string :=
      (string
       parent
       "/rank2")
     labelsuit1 : string :=
      (string
       parent
       "/suit1")
     labelsuit2 : string :=
      (string
       parent
       "/suit2")
     srank : string := (:titles rank)
     ssuit : string := (:titles suit)
     uisuit1 : ui/ui :=
      (ui-suit<-uid-rank-suit-pos
       parent rank suit 1)
     uisuit2 : ui/ui :=
      (ui-suit<-uid-rank-suit-pos
       parent rank suit 2)]
    (ui/uilist
     (ui/ui
      :uid labelrank1
      :style styles/style-card-rank
      :stylelist
       (ui/stylelist
        styles/style-text-rank1)
      :data srank)
     (ui/ui
      :uid labelrank2
      :style styles/style-card-rank
      :stylelist
       (ui/stylelist
        styles/style-text-rank2)
      :data srank)
     uisuit1
     uisuit2))))
 :doc "")

(func uimap<-cardmap-parent-page-size : ui/uimap
 [cardmap : base/cardmap
  parent  : string
  page    : int
  size    : int]
 (let : ui/uimap
  [uilist : ui/uilist :=
    (list<-map : ui/uilist
     cardmap
     (fn : ui/ui
      [key  : string
       card : base/card]
      (ui<-card-parent
       card parent)))]
  (ui/uimap<-uilist
   uilist))
 :doc "Returns a uimap given a cardmap")
