(package nx/tactics/decks/starter
 :libs (lib base :path nx/tactics/base)
       (lib typ  :path vx/type)
 :doc  "Tactics Starter Decks")

(func card-conflictlower : base/card
 (base/card
  :id "conflictlower"
  :name "Conflict: Lower"
  :image "images/card-conflict-lower.svg"
  :summary
   "Conflict: Play this when playing a Conflict card to indicate that the lower choice on the card is being used (i.e. the side facing toward you)."))

(func card-conflictupper : base/card
 (base/card
  :id "conflictupper"
  :name "Conflict: Upper"
  :image "images/card-conflict-upper.svg"
  :summary
   "Conflict: Play this when playing a Conflict card to indicate that the upper choice on the card is being used (i.e. the side facing away from you)."))

(func card-player : base/card
 [color : string
  num : int]
 (base/card
  :id (string "card-player-" color "-" num)
  :name "Player"
  :image (string "images/card-" color ".svg")
  :summary
   "* [Setup]: Place your Units on the [Status Bar] with a [Unit#] card. Arrange your other Unit cards in front of you.
    * [Round End]: [Draw]:1 and [Recover]."))

(func card-rotated : base/card
 [color : string
  num : int]
 (base/card
  :id (string "card-rotated-" color "-" num)
  :name "Rotated Cards"
  :image (string "images/card-" color ".svg")
  :summary
   "* [Between Games]: Rotate this card 90 degrees and place it on top of all rotated card.
    * [Game Start]: Rotate this card 90 degrees with all cards under it and then remove this card to return the rotated cards to their correct orientation."))

(func card-target : base/card
 [tactics : base/tactics
  color : string
  num : int]
 (let : base/card
  [rule : base/rule :=
   (base/rule<-tactics-key tactics "Target#")]
  (copy rule
   :id (string "card-target-" color "-" num)
   :name (string "Target#" num)
   :image (string "images/card-" color ".svg")
  )))

(func card-unit : base/card
 [tactics : base/tactics
  color   : string
  num     : int]
 (let : base/card
  [rule : base/rule :=
    (base/rule<-tactics-key tactics "Unit#")]
  (copy rule
   :id (string "unit-" color "-" num)
   :name (string "Unit#" num)
   :image (string "images/rule-player-" color ".svg")
  )))

(func deck-player : base/deck
 [tactics : base/tactics
  color   : string]
 (let : base/deck
  [cardlist : base/cardlist :=
    (base/cardlist
     (card-player color 1)
     (card-rotated color 1)
     (card-unit tactics color 1)
     (card-unit tactics color 2)
     (card-unit tactics color 3)
     (card-unit tactics color 4)
     (card-unit tactics color 5)
     (card-target tactics color 1)
     (card-target tactics color 2)
     (card-target tactics color 3)
     (card-target tactics color 4)
     (card-target tactics color 5))
   cardmap : base/cardmap :=
    (base/cardmap<-cardlist
     cardlist)]
  (base/deck
   :id (string "deck-player-" color)
   :name "Player Deck"
   :image (string "images/rule-player-" color "-deck.svg")
   :layout base/cardlayout-imageonly
   :cardmap cardmap)))
