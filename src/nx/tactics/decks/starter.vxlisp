(package nx/tactics/decks/starter
 :libs (lib base :path nx/tactics/base)
       (lib typ  :path vx/type)
 :doc  "Tactics Starter Decks")

(func card-conflictlower : base/card
 (base/card
  :id "conflictlower"
  :name "Conflict: Lower"
  :image "images/card-conflict-lower.svg"
  :summary
   "Conflict: Play this when playing a Conflict card to indicate that the lower choice on the card is being used (i.e. the side facing toward you)."))

(func card-conflictupper : base/card
 (base/card
  :id "conflictupper"
  :name "Conflict: Upper"
  :image "images/card-conflict-upper.svg"
  :summary
   "Conflict: Play this when playing a Conflict card to indicate that the upper choice on the card is being used (i.e. the side facing away from you)."))

(func card-player : base/card
 [color : string
  num : int]
 (base/card
  :id (string "card-player-" color "-" num)
  :name "Player"
  :image (string "images/card-" color ".svg")
  :summary
   "* Used as a cover for this player's cards."))

(func card-rotated : base/card
 [color : string
  num : int]
 (base/card
  :id (string "card-rotated-" color "-" num)
  :name "Rotated Cards"
  :image (string "images/card-" color ".svg")
  :summary
   "* This Card is used to keep the orientation of cards when stored between games.
    * Between Games: Rotate this card 90 degrees and place it on top of all rotated card.
    * When Starting a game: Rotate this card 90 degrees with all cards under it and then remove this card to return the rotated cards to their correct orientation."))

(func card-round-num : base/card
 [num : int]
 (base/card
  :id (string "card-round-num-" num)
  :name (string "Round #: " num)))

(func card-skill : base/card
 [color : string
  num : int]
 (base/card
  :id (string "card-skill-" color "-" num)
  :name (string "Skill #" num)
  :image (string "images/card-" color ".svg")
  :summary
   "* Used when a [Skill] needs a [Target].
    * Place the Skill# card on the active Skill card and the matching Target# on the target."))

(func card-target : base/card
 [color : string
  num : int]
 (base/card
  :id (string "card-target-" color "-" num)
  :name (string "Target #" num)
  :image (string "images/card-" color ".svg")
  :summary
   "* Used when a [Skill] needs a [Target].
    * Place the Skill# card on the active Skill card and the matching Target# on the target."))

(func card-turn-order : base/card
 [color : string
  num   : int]
 (base/card
  :id    (string "turn-order-" num)
  :name  (string "Turn Order: Unit #" num)
  :image (string "images/card-" color ".svg")
  :summary
   "* Reveal: Flip each card of [Turn Order] deck to form a row.
    * Action 1: Simultaneously, each unit's controller chooses a target (or none) for this Round and places their Target card on that Turn Order card.
    * Change 1: In order, each Unit may change their decision.
    * Resolve 1: All Units act simultaneously. IF a Unit was targeted by a Unit with a lower Turn Order THEN they must wait for the targeting Unit to resolve. Note: lower order Units cannot be blocked by the movement of higher order Units.
    * Action 2: Each unit's controller simulataneously chooses and resolves their second Action."))

(func card-unit : base/card
 [color : string
  num   : int]
 (base/card
  :id (string "unit-" color "-" num)
  :name (string "Unit #" num)
  :image (string "images/card-" color ".svg")
  :summary
   "* Represents a particular unit.
    * Place this card above the matching Unit. All [Damage] and [Target] cards are placed on this card."))

(func deck-player : base/deck
 [color : string]
 (let : base/deck
  [cardlist : base/cardlist :=
    (base/cardlist
     (card-player color 1)
     (card-rotated color 1)
     (card-turn-order color 1)
     (card-turn-order color 2)
     (card-turn-order color 3)
     (card-turn-order color 4)
     (card-turn-order color 5)
     (card-unit color 1)
     (card-unit color 2)
     (card-unit color 3)
     (card-unit color 4)
     (card-unit color 5)
     (card-target color 1)
     (card-target color 2)
     (card-target color 3)
     (card-target color 4)
     (card-target color 5)
     (card-skill color 1)
     (card-skill color 2)
     (card-skill color 3)
     (card-skill color 4)
     (card-skill color 5))
   cardmap : base/cardmap :=
    (base/cardmap<-cardlist
     cardlist)]
  (base/deck
   :id (string "deck-player-" color)
   :name "Player Deck"
   :image (string "images/card-" color ".svg")
   :cardmap cardmap)))

(func deck-round : base/deck
 (base/deck
  :id (string "deck-round")
  :name "Round Deck"
  :cardmap
   (base/cardmap<-cardlist
    (card-round-num 1)
    (card-round-num 2)
    (card-round-num 3)
    (card-round-num 4)
    (card-round-num 5)
    (card-round-num 6)
    (card-round-num 7)
    (card-round-num 8)
    (card-round-num 9)
    (card-round-num 10)
    (card-round-num 11)
    (card-round-num 12)
    (card-round-num 13)
    (card-round-num 14)
    (card-round-num 15)
    (card-round-num 16)
    (card-round-num 17)
    (card-round-num 18)
    (card-round-num 19)
    (card-round-num 20))))
