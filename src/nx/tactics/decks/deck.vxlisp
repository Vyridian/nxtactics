(package nx/tactics/decks/deck
 :libs (lib base           :path nx/tactics/base)
       (lib burden         :path nx/tactics/decks/burden)
       (lib conflict       :path nx/tactics/decks/conflict)
       (lib data           :path nx/tactics/decks/data)
       (lib disorder       :path nx/tactics/decks/disorder)
       (lib rule           :path nx/tactics/decks/rule)
       (lib murintrail     :path nx/tactics/decks/scene-murintrail)
       (lib nightonthetown :path nx/tactics/decks/scene-nightonthetown)
       (lib ontherun       :path nx/tactics/decks/scene-ontherun)
       (lib resource       :path nx/tactics/decks/resource)
       (lib starter        :path nx/tactics/decks/starter)
       (lib trauma         :path nx/tactics/decks/trauma)
       (lib wound          :path nx/tactics/decks/wound)
 :doc  "Tactics Decks")

(func deck-home : base/deck
 (let : base/deck
  [tactics : base/tactics :=
    data/tactics-all]
  (base/deck
   :name "Home"
   :cardmap
    (base/cardmap<-cardlist
     (base/cardlist
      (deck-rules tactics)
      (deck-decks tactics)
      (deck-scenes tactics)
      (deck-books tactics)
      (deck-places tactics)
      (deck-units tactics)
      (deck-items tactics)
      (deck-skills tactics)
      (deck-powers tactics)
      (deck-abilities tactics)
      (deck-specialties tactics))))))

(func deck-abilities : base/deck
 [tactics : base/tactics]
 (let : base/deck
  [abilitymap : base/abilitymap :=
   (:abilitymap data/tactics-all)
   cardmap : base/cardmap :=
    (map<-map : base/cardmap
     abilitymap)]
  (base/deck
   :name "Abilities"
   :cardmap cardmap))
 :doc "Ability Deck")

(func deck-books : base/deck
 [tactics : base/tactics]
 (base/deck
  :name "Books"
  :cardmap
   (base/cardmap<-bookmap
    (:bookmap data/tactics-all)))
 :doc "Deck of books")

(func deck-items : base/deck
 [tactics : base/tactics]
 (let : base/deck
  [itemmap : base/itemmap :=
   (:itemmap data/tactics-all)
   cardmap : base/cardmap :=
    (map<-map : base/cardmap
     itemmap)]
  (base/deck
   :name "Items"
   :cardmap cardmap))
 :doc "Items Deck")

(func deck-places : base/deck
 [tactics : base/tactics]
 (let : base/deck
  [placemap : base/placemap :=
   (:placemap data/tactics-all)
   cardmap : base/cardmap :=
    (map<-map : base/cardmap
     placemap)]
  (base/deck
   :name "Places"
   :cardmap cardmap))
 :doc "Places Deck")

(func deck-powers : base/deck
 [tactics : base/tactics]
 (let : base/deck
  [powermap : base/powermap :=
   (:powermap data/tactics-all)
   cardmap : base/cardmap :=
    (map<-map : base/cardmap
     powermap)]
  (base/deck
   :name "Powers"
   :cardmap cardmap))
 :doc "Powers Deck")

(func deck-decks : base/deck
 [tactics : base/tactics]
 (base/deck
  :name "Decks"
  :cardmap
   (base/cardmap<-cardlist
    (base/cardlist
     (starter/deck-player tactics "blue")
     (starter/deck-player tactics "green")
     (starter/deck-player tactics "red")
     (starter/deck-player tactics "yellow")
     (conflict/deck-conflict)
     (wound/deck-wound)
     (disorder/deck-disorder)
     (trauma/deck-trauma)
     (burden/deck-burden)
     (resource/deck-resource))))
 :doc "Setup Deck")

(func deck-scenes : base/deck
 [tactics : base/tactics]
 (base/deck
  :name "Scenes"
  :cardmap
   (base/cardmap<-cardlist
    (base/cardlist
     (murintrail/deck-murintrail tactics)
     (nightonthetown/deck-nightonthetown tactics)
     (ontherun/deck-ontherun tactics)))))

(func deck-skills : base/deck
 [tactics : base/tactics]
 (let : base/deck
  [skillmap : base/skillmap :=
   (:skillmap data/tactics-all)
   cardmap : base/cardmap :=
    (map<-map : base/cardmap
     skillmap)]
  (base/deck
   :name "Skills"
   :cardmap cardmap))
 :doc "Skills Deck")

(func deck-specialties : base/deck
 [tactics : base/tactics]
 (let : base/deck
  [specialtymap : base/specialtymap :=
   (:specialtymap data/tactics-all)
   cardmap : base/cardmap :=
    (map<-map : base/cardmap
     specialtymap)]
  (base/deck
   :name "Specialties"
   :cardmap cardmap))
 :doc "Specialty Deck")

(func deck-units : base/deck
 [tactics : base/tactics]
 (let : base/deck
  [unitmap : base/unitmap :=
   (:unitmap data/tactics-all)
   cardmap : base/cardmap :=
    (map<-map : base/cardmap
     unitmap)]
  (base/deck
   :name "Units"
   :cardmap cardmap))
 :doc "Units Deck")
