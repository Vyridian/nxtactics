(package nx/tactics/base
 :libs (lib coll :path vx/collection)
 :doc "Tactics Base Types")

(type ability : struct
 :traits [card])

(type abilitylist : list
 :allowtypes [ability])

(type abilitylistlist : list
 :allowtypes [abilitylist])

(type abilitymap : map
 :allowtypes [ability])

(type book : struct
 :traits     [card]
 :properties [chaptermap : chaptermap])

(type booklist : list
 :allowtypes [book])

(type bookmap : map
 :allowtypes [book])

(type card : struct
 :properties
  [id          : string
   name        : string
   icon        : string
   image       : string
   imgmirror   : boolean
   reference   : string
   secrets     : string
   summary     : string
   titles      : string
   orientation : string
   ranksuit    : ranksuit])

(type cardback : struct
 :traits [card]
 :doc "The back of a card. Title repeated on top and bottom.")

(type cardimage : struct
 :traits     [card]
 :properties [origcard : card])

(type cardlist : list
 :allowtypes [card])

(type cardmap : map
 :allowtypes [card])

(type chapter : struct
 :traits     [card]
 :properties [sectionmap : sectionmap])

(type chapterlist : list
 :allowtypes [chapter])

(type chapterlistlist : list
 :allowtypes [chapterlist])

(type chaptermap : map
 :allowtypes [chapter])

(type conflict : struct
 :traits [card])

(type damage : struct
 :traits [card]
 :doc "Lasting Body Damage")

(type damagelist : list
 :allowtypes [damage])

(type damagemap : map
 :allowtypes [damage])

(type deck : struct
 :traits     [card]
 :properties [cardmap : cardmap])

(type deckmap : map
 :traits     [card]
 :allowtypes [deck])

(type goal : struct
 :properties
  [description : string
   progress    : int
   complete    : int
   reward      : string]
 :traits [card])

(type item : struct
 :traits     [card]
 :properties
  [body           : string
   mind           : string
   will           : string
   speed          : string
   shadow         : string
   beast          : string
   armor          : string
   classification : string
   crew           : string
   energy         : string
   explosive      : string
   height         : string
   length         : string
   mass           : string
   modifiers      : string
   muzzlevelocity : string
   range          : string
   rof            : string
   rolemap        : rolemap
   rounds         : string
   speedair       : string
   speedland      : string
   speedspace     : string
   speedwater     : string
   value          : string
   width          : string])

(type itemlist : list
 :allowtypes [item])

(type itemlistlist : list
 :allowtypes [itemlist])

(type itemmap : map
 :allowtypes [item])

(type place : struct
 :traits     [card]
 :properties
  [length   : string
   mass     : string
   placemap : placemap
   unitmap  : unitmap])

(type placelist : list
 :allowtypes [place])

(type placelistlist : list
 :allowtypes [placelist])

(type placemap : map
 :allowtypes [place])

(type mind : struct
 :traits [card]
 :doc "The ability to use rational thought to do tasks. This is the opposite of the [Shadow].")

(type modifier : struct
 :traits [card])

(type modifiermap : map
 :allowtypes [modifier])

(type playingcard : struct
 :properties [rank : rank
              suit : suit])

(type power : struct
 :traits [card]
 :properties
  [stat         : string
   abilitymap   : abilitymap
   specialtymap : specialtymap
   weaknessmap  : weaknessmap])

(type powerlist : list
 :allowtypes [power])

(type powerlistlist : list
 :allowtypes [powerlist])

(type powermap : map
 :allowtypes [power])

(type rank : struct
 :traits [card])

(type ranksuit : struct
 :properties [rank : rank
              suit : suit]
 :traits [card])

(type rating : struct
 :traits [card]
 :properties
  [level : int :doc "Values: 2->10"
   part  : int :doc "Values: 0->9"
   scale : int :doc "Values: -x->x"]
 :doc "Rating are displayed as level.partxscale. e.g. 3x1, 5.1x2")

(type role : struct)

(type rolemap : map
 :allowtypes [role])

(type rule : struct
 :properties [classification : string]
 :traits     [card])

(type rulelist : list
 :allowtypes [rule])

(type rulemap : map
 :allowtypes [rule])

(type scene : struct
 :traits     [card]
 :properties [teammap : teammap])

(type scenelist : list
 :allowtypes [scene])

(type scenemap : map
 :allowtypes [scene])

(type section : struct
 :traits     [card]
 :properties
  [damagemap   : damagemap
   deckmap     : deckmap
   itemmap     : itemmap
   modifiermap : modifiermap
   placemap    : placemap
   powermap    : powermap
   rulemap     : rulemap
   scenemap : scenemap
   sectionmap  : sectionmap
   skillmap    : skillmap
   suitmap     : suitmap
   terrainmap  : terrainmap
   unitmap     : unitmap
   weaknessmap : weaknessmap])

(type sectionlist : list
 :allowtypes [section])

(type sectionlistlist : list
 :allowtypes [sectionlist])

(type sectionmap : map
 :allowtypes [section])

(type skill : struct
 :traits     [card]
 :properties
  [stat         : string
   abilitymap   : abilitymap
   specialtymap : specialtymap])

(type skilllist : list
 :allowtypes [skill])

(type skillmap : map
 :allowtypes [skill])

(type skilllistlist : list
 :allowtypes [skilllist])

(type specialty : struct
 :traits [card])

(type specialtylist : list
 :allowtypes [specialty])

(type specialtymap : map
 :allowtypes [specialty])

(type stat : struct
 :traits [card])

(type suit : struct
 :traits [card])

(type suitmap : map
 :allowtypes [suit])

(type tactics : struct
 :properties
  [bookmap      : bookmap
   abilitymap   : abilitymap
   cardmap      : cardmap
   itemmap      : itemmap
   placemap     : placemap
   powermap     : powermap
   rulemap      : rulemap
   scenemap     : scenemap
   skillmap     : skillmap
   specialtymap : specialtymap
   unitmap      : unitmap])

(type tarot : struct
 :traits [card])

(type team : struct
 :properties
  [completevictory : string
   deploy          : string
   forces          : string
   partialvictory  : string]
 :traits [card])

(type teammap : map
 :allowtypes [team])

(type terrain : struct
 :traits [card])

(type terrainmap : map
 :allowtypes [terrain])

(type threat : struct
 :properties
  [description  : string
   progress     : int
   complete     : int
   consequences : string]
 :traits [card])

(type unit : struct
 :traits     [card]
 :properties
  [body            : string
   mind            : string
   will            : string
   speed           : string
   shadow          : string
   conscience      : string
   beast           : string
   demeanor        : string
   nature          : string
   passions        : string
   fears           : string
   bonds           : string
   age             : int
   classification  : string
   crew            : string
   gender          : string
   mass            : string
   height          : string
   length          : string
   race            : string
   range           : string
   speedair        : string
   speedland       : string
   speedspace      : string
   speedwater      : string
   value           : string
   width           : string
   damagelist      : damagelist
   rolemap         : rolemap
   unitpowermap    : unitpowermap
   unitskillmap    : unitskillmap
   unitweaknessmap : unitweaknessmap])

(type unitability : struct
 :properties
  [name      : string
   ability   : ability
   image     : string
   titles    : string
   reference : string])

(type unitabilitylist : list
 :allowtypes [unitability])

(type unitabilitymap : map
 :allowtypes [unitability])

(type unititem : struct
 :properties
  [name   : string
   item   : item
   facing : string
   number : string
   rounds : string
   value  : string]
 :traits [card])

(type unititemlist : list
 :allowtypes [unititem])

(type unititemmap : map
 :allowtypes [unititem])

(type unitlist : list
 :allowtypes [unit])

(type unitlistlist : list
 :allowtypes [unitlist])

(type unitmap : map
 :allowtypes [unit])

(type unitpower : struct
 :properties
  [level            : string
   power            : power
   front            : string
   back             : string
   over             : string
   under            : string
   side             : string
   strength         : string
   unitabilitymap   : unitabilitymap
   unititemmap      : unititemmap
   unitspecialtymap : unitspecialtymap]
 :traits [card])

(type unitpowerlist : list
 :allowtypes [unitpower])

(type unitpowermap : map
 :allowtypes [unitpower])

(type unitskill : struct
 :properties
  [level            : string
   effect           : string
   skill            : skill
   unitabilitymap   : unitabilitymap
   unititemmap      : unititemmap
   unitspecialtymap : unitspecialtymap]
 :traits [card])

(type unitskilllist : list
 :allowtypes [unitskill])

(type unitskillmap : map
 :allowtypes [unitskill])

(type unitspecialty : struct
 :properties
  [name      : string
   image     : string
   titles    : string
   reference : string])

(type unitspecialtymap : map
 :allowtypes [unitspecialty])

(type unitweakness : struct
 :traits [card])

(type unitweaknessmap : map
 :allowtypes [unitweakness])

(type weakness : struct
 :traits [card])

(type weaknesslist : list
 :allowtypes [weakness])

(type weaknessmap : map
 :allowtypes [weakness])

(type disorder : struct
 :traits [card]
 :doc "Lasting Mind Damage")

(type trauma : struct
 :traits [card]
 :doc "Lasting Will Damage")

(const rank-ace : rank
 (rank
  :name "Ace"
  :titles "A"))

(const rank-king : rank
 (rank
  :name "King"
  :titles "K"))

(const rank-queen : rank
 (rank
  :name "Queen"
  :titles "Q"))

(const rank-jack : rank
 (rank
  :name "Jack"
  :titles "J"))

(const rank-ten : rank
 (rank
  :name "Ten"
  :titles "10"))

(const rank-nine : rank
 (rank
  :name "Nine"
  :titles "9"))

(const rank-eight : rank
 (rank
  :name "Eight"
  :titles "8"))

(const rank-seven : rank
 (rank
  :name "Seven"
  :titles "7"))

(const rank-six : rank
 (rank
  :name "Six"
  :titles "6"))

(const rank-five : rank
 (rank
  :name "Five"
  :titles "5"))

(const rank-four : rank
 (rank
  :name "Four"
  :titles "4"))

(const rank-three : rank
 (rank
  :name "Three"
  :titles "3"))

(const rank-two : rank
 (rank
  :name "Two"
  :titles "2"))

(const rank-joker : rank
 (rank
  :name "Wild"
  :titles "W"))

(const ranksuit-jokerblack : ranksuit
 (ranksuit
  :rank rank-joker
  :suit suit-black))

(const ranksuit-jokerred : ranksuit
 (ranksuit
  :rank rank-joker
  :suit suit-red))

(const ranksuit-ac : ranksuit
 (ranksuit
  :rank rank-ace
  :suit suit-club))

(const ranksuit-ad : ranksuit
 (ranksuit
  :rank rank-ace
  :suit suit-diamond))

(const ranksuit-ah : ranksuit
 (ranksuit
  :rank rank-ace
  :suit suit-heart))

(const ranksuit-as : ranksuit
 (ranksuit
  :rank rank-ace
  :suit suit-spade))

(const ranksuit-kc : ranksuit
 (ranksuit
  :rank rank-king
  :suit suit-club))

(const ranksuit-kd : ranksuit
 (ranksuit
  :rank rank-king
  :suit suit-diamond))

(const ranksuit-kh : ranksuit
 (ranksuit
  :rank rank-king
  :suit suit-heart))

(const ranksuit-ks : ranksuit
 (ranksuit
  :rank rank-king
  :suit suit-spade))

(const ranksuit-qc : ranksuit
 (ranksuit
  :rank rank-queen
  :suit suit-club))

(const ranksuit-qd : ranksuit
 (ranksuit
  :rank rank-queen
  :suit suit-diamond))

(const ranksuit-qh : ranksuit
 (ranksuit
  :rank rank-queen
  :suit suit-heart))

(const ranksuit-qs : ranksuit
 (ranksuit
  :rank rank-queen
  :suit suit-spade))

(const ranksuit-jc : ranksuit
 (ranksuit
  :rank rank-jack
  :suit suit-club))

(const ranksuit-jd : ranksuit
 (ranksuit
  :rank rank-jack
  :suit suit-diamond))

(const ranksuit-jh : ranksuit
 (ranksuit
  :rank rank-jack
  :suit suit-heart))

(const ranksuit-js : ranksuit
 (ranksuit
  :rank rank-jack
  :suit suit-spade))

(const ranksuit-tc : ranksuit
 (ranksuit
  :rank rank-ten
  :suit suit-club))

(const ranksuit-td : ranksuit
 (ranksuit
  :rank rank-ten
  :suit suit-diamond))

(const ranksuit-th : ranksuit
 (ranksuit
  :rank rank-ten
  :suit suit-heart))

(const ranksuit-ts : ranksuit
 (ranksuit
  :rank rank-ten
  :suit suit-spade))

(const ranksuit-9c : ranksuit
 (ranksuit
  :rank rank-nine
  :suit suit-club))

(const ranksuit-9d : ranksuit
 (ranksuit
  :rank rank-nine
  :suit suit-diamond))

(const ranksuit-9h : ranksuit
 (ranksuit
  :rank rank-nine
  :suit suit-heart))

(const ranksuit-9s : ranksuit
 (ranksuit
  :rank rank-nine
  :suit suit-spade))

(const ranksuit-8c : ranksuit
 (ranksuit
  :rank rank-eight
  :suit suit-club))

(const ranksuit-8d : ranksuit
 (ranksuit
  :rank rank-eight
  :suit suit-diamond))

(const ranksuit-8h : ranksuit
 (ranksuit
  :rank rank-eight
  :suit suit-heart))

(const ranksuit-7c : ranksuit
 (ranksuit
  :rank rank-seven
  :suit suit-club))

(const ranksuit-7d : ranksuit
 (ranksuit
  :rank rank-seven
  :suit suit-diamond))

(const ranksuit-7h : ranksuit
 (ranksuit
  :rank rank-seven
  :suit suit-heart))

(const ranksuit-7s : ranksuit
 (ranksuit
  :rank rank-seven
  :suit suit-spade))

(const ranksuit-6c : ranksuit
 (ranksuit
  :rank rank-six
  :suit suit-club))

(const ranksuit-6d : ranksuit
 (ranksuit
  :rank rank-six
  :suit suit-diamond))

(const ranksuit-6h : ranksuit
 (ranksuit
  :rank rank-six
  :suit suit-heart))

(const ranksuit-6s : ranksuit
 (ranksuit
  :rank rank-six
  :suit suit-spade))

(const ranksuit-5c : ranksuit
 (ranksuit
  :rank rank-five
  :suit suit-club))

(const ranksuit-5d : ranksuit
 (ranksuit
  :rank rank-five
  :suit suit-diamond))

(const ranksuit-5h : ranksuit
 (ranksuit
  :rank rank-five
  :suit suit-heart))

(const ranksuit-5s : ranksuit
 (ranksuit
  :rank rank-five
  :suit suit-spade))

(const ranksuit-4c : ranksuit
 (ranksuit
  :rank rank-four
  :suit suit-club))

(const ranksuit-4d : ranksuit
 (ranksuit
  :rank rank-four
  :suit suit-diamond))

(const ranksuit-4h : ranksuit
 (ranksuit
  :rank rank-four
  :suit suit-heart))

(const ranksuit-4s : ranksuit
 (ranksuit
  :rank rank-four
  :suit suit-spade))

(const ranksuit-3c : ranksuit
 (ranksuit
  :rank rank-three
  :suit suit-club))

(const ranksuit-3d : ranksuit
 (ranksuit
  :rank rank-three
  :suit suit-diamond))

(const ranksuit-3h : ranksuit
 (ranksuit
  :rank rank-three
  :suit suit-heart))

(const ranksuit-3s : ranksuit
 (ranksuit
  :rank rank-three
  :suit suit-spade))

(const ranksuit-2c : ranksuit
 (ranksuit
  :rank rank-two
  :suit suit-club))

(const ranksuit-2d : ranksuit
 (ranksuit
  :rank rank-two
  :suit suit-diamond))

(const ranksuit-2h : ranksuit
 (ranksuit
  :rank rank-two
  :suit suit-heart))

(const ranksuit-2s : ranksuit
 (ranksuit
  :rank rank-two
  :suit suit-spade))

(const ranksuit-8s : ranksuit
 (ranksuit
  :rank rank-eight
  :suit suit-spade))

(const role-aoe : role)

(const role-bosskiller : role)

(const role-buffer : role)

(const role-crowdcontrol : role)

(const role-distracter : role)

(const role-healer : role)

(const role-sniper : role)

(const role-tank : role)

(const role-trapper : role)

(const role-utility : role)

(const stat-beast : stat
 :doc "The ability to use wild rage or terror to lash out or flee. This is the opposite of the [Will].")

(const stat-body : stat)

(const stat-mind : stat)

(const stat-shadow : stat
 :doc "The ability to use rational thought to do selfish/impulsive acts. This is the opposite of the [Mind].")

(const stat-will : stat)

(const stat-speed : stat)

(const suit-club : suit)

(const suit-diamond : suit)

(const suit-heart : suit)

(const suit-spade : suit)

(const suit-black : suit)

(const suit-red : suit)

(func ability<-tactics-key : ability
 [tactics : tactics
  key     : string]
 (let : ability
  [abilitymap : abilitymap :=
    (:abilitymap tactics)
   ability : ability :=
    (any<-map abilitymap key)
   logit : string :=
    (if : string
     (then (is-empty ability) (log key))
     (else key))]
  ability)
 :doc "Returns an ability from tactics")

(func abilitylist<-abilitylistlist : abilitylistlist
 [abilitylistlist : abilitylistlist]
 (list<-list-join : abilitylist
  abilitylistlist)
 :doc "Returns an abilitylist from a given abilitylistlist")

(func abilitylist<-skill : abilitylist
 [skill : skill]
 (let : abilitylist
  [abilitymap : abilitymap := (:abilitymap skill)]
  (list<-map : abilitylist
   abilitymap))
 :doc "Returns an abilitylist from a given skill")

(func abilitylist<-power : abilitylist
 [power : power]
 (let : abilitylist
  [abilitymap : abilitymap := (:abilitymap power)]
  (list<-map : abilitylist
   abilitymap))
 :doc "Returns an abilitylist from a given power")

(func abilitylist<-powerlist : abilitylist
 [powerlist : powerlist]
 (let : abilitylist
  [abilitylistlist : abilitylistlist :=
    (abilitylistlist<-powerlist
     powerlist)]
 (abilitylist<-abilitylistlist
  abilitylistlist))
 :doc "Returns a abilitylist from a given skilllist")

(func abilitylist<-skilllist : abilitylist
 [skilllist : skilllist]
 (let : abilitylist
  [abilitylistlist : abilitylistlist :=
    (abilitylistlist<-skilllist
     skilllist)]
 (abilitylist<-abilitylistlist
  abilitylistlist))
 :doc "Returns a abilitylist from a given skilllist")

(func abilitylist<-tactics-keys : abilitylist
 [tactics : tactics
  keys : stringlist :...]
 (let : abilitylist
  [abilitylist : abilitylist :=
    (list<-list : abilitylist
     keys
     (fn : ability
      [key : string]
      (ability<-tactics-key
       tactics key)))]
  abilitylist)
 :doc "Return an abilitylist from keys and tactics")

(func abilitylistlist<-powerlist : abilitylistlist
 [powerlist : powerlist]
 (list<-list : abilitylistlist
  powerlist
  (fn : abilitylist
   [power : power]
   (abilitylist<-power : abilitylist
    power)))
 :doc "Returns an abilitylistlist from a given powerlist")

(func abilitylistlist<-skilllist : abilitylistlist
 [skilllist : skilllist]
 (list<-list : abilitylistlist
  skilllist
  (fn : abilitylist
   [skill : skill]
   (abilitylist<-skill : abilitylist
    skill)))
 :doc "Returns an abilitylistlist from a given skilllist")

(func abilitymap<-abilitylist : abilitymap
 [abilitylist : abilitylist :...]
 (map<-list : abilitymap
  abilitylist
  (fn : ability
   [ability : ability]
   (:name ability)))
 :doc "Returns an abilitymap from a given abilitylist")

(func abilitymap<-tactics-keys : abilitymap
 [tactics : tactics
  keys : stringlist :...]
 (let : abilitymap
  [abilitylist : abilitylist :=
    (abilitylist<-tactics-keys
     tactics keys)]
  (abilitymap<-abilitylist
   abilitylist))
 :doc "Return an abilitymap from keys and tactics")

(func bookmap<-booklist : bookmap
 [booklist : booklist :...]
 (map<-list : bookmap
  booklist
  (fn : string
   [book : book]
   (:name book)))
 :doc "Returns a bookmap of all books.")

(func cardlist-copy<-card-num : cardlist
 [card : card
  num  : int]
 (list<-for-end-loop
  1
  num
  (fn : card
   [pos : int]
   (let : card
    [id : string := (:id card)
     chg : string := (string id "-" pos)]
    (copy card
     :id chg))))
 :doc "Returns a cardlist by copying a card num times")

(func cardmap<-bookmap : cardmap
 [bookmap : bookmap]
 (map<-map : cardmap
  bookmap
  (fn : card
   [key   : string
    value : book]
   (any<-any : card
    value)))
 :doc "Returns a cardmap from a given bookmap")

(func cardmap<-cardlist : cardmap
 [cardlist : cardlist :...]
 (map<-list : cardmap
  cardlist
  (fn : string
   [card : card]
   (let : string
    [id   : string := (:id card)
     name : string := (:name card)]
    (if : string
     (!-empty id)
     id
     name)))))

(func cardmap-copy<-card-num : cardmap
 [card : card
  num  : int]
 (let : cardmap
  [cardlist : cardlist :=
   (cardlist-copy<-card-num
    card num)]
  (cardmap<-cardlist
   cardlist))
 :doc "Returns a cardmap by copying a card num times")

(func chapterlist<-book : chapterlist
 [book : book]
 (let : chapterlist
  [chaptermap : chaptermap := (:chaptermap book)]
  (list<-map : chapterlist
   chaptermap
   (fn : chapter
    [key   : string
     value : chapter]
    value)))
 :doc "Returns a chapterlist from a given book")

(func chapterlist<-booklist : chapterlist
 [booklist : booklist]
 (let : chapterlist
  [chapterlistlist : chapterlistlist :=
    (chapterlistlist<-booklist
     booklist)]
 (chapterlist<-chapterlistlist
  chapterlistlist))
 :doc "Returns a chapterlist from a given booklist")

(func chapterlist<-chapterlistlist : chapterlistlist
 [chapterlistlist : chapterlistlist]
 (list<-list-join : chapterlist
  chapterlistlist)
 :doc "Returns a chapterlist from a given chapterlistlist")

(func chapterlistlist<-booklist : chapterlistlist
 [booklist : booklist]
 (list<-list : chapterlistlist
  booklist
  (fn : chapterlist
   [book : book]
   (chapterlist<-book : chapterlist
    book)))
 :doc "Returns a chapterlistlist from a given booklist")

(func chaptermap<-chapterlist : chaptermap
 [chapterlist : chapterlist]
 (map<-list : chaptermap
  chapterlist
  (fn : chapter
   [chapter : chapter]
   (:name chapter)))
 :doc "Returns a chaptermap from a given chapterlist")

(func cardimage<-card : cardimage
 [card : card]
 (let : cardimage
  [name  : string := (:name card)
   image : string := (:image card)
   imgmirror : boolean := (:imgmirror card)
   id : string := (string name "-image")]
  (cardimage
   :id id
   :name name
   :origcard card
   :image image
   :imgmirror imgmirror))
 :doc "Returns a cardimage from a given card")

(func item<-tactics-key : item
 [tactics : tactics
  key     : string]
 (let : item
  [itemmap : itemmap :=
    (:itemmap tactics)
   item : item := (any<-map itemmap key)
   logit : string :=
    (if : string
     (then (is-empty item) (log key))
     (else key))]
  item)
 :doc "Returns an item from tactics")

(func itemlist<-itemlistlist : itemlist
 [itemlistlist : itemlistlist]
 (list<-list-join : itemlist
  itemlistlist)
 :doc "Returns a itemlist from a given itemlistlist")

(func itemlist<-itemmap : itemlist
 [itemmap : itemmap]
 (list<-map : itemlist
  itemmap)
 :doc "Returns a itemlist from a given itemmap")

(func itemlist<-section : itemlist
 [section : section]
 (let : itemlist
  [secname : string := (:name section)
   sec : section :=
    (copy section
     :name secname)
   itemmap : itemmap := (:itemmap section)]
  (itemlist<-itemmap
   itemmap))
 :doc "Returns a itemlist from a given section")

(func itemlist<-sectionlist : itemlist
 [sectionlist : sectionlist]
 (let : itemlist
  [itemlistlist : itemlistlist :=
   (itemlistlist<-sectionlist
    sectionlist)]
  (itemlist<-itemlistlist
   itemlistlist))
 :doc "Returns a itemlist from a given sectionlist")

(func itemlist<-tactics-keys : itemlist
 [tactics : tactics
  keys : stringlist :...]
 (let : itemlist
  [itemlist : itemlist :=
    (list<-list : itemlist
     keys
     (fn : item
      [key : string]
      (item<-tactics-key tactics key)))]
   itemlist)
 :doc "Return an itemlist from keys and tactics")

(func itemlistlist<-sectionlist : itemlistlist
 [sections : sectionlist]
 (list<-list : itemlistlist
  sections
  (fn : itemlist
   [section : section]
   (itemlist<-section
    section)))
 :doc "Returns a itemlistlist from a given sectionlist")

(func itemmap<-itemlist : itemmap
 [itemlist : itemlist :...]
 (map<-list : itemmap
  itemlist
  (fn : item
   [item : item]
   (:name item)))
 :doc "Returns a itemmap from a given itemlist")

(func itemmap<-tactics-keys : itemmap
 [tactics : tactics
  keys : stringlist :...]
 (let : itemmap
  [itemlist : itemlist :=
    (itemlist<-tactics-keys
     tactics keys)]
  (itemmap<-itemlist
   itemlist))
 :doc "Return an itemmap from tactics and keys")

(func name<-chapter : string
 [chapter : chapter]
 (:name chapter))

(func place<-tactics-key : place
 [tactics : tactics
  key     : string]
 (let : place
  [placemap : placemap :=
    (:placemap tactics)
   place : place :=
    (any<-map placemap key)
   logit : string :=
    (if : string
     (then (is-empty place) (log key))
     (else key))]
  place)
 :doc "Returns an place from tactics")

(func placelist<-placelistlist : placelist
 [placelistlist : placelistlist]
 (list<-list-join : placelist
  placelistlist)
 :doc "Returns a placelist from a given placelistlist")

(func placelist<-placemap : placelist
 [placemap : placemap]
 (list<-map : placelist
  placemap)
 :doc "Returns a placelist from a given placemap")

(func placelist<-section : placelist
 [section : section]
 (let : placelist
  [secname : string := (:name section)
   sec : section :=
    (copy section
     :name secname)
   placemap : placemap := (:placemap section)]
  (placelist<-placemap
   placemap))
 :doc "Returns a placelist from a given section")

(func placelist<-sectionlist : placelist
 [sectionlist : sectionlist]
 (let : placelist
  [placelistlist : placelistlist :=
   (placelistlist<-sectionlist
    sectionlist)]
  (placelist<-placelistlist
   placelistlist))
 :doc "Returns a placelist from a given sectionlist")

(func placelist<-tactics-keys : placelist
 [tactics : tactics
  keys : stringlist :...]
 (let : placelist
  [placelist : placelist :=
    (list<-list : placelist
     keys
     (fn : place
      [key : string]
      (place<-tactics-key tactics key)))]
   placelist)
 :doc "Return an placelist from tactics and keys")

(func placelistlist<-sectionlist : placelistlist
 [sections : sectionlist]
 (list<-list : placelistlist
  sections
  (fn : placelist
   [section : section]
   (placelist<-section
    section)))
 :doc "Returns a placelistlist from a given sectionlist")

(func placemap<-placelist : placemap
 [placelist : placelist :...]
 (map<-list : placemap
  placelist
  (fn : place
   [place : place]
   (:name place)))
 :doc "Returns a placemap from a given placelist")

(func power<-tactics-key : power
 [tactics : tactics
  key : string]
 (let : power
  [powermap : powermap := (:powermap tactics)
   power : power :=
    (any<-map powermap key)
   logit : string :=
    (if : string
     (then (is-empty power) (log key))
     (else key))]
  power)
 :doc "Returns a power from tactics")

(func powerlist<-powerlistlist : powerlist
 [powerlistlist : powerlistlist]
 (list<-list-join : powerlist
  powerlistlist)
 :doc "Returns a powerlist from a given powerlistlist")

(func powerlist<-powermap : powerlist
 [powermap : powermap]
 (list<-map : powerlist
  powermap)
 :doc "Returns a powerlist from a given powermap")

(func powerlist<-section : powerlist
 [section : section]
 (let : powerlist
  [secname : string := (:name section)
   sec : section :=
    (copy section
     :name secname)
   powermap : powermap := (:powermap section)]
  (powerlist<-powermap
   powermap))
 :doc "Returns a powerlist from a given section")

(func powerlist<-sectionlist : powerlist
 [sectionlist : sectionlist]
 (let : powerlist
  [powerlistlist : powerlistlist :=
   (powerlistlist<-sectionlist
    sectionlist)]
  (powerlist<-powerlistlist
   powerlistlist))
 :doc "Returns a powerlist from a given sectionlist")

(func powerlist<-tactics-keys : powerlist
 [tactics : tactics
  keys : stringlist :...]
 (let : powerlist
  [powerlist : powerlist :=
    (list<-list : powerlist
     keys
     (fn : power
      [key : string]
      (power<-tactics-key tactics key)))]
   powerlist)
 :doc "Return an powerlist from tactics and keys")

(func powerlistlist<-sectionlist : powerlistlist
 [sections : sectionlist]
 (list<-list : powerlistlist
  sections
  (fn : powerlist
   [section : section]
   (powerlist<-section
    section)))
 :doc "Returns a powerlistlist from a given sectionlist")

(func powermap<-powerlist : powermap
 [powerlist : powerlist :...]
 (map<-list : powermap
  powerlist
  (fn : power
   [power : power]
   (:name power)))
 :doc "Returns a powermap from a given powerlist")

(func powermap<-tactics-keys : powermap
 [tactics : tactics
  keys : stringlist :...]
 (let : powermap
  [powerlist : powerlist :=
    (powerlist<-tactics-keys
     tactics keys)]
  (powermap<-powerlist
   powerlist))
 :doc "Return an powermap from tactics and keys")

(func rule<-tactics-key : rule
 [tactics : tactics
  key : string]
 (let : rule
  [rulemap : rulemap := (:rulemap tactics)
   rule : rule :=
    (any<-map rulemap key)
   logit : string :=
    (if : string
     (then (is-empty rule) (log key))
     (else key))]
  rule)
 :doc "Returns a rule from tactics")

(func rulelist<-tactics-keys : rulelist
 [tactics : tactics
  keys : stringlist :...]
 (let : rulelist
  [rulelist : rulelist :=
    (list<-list : rulelist
     keys
     (fn : rule
      [key : string]
      (rule<-tactics-key tactics key)))]
   rulelist)
 :doc "Return an rulelist from tactics and keys")

(func rulemap<-rulelist : rulemap
 [rulelist : rulelist :...]
 (map<-list : rulemap
  rulelist
  (fn : rule
   [rule : rule]
   (:name rule)))
 :doc "Returns a rulemap from a given rulelist")

(func scenemap<-scenelist : scenemap
 [scenelist : scenelist :...]
 (map<-list : scenemap
  scenelist
  (fn : scene
   [scene : scene]
   (:name scene)))
 :doc "Returns a scenemap from a given scenelist")

(func sectionlist<-chapter : sectionlist
 [chapter : chapter]
 (let : sectionlist
  [sectionmap : sectionmap := (:sectionmap chapter)]
  (sectionlist<-sectionmap
   sectionmap))
 :doc "Returns a list of all sections directly under the given chapter")

(func sectionlist<-chapterlist : sectionlist
 [chapterlist : chapterlist]
 (let : sectionlist
  [sectionlistlist : sectionlistlist :=
   (sectionlistlist<-chapterlist
    chapterlist)]
  (sectionlist<-sectionlistlist
   sectionlistlist))
 :doc "Returns a list of all sections directly under the given chapterlist")

(func sectionlist<-section : sectionlist
 [section : section]
 (let : sectionlist
  [sectionmap : sectionmap := (:sectionmap section)]
  (sectionlist<-sectionmap
   sectionmap))
 :doc "Returns a list of all sections including subsections")

(func sectionlist<-sectionlistlist : sectionlist
 [sectionlistlist : sectionlistlist]
 (list<-list-join : sectionlist
  sectionlistlist)
 :doc "Returns a sectionlist from a given sectionlistlist")

(func sectionlist<-sectionmap : sectionlist
 [sectionmap : sectionmap]
 (list<-map : sectionlist
  sectionmap)
 :doc "Returns a list of all sections including subsections")

(func sectionlist-all<-chapterlist : sectionlist
 [chapterlist : chapterlist]
 (let : sectionlist
  [sections : sectionlist :=
   (sectionlist<-chapterlist
    chapterlist)]
  (sectionlist-all<-sectionlist
   sections))
 :doc "Returns a list of all sections including subsections")

(func sectionlist-all<-section : sectionlist
 [section : section]
 (let : sectionlist
  [subsections : sectionlist := (sectionlist<-section section)]
  (any<-list-start-reduce : sectionlist
   subsections
   (sectionlist section)
   (fn : sectionlist
    [total      : sectionlist
     subsection : section]
    (let : sectionlist
     [subsubsections : sectionlist :=
      (sectionlist-all<-section
       subsection)]
     (copy total
      subsubsections)))))
 :doc "Returns a list of all sections including subsections")

(func sectionlist-all<-sectionlist : sectionlist
 [sectionlist : sectionlist]
 (let : sectionlist
  [sectionlistlist : sectionlistlist :=
    (sectionlistlist<-sectionlist
     sectionlist)]
  (list<-list-join : sectionlist
   sectionlistlist))
 :test (test
        (sectionlist
         (section
          :name "a"
          :sectionmap
           (sectionmap
            "a1"
            (section
             :name "a1")))
         (section
          :name "a1")
         (section
          :name "b"
          :sectionmap
           (sectionmap
            "b1"
            (section
             :name "b1")))
         (section
          :name "b1"))
        (sectionlist-all<-sectionlist
         (sectionlist
          (section
           :name "a"
           :sectionmap
            (sectionmap
             "a1"
             (section
              :name "a1")))
          (section
           :name "b"
           :sectionmap
            (sectionmap
             "b1"
             (section
              :name "b1"))))))
 :doc "Returns a list of all sections including subsections")

(func sectionlistlist<-chapterlist : sectionlistlist
 [chapterlist : chapterlist]
 (list<-list : sectionlistlist
  chapterlist
  (fn : sectionlist
   [chapter : chapter]
   (sectionlist<-chapter
    chapter)))
 :doc "Returns a shallow sectionlistlist from a given chapterlist")

(func sectionlistlist<-sectionlist : sectionlistlist
 [sectionlist : sectionlist]
 (list<-list : sectionlistlist
  sectionlist
  (fn : sectionlist
   [section : section]
   (let : sectionlist
    [sublist : sectionlist :=
     (sectionlist<-section
      section)]
    (sectionlist
     section
     sublist))))
 :test (test
        (sectionlistlist
         (sectionlist
          (section
           :name "a"
           :sectionmap
            (sectionmap
             "a1"
             (section
              :name "a1")))
          (section
           :name "a1"))
         (sectionlist
          (section
           :name "b"
           :sectionmap
            (sectionmap
             "b1"
             (section
              :name "b1")))
          (section
           :name "b1")))
        (sectionlistlist<-sectionlist
         (sectionlist
          (section
           :name "a"
           :sectionmap
            (sectionmap
             "a1"
             (section
              :name "a1")))
          (section
           :name "b"
           :sectionmap
            (sectionmap
             "b1"
             (section
              :name "b1"))))))
 :doc "Returns a shallow sectionlistlist from a given sectionlist")

(func sectionmap<-sectionlist : sectionmap
 [sectionlist : sectionlist :...]
 (map<-list : sectionmap
  sectionlist
  (fn : section
   [section : section]
   (:name section)))
 :doc "Returns a sectionmap from a given sectionlist")

(func skill<-tactics-key : skill
 [tactics : tactics
  key : string]
 (let : skill
  [skillmap : skillmap := (:skillmap tactics)
   skill : skill := (any<-map skillmap key)
   logit : string :=
    (if : string
     (then (is-empty skill) (log key))
     (else key))]
  skill)
 :doc "Returns a skill from tactics")

(func skilllist<-section : skilllist
 [section : section]
 (let : skilllist
  [secname : string := (:name section)
   sec : section :=
    (copy section
     :name secname)
   skillmap : skillmap := (:skillmap section)]
  (skilllist<-skillmap
   skillmap))
 :doc "Returns a skilllist from a given section")

(func skilllist<-sectionlist : skilllist
 [sectionlist : sectionlist]
 (let : skilllist
  [skilllistlist : skilllistlist :=
   (skilllistlist<-sectionlist
    sectionlist)]
  (skilllist<-skilllistlist
   skilllistlist))
 :doc "Returns a skilllist from a given sectionlist")

(func skilllist<-skilllistlist : skilllist
 [skilllistlist : skilllistlist]
 (list<-list-join : skilllist
  skilllistlist)
 :doc "Returns a skilllist from a given skilllistlist")

(func skilllist<-skillmap : skilllist
 [skillmap : skillmap]
 (list<-map : skilllist
  skillmap)
 :doc "Returns a skilllist from a given skillmap")

(func skilllist<-tactics-keys : skilllist
 [tactics : tactics
  keys : stringlist :...]
 (let : skilllist
  [skilllist : skilllist :=
    (list<-list : skilllist
     keys
     (fn : skill
      [key : string]
      (skill<-tactics-key
       tactics key)))]
  skilllist)
 :doc "Return a skilllist from tactics and keys")

(func skilllistlist<-sectionlist : skilllistlist
 [sections : sectionlist]
 (list<-list : skilllistlist
  sections
  (fn : skilllist
   [section : section]
   (skilllist<-section
    section)))
 :doc "Returns a skilllistlist from a given sectionlist")

(func skillmap<-skilllist : skillmap
 [skilllist : skilllist :...]
 (map<-list : skillmap
  skilllist
  (fn : skill
   [skill : skill]
   (:name skill)))
 :doc "Returns a skillmap from a given skilllist")

(func skillmap<-tactics-keys : skillmap
 [tactics : tactics
  keys : stringlist :...]
 (let : skillmap
  [skilllist : skilllist :=
    (skilllist<-tactics-keys
     tactics keys)]
  (skillmap<-skilllist
   skilllist))
 :doc "Return a skillmap from tactics and keys")

(func specialty<-tactics-key : specialty
 [tactics : tactics
  key : string]
 (let : specialty
  [specialtymap : specialtymap := (:specialtymap tactics)
   specialty : specialty := (any<-map specialtymap key)
   logit : string :=
    (if : string
     (then (is-empty specialty) (log key))
     (else key))]
  specialty)
 :doc "Returns a specialty from tactics")

(func specialtylist<-tactics-keys : specialtylist
 [tactics : tactics
  keys : stringlist :...]
 (let : specialtylist
  [specialtylist : specialtylist :=
    (list<-list : specialtylist
     keys
     (fn : specialty
      [key : string]
      (specialty<-tactics-key
       tactics key)))]
  specialtylist)
 :doc "Return an specialtylist from keys and tactics")

(func specialtymap<-specialtylist : specialtymap
 [specialtylist : specialtylist :...]
 (map<-list : specialtymap
  specialtylist
  (fn : specialty
   [specialty : specialty]
   (:name specialty)))
 :doc "Returns a specialtymap from a given specialtylist")

(func specialtymap<-tactics-keys : specialtymap
 [tactics : tactics
  keys : stringlist :...]
 (let : specialtymap
  [specialtylist : specialtylist :=
    (specialtylist<-tactics-keys
     tactics keys)]
  (specialtymap<-specialtylist
   specialtylist))
 :doc "Return a specialtymap from keys and tactics")

(func tactics<-tactics-booklist : tactics
 [tactics  : tactics
  booklist : booklist]
 (let : tactics
  [bookmap : bookmap :=
    (bookmap<-booklist
     booklist)
   chapterlist : chapterlist :=
    (chapterlist<-booklist
     booklist)
   chaptermap : chaptermap :=
    (chaptermap<-chapterlist
     chapterlist)
   sectionlist : sectionlist :=
    (sectionlist-all<-chapterlist
     chapterlist)
   sectionmap : sectionmap :=
    (sectionmap<-sectionlist
     sectionlist)
   itemlist : itemlist :=
    (itemlist<-sectionlist
     sectionlist)
   itemmap : itemmap :=
    (itemmap<-itemlist
     itemlist)
   placelist : placelist :=
    (placelist<-sectionlist
     sectionlist)
   placemap : placemap :=
    (placemap<-placelist
     placelist)
   powerlist : powerlist :=
    (powerlist<-sectionlist
     sectionlist)
   powermap : powermap :=
    (powermap<-powerlist
     powerlist)
   skilllist : skilllist :=
    (skilllist<-sectionlist
     sectionlist)
   skillmap : skillmap :=
    (skillmap<-skilllist
     skilllist)
   abilitylist1 : abilitylist :=
    (abilitylist<-skilllist
     skilllist)
   abilitylist2 : abilitylist :=
    (abilitylist<-powerlist
     powerlist)
   abilitylist3 : abilitylist :=
    (abilitylist
     abilitylist1 abilitylist2)
   abilitymap : abilitymap :=
    (abilitymap<-abilitylist
     abilitylist3)
   unitlist : unitlist :=
    (unitlist<-sectionlist
     sectionlist)
   unitmap : unitmap :=
    (unitmap<-unitlist
     unitlist)
   tacticsbook : tactics :=
    (tactics
     :abilitymap  abilitymap
     :bookmap     bookmap
     :itemmap     itemmap
     :placemap    placemap
     :powermap    powermap
     :scenemap scenemap
     :skillmap    skillmap
     :unitmap     unitmap)]
  (tactics<-tactics-merge
   tactics
   tacticsbook))
 :doc "Return a ready tactics from a booklist.")

(func tactics<-tactics-merge : tactics
 [tactics : tactics
  merge   : tactics]
 (let : tactics
  [abilitymap1 : abilitymap := (:abilitymap tactics)
   abilitymap2 : abilitymap := (:abilitymap merge)
   abilitymap3 : abilitymap := (copy abilitymap1 abilitymap2)
   bookmap1 : bookmap := (:bookmap tactics)
   bookmap2 : bookmap := (:bookmap merge)
   bookmap3 : bookmap := (copy bookmap1 bookmap2)
   itemmap1 : itemmap := (:itemmap tactics)
   itemmap2 : itemmap := (:itemmap merge)
   itemmap3 : itemmap := (copy itemmap1 itemmap2)
   placemap1 : placemap := (:placemap tactics)
   placemap2 : placemap := (:placemap merge)
   placemap3 : placemap := (copy placemap1 placemap2)
   powermap1 : powermap := (:powermap tactics)
   powermap2 : powermap := (:powermap merge)
   powermap3 : powermap := (copy powermap1 powermap2)
   rulemap1 : rulemap := (:rulemap tactics)
   rulemap2 : rulemap := (:rulemap merge)
   rulemap3 : rulemap := (copy rulemap1 rulemap2)
   scenemap1 : scenemap := (:scenemap tactics)
   scenemap2 : scenemap := (:scenemap merge)
   scenemap3 : scenemap := (copy scenemap1 scenemap2)
   skillmap1 : skillmap := (:skillmap tactics)
   skillmap2 : skillmap := (:skillmap merge)
   skillmap3 : skillmap := (copy skillmap1 skillmap2)
   unitmap1 : unitmap := (:unitmap tactics)
   unitmap2 : unitmap := (:unitmap merge)
   unitmap3 : unitmap := (copy unitmap1 unitmap2)]
  (tactics
   :abilitymap abilitymap3
   :bookmap    bookmap3
   :itemmap    itemmap3
   :placemap   placemap3
   :powermap   powermap3
   :rulemap    rulemap3
   :scenemap   scenemap3
   :skillmap   skillmap3
   :unitmap    unitmap3))
 :doc "Returns a tactics with all maps merged with merge.")

(func unit<-tactics-key : unit
 [tactics : tactics
  key     : string]
 (let : unit
  [unitmap : unitmap :=
    (:unitmap tactics)
   unit : unit :=
    (any<-map unitmap key)
   logit : string :=
    (if : string
     (then (is-empty unit) (log key))
     (else key))]
  unit)
 :doc "Returns a unit from tactics")

(func unitability<-tactics-key : unitability
 [tactics : tactics
  key     : string]
 (let : unitability
  [ability : ability :=
    (ability<-tactics-key tactics key)]
  (unitability
   :ability ability))
 :doc "Returns a unitability from tactics and ability key")

(func unitabilitylist<-tactics-keys : unitabilitylist
 [tactics : tactics
  keys    : stringlist :...]
 (let : unitabilitylist
  [abilitylist : abilitylist :=
    (abilitylist<-tactics-keys tactics keys)]
  (list<-list : unitabilitylist
   abilitylist
   (fn : unitability
    [ability : ability]
    (unitability
     :ability ability))))
 :doc "Returns a unitability from tactics and ability keys")

(func unitabilitymap<-tactics-keys : unitabilitymap
 [tactics : tactics
  keys    : stringlist :...]
 (let : unitabilitymap
  [unitabilitylist : unitabilitylist :=
    (unitabilitylist<-tactics-keys tactics keys)]
  (unitabilitymap<-unitabilitylist unitabilitylist))
 :doc "Returns a unitabilitymap from tactics and keys")

(func unitabilitymap<-unitabilitylist : unitabilitymap
 [unitabilitylist : unitabilitylist :...]
 (map<-list : unitabilitymap
  unitabilitylist
  (fn : string
   [unitability : unitability]
   (let : string
    [ability : ability := (:ability unitability)
     name : string :=
      (if : string
       (is-empty ability)
       (:name unitability)
       (:name ability))]
   name)))
 :doc "Returns a unitabilitymap from a unitabilitylist")

(func unititemmap<-unititemlist : unititemmap
 [unititemlist : unititemlist :...]
 (map<-list : unititemmap
  unititemlist
  (fn : string
   [unititem : unititem]
   (let : string
    [item : item := (:item unititem)
     name : string := (:name item)]
   name)))
 :doc "Returns a unititemmap from a unititemlist")

(func unitlist<-section : unitlist
 [section : section]
 (let : unitlist
  [secname : string := (:name section)
   sec : section :=
    (copy section
     :name secname)
   unitmap : unitmap := (:unitmap section)]
  (unitlist<-unitmap
   unitmap))
 :doc "Returns a unitlist from a given unitlistlist")

(func unitlist<-sectionlist : unitlist
 [sectionlist : sectionlist]
 (let : unitlist
  [unitlistlist : unitlistlist :=
   (unitlistlist<-sectionlist
    sectionlist)]
  (unitlist<-unitlistlist
   unitlistlist))
 :doc "Returns a unitlist from a given sectionlist")

(func unitlist<-tactics-keys : unitlist
 [tactics : tactics
  keys : stringlist :...]
 (let : unitlist
  [unitmap : unitmap :=
    (:unitmap tactics)
   map2 : unitmap :=
    (coll/map<-map-keys
     unitmap
     keys)
   unitlist : unitlist :=
    (list<-map : unitlist
     map2)]
  (log-error unitlist))
 :doc "Return an unitlist from keys and tactics")

(func unitlist<-unitlistlist : unitlist
 [unitlistlist : unitlistlist]
 (list<-list-join : unitlist
  unitlistlist)
 :doc "Returns a unitlist from a given unitlistlist")

(func unitlist<-unitmap : unitlist
 [unitmap : unitmap]
 (list<-map : unitlist
  unitmap)
 :doc "Returns a unitlist from a given unitmap")

(func unitlistlist<-sectionlist : unitlistlist
 [sections : sectionlist]
 (list<-list : unitlistlist
  sections
  (fn : unitlist
   [section : section]
   (unitlist<-section
    section)))
 :doc "Returns a unitlistlist from a given sectionlist")

(func unitmap<-tactics-keys : unitmap
 [tactics : tactics
  keys    : stringlist :...]
 (let : unitmap
  [unitlist : unitlist :=
    (unitlist<-tactics-keys tactics keys)]
  (unitmap<-unitlist unitlist))
 :doc "Returns a unitmap from tactics and keys")

(func unitmap<-unitlist : unitmap
 [unitlist : unitlist :...]
 (map<-list : unitmap
  unitlist
  (fn : unit
   [unit : unit]
   (:name unit)))
 :doc "Returns a unitmap from a given unitlist")

(func unitpowermap<-unitpowerlist : unitpowermap
 [unitpowerlist : unitpowerlist :...]
 (map<-list : unitpowermap
  unitpowerlist
  (fn : string
   [unitpower : unitpower]
   (let : string
    [power : power := (:power unitpower)
     name : string := (:name power)]
   name)))
 :doc "Returns a unitpowermap from a unitpowerlist")

(func unitpower<-tactics-key-lvl-abilities : unitpower
 [tactics   : tactics
  key       : string
  level     : int
  abilities : stringlist]
 (unitpower<-tactics-key-lvl-abilities-items
  tactics key level abilities (empty stringlist)))

(func unitpower<-tactics-key-lvl-abilities-items : unitpower
 [tactics   : tactics
  key       : string
  level     : int
  abilities : stringlist
  items     : stringlist]
 (let : unitpower
  [power : power :=
    (power<-tactics-key tactics key)
   abilitylist : abilitylist :=
    (abilitylist<-tactics-keys tactics abilities)
   unitabilitylist : unitabilitylist :=
    (list<-list : unitabilitylist
     abilitylist
     (fn : unitability
      [ability : ability]
      (unitability
       :ability ability)))
   unitabilitymap : unitabilitymap :=
    (unitabilitymap<-unitabilitylist unitabilitylist)
   itemlist : itemlist :=
    (itemlist<-tactics-keys tactics items)
   unititemlist : unititemlist :=
    (list<-list : unititemlist
     itemlist
     (fn : unititem
      [item : item]
      (unititem
       :item item)))
   unititemmap : unititemmap :=
    (unititemmap<-unititemlist unititemlist)]
  (unitpower
   :power power
   :level level
   :unitabilitymap unitabilitymap
   :unititemmap unititemmap))
 :doc "Returns a unitpower from tactics, skill key, level, ability keys, and item keys")

(func unitskill<-tactics-key-lvl-abilities : unitskill
 [tactics   : tactics
  key       : string
  level     : int
  abilities : stringlist]
 (unitskill<-tactics-key-lvl-abilities-items
  tactics key level abilities (empty stringlist)))

(func unitskill<-tactics-key-lvl-abilities-items : unitskill
 [tactics   : tactics
  key       : string
  level     : int
  abilities : stringlist
  items     : stringlist]
 (let : unitskill
  [skill : skill :=
    (skill<-tactics-key tactics key)
   abilitylist : abilitylist :=
    (abilitylist<-tactics-keys tactics abilities)
   unitabilitylist : unitabilitylist :=
    (list<-list : unitabilitylist
     abilitylist
     (fn : unitability
      [ability : ability]
      (unitability
       :ability ability)))
   unitabilitymap : unitabilitymap :=
    (unitabilitymap<-unitabilitylist unitabilitylist)
   itemlist : itemlist :=
    (itemlist<-tactics-keys tactics items)
   unititemlist : unititemlist :=
    (list<-list : unititemlist
     itemlist
     (fn : unititem
      [item : item]
      (unititem
       :item item)))
   unititemmap : unititemmap :=
    (unititemmap<-unititemlist unititemlist)]
  (unitskill
   :skill skill
   :level level
   :unitabilitymap unitabilitymap
   :unititemmap unititemmap))
 :doc "Returns a unitskill from tactics, skill key, level, ability keys, and item keys")

(func unitskill<-tactics-key-lvl-items : unitskill
 [tactics   : tactics
  key       : string
  level     : int
  items     : stringlist]
 (unitskill<-tactics-key-lvl-abilities-items
  tactics key level (empty stringlist) items))

(func unitskillmap<-unitskilllist : unitskillmap
 [unitskilllist : unitskilllist :...]
 (map<-list : unitskillmap
  unitskilllist
  (fn : string
   [unitskill : unitskill]
   (let : string
    [skill : skill := (:skill unitskill)
     name : string := (:name skill)]
   name)))
 :doc "Returns a unitskillmap from a unitskilllist")

(func weaknessmap<-weaknesslist : weaknessmap
 [weaknesslist : weaknesslist :...]
 (map<-list : weaknessmap
  weaknesslist
  (fn : weakness
   [weakness : weakness]
   (:name weakness)))
 :doc "Returns a weaknessmap from a given weaknesslist")
