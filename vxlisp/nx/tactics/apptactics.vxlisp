(package nx/tactics/apptactics
 :libs (lib base   :path nx/tactics/base)
       (lib bl     :path nx/tactics/books/bookloader)
       (lib fil    :path vx/data/file)
       (lib xml    :path vx/data/xml)
       (lib adv    :path nx/tactics/books/advanced_rules)
       (lib ui     :path vx/ui/ui)
       (lib uihtml :path vx/ui/html/uihtml)
       (lib uitx   :path nx/tactics/uitactics)
 :doc "Main App for NxTactics")

(func string-render-html : string
 (let
  [uiapp  : ui/ui := (ui-app)
   uihtml : ui/ui := (uihtml/ui-renderer<-ui
                      uiapp)
   uirend : ui/ui := (ui/ui-render<-ui
                      uihtml)]
  "")
 :doc "")

(func main-nx : string
 [args : anylist :...]
 (string-render-html)
 :context
 :doc "The default function for app main execution. Arguments come from the command line.")


/*

(func main-nx : string
 [args : anylist :...]
 (let
  [booklist : base/booklist := (base/booklist
                                (adv/tacticsbook))
   tactics  : base/tactics  := (base/tactics<-booklist
                                booklist)
   ui       : ui/ui         := (uitx/ui-app<-tactics
                                tactics)
   render   : ui/render     := (ui/render<-ui
                                ui)]
  "")
 :context
 :doc "The default function for app main execution. Arguments come from the command line.")

(func main-nx : string
 [args : anylist :...]
 (let
  [booknames : stringlist := (stringlist
                              "TACTICSBOOK_CORE"
                              "TACTICSBOOK_ADVANCED"
                              "TACTICSBOOK_ANCIENT"
                              "TACTICSBOOK_AOSAIL"
                              "TACTICSBOOK_AOSTEAM"
                              "TACTICSBOOK_BESTIARY"
                              "TACTICSBOOK_CHARS"
                              "TACTICSBOOK_COMBAT"
                              "TACTICSBOOK_FANTASY"
                              "TACTICSBOOK_GEAR"
                              "TACTICSBOOK_GIANT"
                              "TACTICSBOOK_HIGHTECH"
                              "TACTICSBOOK_HORROR"
                              "TACTICSBOOK_LANDSEA"
                              "TACTICSBOOK_MAGIC"
                              "TACTICSBOOK_MEDIEVAL"
                              "TACTICSBOOK_MFANTASY"
                              "TACTICSBOOK_MODERN"
                              "TACTICSBOOK_POWERS"
                              "TACTICSBOOK_PREHISTORY"
                              "TACTICSBOOK_PULP"
                              "TACTICSBOOK_SCIFI"
                              "TACTICSBOOK_SKILLS"
                              "TACTICSBOOK_SPACE"
                              "TACTICSBOOK_SUPER"
                              "TACTICSBOOK_WORLDWARS"
                             )
   done     : boolean    := (bl/boolean-write<-booknames
                             booknames)]
  (string<-any done))
 :context
 :doc "The default function for app main execution. Arguments come from the command line.")

(func main-nx : string
 [args : anylist :...]
 (let
  [book : base/book := (bl/book-read<-bookname
                        "TACTICSBOOK_WORLDWARS")
   done : boolean   := (bl/boolean-write<-book
                        book)]
  (string<-any done))
 :context
 :doc "The default function for app main execution. Arguments come from the command line.")

(func main-nx : string
 [args : anylist :...]
 (let
  [book : base/book := (bl/book-read<-bookname
                        "TACTICSBOOK_CORE")]
  (string<-any book))
 :context
 :doc "The default function for app main execution. Arguments come from the command line.")

(func main-nx : string
 [args : anylist :...]
 (let
  [xml : xml/xml := (bl/xml-read<-bookname
                     "TACTICSBOOK_WORLDWARS")]
 (string<-any xml))
 :context
 :doc "The default function for app main execution. Arguments come from the command line.")

(func main-nx : string
 [args : anylist :...]
 (bl/string-read<-bookname
  "TACTICSBOOK_WORLDWARS")
 :context
 :doc "The default function for app main execution. Arguments come from the command line.")

*/

(func context-nx : context
 [args : anylist :...]
 (context
  :session
   (session
    :user
     (user
      :security (security-nx))))
 :doc "Returns the context for execution. Arguments come from the command line.")

(func security-nx : security
 (security
  :allowfuncs
   (funclist
    fil/boolean-write<-file-any
    fil/boolean-write<-file-string
    fil/file-read<-file
    fil/string-read<-file))
 :doc "Returns the security for execution.")
