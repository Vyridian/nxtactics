(package nx/tactics/decks/deck
 :libs (lib base             :path nx/tactics/base)
       (lib damage           :path nx/tactics/decks/damage)
       (lib fate             :path nx/tactics/decks/fate)
       (lib scenario         :path nx/tactics/decks/scenario)
       (lib starter          :path nx/tactics/decks/starter)
       (lib tarot            :path nx/tactics/decks/tarot)
       (lib advanced_rules   :path nx/tactics/books/advanced_rules)
       (lib age_of_sail      :path nx/tactics/books/age_of_sail)
       (lib age_of_steam     :path nx/tactics/books/age_of_steam)
       (lib bestiary         :path nx/tactics/books/bestiary)
       (lib characters       :path nx/tactics/books/characters)
       (lib combat           :path nx/tactics/books/combat)
       (lib core_rules       :path nx/tactics/books/core_rules)
       (lib fantasy          :path nx/tactics/books/fantasy)
       (lib gear             :path nx/tactics/books/gear)
       (lib giant_monsters   :path nx/tactics/books/giant_monsters)
       (lib high_technology  :path nx/tactics/books/high_technology)
       (lib horror           :path nx/tactics/books/horror)
       (lib land_sea_and_air :path nx/tactics/books/land_sea_and_air)
       (lib magic            :path nx/tactics/books/magic)
       (lib medieval         :path nx/tactics/books/medieval)
       (lib modern           :path nx/tactics/books/modern)
       (lib modern_fantasy   :path nx/tactics/books/modern_fantasy)
       (lib powers           :path nx/tactics/books/powers)
       (lib prehistory       :path nx/tactics/books/prehistory)
       (lib pulp_fiction     :path nx/tactics/books/pulp_fiction)
       (lib science_fiction  :path nx/tactics/books/science_fiction)
       (lib skills           :path nx/tactics/books/skills)
       (lib space_and_time   :path nx/tactics/books/space_and_time)
       (lib superheroes      :path nx/tactics/books/superheroes)
       (lib world_wars       :path nx/tactics/books/world_wars)
 :doc  "Tactics Decks")

(const tactics-all : base/tactics
 (let : base/tactics
  [booklist : base/booklist := (booklist-all)]
  (base/tactics<-booklist
   booklist))
 :doc "All tactics cards")

(func booklist-all : base/booklist
 (base/booklist
  (core_rules/tacticsbook)
  (combat/tacticsbook)
  (skills/tacticsbook)
  (magic/tacticsbook)
  (powers/tacticsbook)
  (gear/tacticsbook)
  (advanced_rules/tacticsbook)
  (characters/tacticsbook)
  (bestiary/tacticsbook)
  (land_sea_and_air/tacticsbook)
  (fantasy/tacticsbook)
  (giant_monsters/tacticsbook)
  (prehistory/tacticsbook)
  (medieval/tacticsbook)
  (age_of_sail/tacticsbook)
  (age_of_steam/tacticsbook)
  (pulp_fiction/tacticsbook)
  (world_wars/tacticsbook)
  (horror/tacticsbook)
  (modern/tacticsbook)
  (modern_fantasy/tacticsbook)
  (superheroes/tacticsbook)
  (high_technology/tacticsbook)
  (science_fiction/tacticsbook)
  (space_and_time/tacticsbook))
 :doc "All books")

(func deck-home : base/deck
 (base/deck
  :name "Home"
  :cardmap
   (base/cardmap<-cardlist
    (base/cardlist
     (deck-books)
     (deck-setup)
     (deck-scenarios)
     (deck-encounters)
     (deck-places)
     (deck-units)
     (deck-items)
     (deck-skills)
     (deck-powers)))))

(func deck-books : base/deck
 (base/deck
  :name "Books"
  :cardmap
   (base/cardmap<-bookmap
    (:bookmap tactics-all)))
 :doc "Deck of books")

(func deck-encounters : base/deck
 (base/deck
  :name "Encounters"))

(func deck-items : base/deck
 (base/deck
  :name "Items"))

(func deck-places : base/deck
 (base/deck
  :name "Places"))

(func deck-powers : base/deck
 (base/deck
  :name "Powers"))

(func deck-setup : base/deck
 (base/deck
  :name "Setup"
  :cardmap
   (base/cardmap<-cardlist
    (base/cardlist
     (starter/deck-player)
     (tarot/deck-tarot)
     (fate/deck-fate)
     (damage/deck-damage)
     (damage/deck-damageback)
     (damage/deck-disorder)
     (damage/deck-disorderback)
     (damage/deck-trauma)
     (damage/deck-traumaback)
     (damage/deck-slow)
     (damage/deck-bleeding)
     (damage/deck-bloodloss)
     (starter/deck-player-blue)
     (starter/deck-player-green)
     (starter/deck-player-red)
     (starter/deck-player-yellow)
     (fate/deck-fate-blue)
     (fate/deck-fate-green)
     (fate/deck-fate-red)
     (fate/deck-fate-yellow))))
 :doc "Setup Deck")

(func deck-scenarios : base/deck
 (base/deck
  :name "Scenarios"
  :cardmap
   (base/cardmap<-cardlist
    (base/cardlist
     (scenario/deck-murintrail)))))

(func deck-skills : base/deck
 (let : base/deck
  [skillmap : base/skillmap := (:skillmap tactics-all)
   cardmap  : base/cardmap  := (map<-map : base/cardmap
                                skillmap)]
  (base/deck
   :name "Skills"
   :cardmap cardmap))
 :doc "Skills Deck")

(func deck-units : base/deck
 (base/deck
  :name "Units"))
