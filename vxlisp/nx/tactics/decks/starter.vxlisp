(package nx/tactics/decks/starter
 :libs (lib base :path nx/tactics/base)
       (lib typ  :path vx/type)
 :doc  "Tactics Starter Decks")

(func card-action-combat : base/card
 (base/card
  :id "action-combat"
  :name "Action: Combat"
  :summary
   "* Target a unit with a damaging Skill/Power.
    * Each player chooses a Fate card from their hand or a random Fate from Shared Fate.
    * Fate Cards are compared like Rock/Paper/Scissors.
    * Combat Speed: Defend/Evade/Counter > Attack > Focus > Defend/Evade/Counter
    * If both play Attack or Focus then compare by rank (lower is faster).
    * Order: AJQK2-10
    * If Tied, there is no result.
    * If one player Wins, then resolve their result and apply Damage. If the target wins, they do no Damage unless they spend an Action.
    * Discard all card used (except Keep)"))

(func card-action-move : base/card
 (base/card
  :id "action-move"
  :name "Action: Move"
  :summary
   "* Action: Move up to half (rounded down) of your [Move] stat.
    * Facing: During your Move, change your facing up to 2 times the entire Turn.
    * Full Speed (2 Actions): Move your full [Move] stat.
    * Sprint (2 Actions): If you moved at Full Speed last turn, Move 1.5x your [Move] stat.
    * Leftover Move: After moving, if there is an adjacent space that you cannot afford to enter and you have partial Move left, you may take note of it and carry it over to subsequent turns."))

(func card-action-recover : base/card
 (base/card
  :id "action-recover"
  :name "Action: Recover"
  :summary
   "* Action: Discard a [Fatigue], [Stun], [Stress], or [Slow]
    * Double Action: Discard a [Bleeding]"))

(func card-action-skill : base/card
 (base/card
  :id "action-skill"
  :name "Action: Skill"
  :summary
   "* Action: "))

(func card-characterguide : base/card
 (base/card
  :id "characterguide"
  :name "Character Guide"))

(func card-damageguide : base/card
 (base/card
  :id "damageguide"
  :name "Damage Guide"
  :summary
   "* Damage Types: Determine the [Damage Types] of the weapon.
    * Reveal Damage: Reveal cards equal to [Hits].
    * Separate Damage: Separate them into 2 piles: Those that match the [Damage Types] (Damage) and those that don't (Fatigue).
    * Hit Location: The top card from the matching pile is the Hit Location (or the mismatch pile if no matches). Move it aside and flip the Fatigue pile to its facedown side.
    * Armor: Check [Armor] in the [Hit Location] and then the target reduces the Damage or Fatigue for each point of armor. The Hit Location can only be removed last.
    * Fatigue: The target may take the Fatigue cards as long they have Body. Any remaining Fatigue are flipped faceup and added to the Damage pile.
    * Damage: Count the Damage pile and apply the effect on the Hit Location card to the target.
    * Cleanup: Discard other cards. Shuffle if a Wild was revealed."))

(func card-fatelower : base/card
 (base/card
  :id "fatelower"
  :name "Fate: Inverted"
  :image "images/card-fate-lower.svg"
  :summary
   "Fate: Play this when playing a Fate card to indicate that the lower choice on the Fate is being used (i.e. the side facing toward you)."))

(func card-fateupper : base/card
 (base/card
  :id "fateupper"
  :name "Fate: Dignified"
  :image "images/card-fate-upper.svg"
  :summary
   "Fate: Play this when playing a Fate card to indicate that the upper choice on the Fate is being used (i.e. the side facing away from you)."))

(func card-free-action : base/card
 (base/card
  :id "free-action"
  :name "Free Action"
  :summary
   "* Move Out: Take a [Fatigue] to [Move]:1.
    * Push Your Luck: Take a [Stun] to reduce a Double Action to an Action.
    * Grit Your Teeth: Take a [Stress] to ignore the effect of all of your negative statuses this turn.
    * Final Sprint: Take a [Slow] to [Move].
    * Opportunity Fight: If a Target moves through 2 spaces adjacent to a Unit, that Unit may spend a [Stun] to take a free [Action: Fight]."))

(func card-gameguide : base/card
 (base/card
  :id "gameguide"
  :name "Game Guide"
  :summary
   "* Create [Characters] or [Factions] to play [Scenarios].
    * Each [Scenario] contains various [Threats] and [Goals]
    * Find them and use your [Skills] / [Powers] to complete them for [Rewards]
    * Some [Rewards] are items, others are Skill Points or Ability Points that allow you to increase the level of your [Skills], [Powers], [Abilities], or [Specialties]."))

(func card-levelingguide : base/card
 (base/card
  :id "levelingguide"
  :name "Leveling Guide"
  :summary
   "* Major Achievement: Completion gains a Skill Point.
    * Minor Achievement: Completing gains an Ability Point.
    * Skill Points: May be exchanged for a Level 1 Skill or a new Level 1 Power.
    * Ability Points: May be exchanged for an Ability, Specialty, or a Power Level increase."))

(func card-mapscale-1 : base/card
 (base/card
  :id (string "card-mapscale-1")
  :name "Map Scale:1"
  :summary
   "* Human Scale
    * Turn Length: 2sec
    * Note: Humans (max speed 3x1 = 30kph) walk at 6kph or 1.6m/s. This makes a 2sec turn 3 spaces."))

(func card-player-blue : base/card
 [num : int]
 (base/card
  :id (string "card-player-blue-" num)
  :name "Player"
  :image "images/card-blue.svg"))

(func card-player-green : base/card
 [num : int]
 (base/card
  :id (string "card-player-green-" num)
  :name "Player"
  :image "images/card-green.svg"))

(func card-player-red : base/card
 [num : int]
 (base/card
  :id (string "card-player-red-" num)
  :name "Player"
  :image "images/card-red.svg"))

(func card-player-yellow : base/card
 [num : int]
 (base/card
  :id (string "card-player-yellow-" num)
  :name "Player"
  :image "images/card-yellow.svg"))

(func card-scale : base/card
 (base/card
  :id (string "card-scale")
  :name "Scale"
  :summary
   "* Each stat/skill/power has a number after the letter 'x'.
    * This is the scale of that ability.
    * The number represents the number of zeroes. E.g. 5x3 translates to 5000.
    * x1 denotes human scale. E.g. 1x1=10kg, 10iq+50, 10will, 10kph"))

(func card-setupguide : base/card
 (base/card
  :id "setupguide"
  :name "Setup Guide"
  :summary
   "* Choose a Scenario and sort it in numerical order.
    * Each [Player] chooses or creates the [Units] they will use.
    * Each [Player] chooses a colored Starter Deck.
    * Player [Turn Order] cards are shuffled together to create a [Turn Order] deck.
    * Reveal the top card in the Scenario deck and follow its instructions."))

(func card-turn-order : base/card
 (base/card
  :id "turn-order"
  :name "Turn: Order"
  :summary
   "* Reveal: Flip each card of [Turn Order] deck to form a row. This is the [Player] order this turn.
    * Activate: In order, each [Player] chooses a Unit to activate.
    * Action1: Each [Player] chooses an Action to take. If applicable, they also announce target(s).
    * Resolve1: If a player was the target of an Action, they must wait for the action to resolve. Otherwise, each player performs their [Player: Action] simultaneously. Note: lower order Units cannot be blocked by the movement of higher order Units.
    * Action2: Same as Action1 above.
    * Resolve2: Same as Resolve1 above."))

(func card-turn-order : base/card
 (base/card
  :id "turn-order"
  :name "Turn Order"))

(func card-turn-player : base/card
 (base/card
  :id "turn-player"
  :name "Turn: Player"))

(func card-unit-blue : base/card
 [num : int]
 (base/card
  :id (string "unit-" num)
  :name (string "Unit " num)
  :image "images/card-blue.svg"))

(func card-unit-green : base/card
 [num : int]
 (base/card
  :id (string "unit-" num)
  :name (string "Unit " num)
  :image "images/card-green.svg"))

(func card-unit-red : base/card
 [num : int]
 (base/card
  :id (string "unit-" num)
  :name (string "Unit " num)
  :image "images/card-red.svg"))

(func card-unit-yellow : base/card
 [num : int]
 (base/card
  :id (string "unit-" num)
  :name (string "Unit " num)
  :image "images/card-yellow.svg"))

(func deck-player : base/deck
 (let : base/deck
  [cardlist : base/cardlist :=
    (base/cardlist
     (card-gameguide)
     (card-setupguide)
     (card-turn-order)
     (card-turn-player)
     (card-action-move)
     (card-action-combat)
     (card-damageguide)
     (card-action-skill)
     (card-action-recover)
     (card-free-action)
     (card-characterguide)
     (card-levelingguide)
     (card-turn-order)
     (card-scale)
     (card-mapscale-1)
     (card-fateupper)
     (card-fatelower))
   cardmap : base/cardmap :=
    (base/cardmap<-cardlist
     cardlist)]
  (base/deck
   :id "player"
   :name "Player"
   :cardmap cardmap)))

(func deck-player-blue : base/deck
 (let : base/deck
  [cardlist : base/cardlist :=
   (base/cardlist
    (card-player-blue 1)
    (card-player-blue 2)
    (card-player-blue 3)
    (card-player-blue 4)
    (card-player-blue 5)
    (card-unit-blue 1)
    (card-unit-blue 2)
    (card-unit-blue 3)
    (card-unit-blue 4))
   cardmap : base/cardmap :=
    (base/cardmap<-cardlist
     cardlist)]
  (base/deck
   :id "player-blue"
   :name "Player Blue"
   :cardmap cardmap)))

(func deck-player-green : base/deck
 (let : base/deck
  [cardlist : base/cardlist :=
   (base/cardlist
    (card-player-green 1)
    (card-player-green 2)
    (card-player-green 3)
    (card-player-green 4)
    (card-player-green 5)
    (card-unit-green 1)
    (card-unit-green 2)
    (card-unit-green 3)
    (card-unit-green 4))
   cardmap : base/cardmap :=
    (base/cardmap<-cardlist
     cardlist)]
  (base/deck
   :id "player-green"
   :name "Player Green"
   :cardmap cardmap)))

(func deck-player-red : base/deck
 (let : base/deck
  [cardlist : base/cardlist :=
   (base/cardlist
    (card-player-red 1)
    (card-player-red 2)
    (card-player-red 3)
    (card-player-red 4)
    (card-player-red 5)
    (card-unit-red 1)
    (card-unit-red 2)
    (card-unit-red 3)
    (card-unit-red 4))
   cardmap : base/cardmap :=
    (base/cardmap<-cardlist
     cardlist)]
  (base/deck
   :id "player-red"
   :name "Player Red"
   :cardmap cardmap)))

(func deck-player-yellow : base/deck
 (let : base/deck
  [cardlist : base/cardlist :=
   (base/cardlist
    (card-player-yellow 1)
    (card-player-yellow 2)
    (card-player-yellow 3)
    (card-player-yellow 4)
    (card-player-yellow 5)
    (card-unit-yellow 1)
    (card-unit-yellow 2)
    (card-unit-yellow 3)
    (card-unit-yellow 4))
   cardmap : base/cardmap :=
    (base/cardmap<-cardlist
     cardlist)]
  (base/deck
   :id "player-yellow"
   :name "Player Yellow"
   :cardmap cardmap)))
