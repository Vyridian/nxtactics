(package nx/tactics/decks/starter
 :libs (lib base :path nx/tactics/base)
       (lib typ  :path vx/type)
 :doc  "Tactics Starter Decks")

(func card-fatelower : base/card
 (base/card
  :id "fatelower"
  :name "Fate: Inverted"
  :image "images/card-fate-lower.svg"
  :summary
   "Fate: Play this when playing a Fate card to indicate that the lower choice on the Fate is being used (i.e. the side facing toward you)."))

(func card-fateupper : base/card
 (base/card
  :id "fateupper"
  :name "Fate: Dignified"
  :image "images/card-fate-upper.svg"
  :summary
   "Fate: Play this when playing a Fate card to indicate that the upper choice on the Fate is being used (i.e. the side facing away from you)."))

(func card-player : base/card
 [color : string
  num : int]
 (base/card
  :id (string "card-player-" color "-" num)
  :name "Player"
  :image (string "images/card-" color ".svg")))

(func card-skill : base/card
 [color : string
  num : int]
 (base/card
  :id (string "card-skill-" color "-" num)
  :name (string "Skill#" num)
  :image (string "images/card-" color ".svg")))

(func card-turn-order : base/card
 [color : string
  num   : int]
 (base/card
  :id    (string "turn-order-" num)
  :name  (string "Turn Order: Unit#" num)
  :image (string "images/card-" color ".svg")
  :summary
   "* Reveal: Flip each card of [Turn Order] deck to form a row. This is the [Player] order this turn.
    * Action1: Each [Player] chooses a Unit to activate along with their first [Action] and target(s).
    * Change1: In order, each [Player] may change their decision.
    * Resolve1: If a player was the target of an Action, they must wait for that action to resolve. Otherwise, all players performs their Action simultaneously. Note: lower order Units cannot be blocked by the movement of higher order Units.
    * Action2: Each [Player] chooses their second [Action] and targets.
    * Change2: Same as Change1.
    * Resolve2: Same as Resolve1."))

(func card-turn-player : base/card
 [color : string]
 (base/card
  :id (string "turn-player-" color)
  :name "Turn: Player"))

(func card-unit : base/card
 [color : string
  num   : int]
 (base/card
  :id (string "unit-" color "-" num)
  :name (string "Unit#" num)
  :image (string "images/card-" color ".svg")))

(func deck-player : base/deck
 [color : string]
 (let : base/deck
  [cardlist : base/cardlist :=
    (base/cardlist
     (card-player color 1)
     (card-turn-order color 1)
     (card-turn-order color 2)
     (card-turn-order color 3)
     (card-turn-order color 4)
     (card-turn-order color 5)
     (card-unit color 1)
     (card-unit color 2)
     (card-unit color 3)
     (card-unit color 4)
     (card-unit color 5)
     (card-skill color 1)
     (card-skill color 2)
     (card-skill color 3)
     (card-skill color 4)
     (card-skill color 5))
   cardmap : base/cardmap :=
    (base/cardmap<-cardlist
     cardlist)]
  (base/deck
   :id (string "deck-player-" color)
   :name "Player Deck"
   :image (string "images/card-" color ".svg")
   :cardmap cardmap)))
