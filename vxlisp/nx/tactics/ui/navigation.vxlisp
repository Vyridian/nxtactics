(package nx/tactics/ui/navigation
 :libs (lib base   :path nx/tactics/base)
       (lib event  :path vx/event)
       (lib styles :path nx/tactics/ui/stylesheet)
       (lib ui     :path vx/ui/ui)
 :doc "Tactics UI")

(const event-navbutton-click : event/event
 (copy event/event-click
  :event<-event event-navbutton-click<-event))

(func event-navbutton-click<-event : event/event
 [event : event/event]
 (let : event/event
  [target : ui := (ui/ui-from<-event event)
   uid : string := (:uid target)
   isback : boolean := (= uid "app/navbar/Back")
   isnav : boolean :=
    (if : boolean
     (then isback
      (boolean-navigate-back))
     (else
      (boolean-navigate<-navid
       uid)))]
  event)
 :context
 :doc "Event handler for card clicks")

(const eventmap-navbutton : event/eventmap
 (event/eventmap<-eventlist
  (event/eventlist
   event-navbutton-click))
 :doc "Eventmap for navbutton")

(func boolean-layouttitlebar<-string : boolean
 [text : string]
 (let : boolean
  [titlebar : ui :=
    (ui-readstate-titlebar)
   title : ui/ui :=
    (ui/ui-child<-ui-uid
     titlebar "app/titlebar/title")
   title2 : ui/ui :=
    (copy title
     :data text)
   title3 : ui/ui :=
    (ui-layout<-ui-orig-parent
     title2 title titlebar)]
  true)
 :context
 :sideeffects "Alters uititlebar"
 :doc "Returns true of titlebar updated with give card.")

(func boolean-navigate<-navid : boolean
 [navid : string]
 (let : boolean
  [navbar : ui/ui := (ui-readstate-navbar)
   inavselect : int :=
    (ui/int-child<-ui-uid
     navbar navid)]
  (boolean-navigate<-select
   (-1 inavselect)))
 :context
 :sideeffects "Alters uinavbar and uimain"
 :doc "Navigate to the named navid.")

(func boolean-navigate<-select : boolean
 [iselect : int]
 (let : boolean
  [main : ui/ui := (ui-readstate-main)
   ideselect : int :=
    (ui/int-visible<-ui
     main)
   ischange : boolean :=
    (!= iselect ideselect)]
  (if : boolean
   (then ischange
    (let : boolean
     [navbar : ui/ui := (ui-readstate-navbar)
      navdeselect : ui/ui :=
       (ui/ui-child<-ui-pos navbar (+1 ideselect))
      isnavdeselect : boolean :=
       (ui/boolean-layout<-ui-parent-selected
        navdeselect navbar false)
      navselect : ui/ui :=
       (ui/ui-child<-ui-pos navbar (+1 iselect))
      isnavselect : boolean :=
       (ui/boolean-layout<-ui-parent-selected
        navselect navbar true)
      maindeselect : ui/ui :=
       (ui/ui-child<-ui-pos main ideselect)
      ismaindeselect : boolean :=
       (ui/boolean-layout<-ui-parent-visible
        maindeselect main false)
      mainselect : ui/ui :=
       (ui/ui-child<-ui-pos main iselect)
      ismainselect : boolean :=
       (ui/boolean-layout<-ui-parent-visible
        mainselect main true)
      data : any := (:data mainselect)
      card : base/card :=
       (any<-any : base/card
        data)
      title : string := (:name card)
      istitle : boolean :=
       (nav/boolean-layouttitlebar<-string
        title)]
      true))))
 :context
 :sideeffects "Alters uinavbar and uimain"
 :doc "Navigate to the ui at select position.")

(func boolean-navigate-back : boolean
 (let : boolean
  [navbar : ui/ui := (ui-readstate-navbar)
   ideselect : int :=
    (ui/int-selected<-ui
     navbar)
   ischange : boolean :=
    (> ideselect 2)]
  (if : boolean
   (then ischange
    (boolean-navigate<-select
     (- ideselect 2)))))
 :context
 :sideeffects "Alters uinavbar and uimain"
 :doc "Navigate to the previous ui")

(func ui-app : ui/ui
 (ui/ui-readstate-uiapp)
 :context
 :doc "Returns the application app")

(func ui-layout<-main-selected : ui/ui
 [main     : ui/ui
  selected : int]
 (if : ui/ui
  (then
   (< selected 1)
   main)
  (else
   (let : ui/ui
    [parent : ui/ui := (ui/ui-readstate-uiapp)]
    (ui/ui-layout<-ui-parent-visible
     main parent selected))))
 :context
 :doc "")

(func ui-layout<-navbar-selected : ui/ui
 [navbar   : ui/ui
  selected : int]
 (if : ui/ui
  (then
   (< selected 1)
   navbar)
  (else
   (let : ui/ui
    [parent : ui/ui := (ui/ui-readstate-uiapp)]
    (ui/ui-layout<-ui-parent-selected
     navbar parent (+1 selected)))))
 :context
 :doc "")

(func ui-navbutton : ui/ui
 (ui/ui
  :uid "app/navbar"
  :stylelist
   (ui/stylelist
    style-app-navbar-button
    style-clickable)
  :eventmap eventmap-navbutton)
 :doc "Returns an empty navbutton")

(func ui-navbutton<-ui-selected : ui/ui
 [ui       : ui/ui
  selected : boolean]
 (let : ui/ui
  [name : string  := (:name ui)
   navbutton : ui := (ui-navbutton)
   uid  : string  :=
    (string (:uid navbutton) "/" name)]
  (copy navbutton
   :uid  uid
   :name name
   :selected selected))
 :doc "Returns a navbar-button")

(func ui-readstate-main : ui/ui
 (ui/ui-readstate<-uid
  "app/main")
 :context
 :doc "Returns the application main panel")

(func ui-readstate-navbar : ui/ui
 (ui/ui-readstate<-uid
  "app/navbar")
 :context
 :doc "Returns the application navbar")

(func ui-readstate-titlebar : ui/ui
 (ui/ui-readstate<-uid
  "app/titlebar")
 :context
 :doc "Returns the application titlebar panel")
