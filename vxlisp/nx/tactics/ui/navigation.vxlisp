(package nx/tactics/ui/navigation
 :libs (lib styles :path nx/tactics/ui/stylesheet)
       (lib ui     :path vx/ui/ui)
 :doc "Tactics UI")

(func boolean-navigate-back : boolean
 (let : boolean
  [navbar : ui/ui := (nav/ui-navbar)
   main : ui/ui := (nav/ui-main)
   selected : int :=
    (ui/int-selected<-ui
     navbar)
   ischange : boolean :=
    (> selected 2)
   poschg : int :=
    (if : int
     ischange
     (- selected 2))
   navbarchg : ui/ui :=
    (if : ui/ui
     (then
      ischange
      (ui-render<-navbar-selected
       navbar poschg)))
   mainchg : ui/ui :=
    (if : ui/ui
     (then
      ischange
      (ui-render<-main-selected
       main poschg)))]
  ischange)
 :context
 :sideeffects "Alters uinavbar and uimain"
 :doc "Navigate to the previous ui")

(func ui-main : ui/ui
 (ui/ui-readstate<-uid
  "main")
 :context
 :doc "Returns the application main panel")

(func ui-app : ui/ui
 (ui/ui-readstate<-uid
  "app")
 :context
 :doc "Returns the application app")

(func ui-navbar : ui/ui
 (ui/ui-readstate<-uid
  "navbar")
 :context
 :doc "Returns the application navbar")

(func ui-navbutton : ui/ui
 (ui/ui
  :uid "navbar-"
  :parent "navbar"
  :stylelist
   (ui/stylelist
    style-app-navbar-button
    style-clickable)))

(func ui-navbutton<-ui-parent-selected : ui/ui
 [ui       : ui/ui
  parent   : string
  selected : boolean]
 (let : ui/ui
  [name : string  := (:name ui)
   uid  : string  := (string parent "-" name)
   navbutton : ui := (ui-navbutton)]
  (copy navbutton
   :uid    uid
   :name   name
   :parent parent
   :selected selected
   :stylelist
    (ui/stylelist
     style-app-navbar-button
     style-clickable)))
 :doc "Returns a navbar-button")

(func ui-render<-main-selected : ui/ui
 [main     : ui/ui
  selected : int]
 (if : ui/ui
  (then
   (< selected 1)
   main)
  (else
   (let : ui/ui
    [parent : ui/ui := (ui-app)]
    (ui/ui-render<-ui-parent-visible
     main parent selected))))
 :context
 :doc "")

(func ui-render<-navbar-selected : ui/ui
 [navbar   : ui/ui
  selected : int]
 (if : ui/ui
  (then
   (< selected 1)
   navbar)
  (else
   (let : ui/ui
    [parent : ui/ui := (ui-app)]
    (ui/ui-render<-ui-parent-selected
     navbar parent (+1 selected)))))
 :context
 :doc "")
