(package vx/ui/ui
 :libs (lib event :path vx/event)
 :doc "Universal Ui Element")

(type layout : struct
 :properties [name : string]
 :doc "Universal Layout")

(type point : struct
 :properties [x          : int
              y          : int
              z          : int
              t          : int
              i          : int
              pointstyle : pointstyle]
 :doc "Universal Point")

(type pointstyle : struct
 :doc "Universal Point Style")

(type render : struct
 :doc "Universal Rendered UI")

(type rendermap : map
 :allowtypes [render]
 :doc "Map of render")

(type renderer : struct
 :properties [fn-render : ui-render<-ui-orig-parent]
 :doc "Universal Renderer")

(type style : struct
 :properties [name   : string
              layout : layout]
 :doc "Universal Style")

(type stylelist : list
 :allowtypes [style]
 :doc "Universal Stylelist")

(type stylemap : map
 :allowtypes [style]
 :doc "Universal Stylemap")

(type stylesheet : struct
 :properties [stylemap : stylemap]
 :doc "Universal Stylesheet")

(type ui : struct
 :properties [data       : any
              eventmap   : eventmap
              path       : string
              render     : render
              renderer   : renderer
              style      : style
              stylelist  : stylelist
              stylesheet : stylesheet
              uid        : string
              uimap      : uimap]
 :doc "Universal UI Element")

(type uimap : map
 :allowtypes [ui])

(const layout-app : layout)

(const layout-background : layout)

(const layout-combobox : layout)

(const layout-flow-horizontal : layout)

(const layout-flow-vertical : layout)

(const layout-image : layout)

(const layout-maxpanel : layout)

(const layout-menubar : layout)

(const layout-menudrawer : layout)

(const layout-navbar : layout)

(const layout-navdrawer : layout)

(const layout-panel : layout)

(const layout-parallax : layout)

(const layout-scrollbox : layout)

(const layout-scrollbox-horizontal : layout)

(const layout-scrollbox-vertical : layout)

(const layout-split-horizontal : layout)

(const layout-split-vertical : layout)

(const layout-statusbar : layout)

(const layout-statusdrawer : layout)

(const layout-text : layout)

(const layout-textentry : layout)

(func layout<-style : layout
 [style : style]
 (:layout style)
 :doc "")

(func ui<-renderer-ui-orig-parent : ui
 [renderer : renderer
  uiarg    : ui
  uiorig   : ui
  parent   : ui]
 (let : ui
  [fn-render : ui-render<-ui-orig-parent := (:fn-render renderer)
   uichg     : ui                        := (fn-render
                                             uiarg
                                             uiorig
                                             parent)]
  uichg)
 :doc "")

(func ui-render<-fn-render-ui-orig-parent : render
 [fn-render : ui-render<-ui-orig-parent
  ui        : ui
  orig      : ui
  parent    : ui]
 (fn-render
  ui
  orig
  parent))

(func ui-render<-ui : ui
 [uiarg : ui]
 (ui-render<-ui-orig-parent
  uiarg
  (empty ui)
  (empty ui))
 :doc "")

(func ui-render<-ui-orig-parent : ui
 [ui     : ui
  orig   : ui
  parent : ui]
 (if : ui
  (then
   (== ui orig)
   orig)
  (else
   (let : ui
    [renderer   : renderer := (:renderer ui)
     uiout      : ui       := (ui<-renderer-ui-orig-parent
                               renderer
                               ui
                               orig
                               parent)]
    uiout)))
 :sideeffects "Alters UI"
 :doc "Returns a rendered object from a UI Element.")

(func uimap-render<-uimap : rendermap
 [uimap : uimap]
 :sideeffects "Alters User Interface"
 :doc "Renders a uimap and returns a rendermap.")
