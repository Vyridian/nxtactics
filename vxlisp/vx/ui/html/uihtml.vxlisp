(package vx/ui/html/uihtml
 :libs (lib html :path vx/web/html)
       (lib doc  :path vx/web/htmldoc)
       (lib ui   :path vx/ui/ui))

(const renderer-app : ui/renderer
 (ui/renderer
  :fn-render ui-render-app<-ui-orig-parent)
 :doc "Html App Renderer")

(const renderer-default : ui/renderer
 (ui/renderer
  :fn-render ui-render-default<-ui-orig-parent)
 :doc "Html App Renderer")

(func divchildlist<-uimap : html/divchildlist
 [uimap : ui/uimap]
 (list<-map : html/divchildlist
  uimap
  (fn : html/div
   [key   : string
    value : ui/ui]
   (let : html/div
    [uid : string := (:uid value)]
    (html/div
     :id uid))))
 :doc "Returns a divchildlist of empty divs from a uimap")

(func node-app<-ui-orig-parent : html/node
 [ui     : ui
  orig   : ui
  parent : ui]
 (html/div))

(func node-render<-node-uid : html/node
 [node : html/node
  uid  : string]
 (let : html/node
  [htmltext : string  := (html/string<-node-indent
                          node
                          2)
   isdone   : boolean := (doc/boolean-replace<-id-htmltext
                          uid
                          htmltext)]
  node)
 :sideeffects "UI altered"
 :doc "")

(func renderer<-style : ui/renderer
 [style  : ui/style]
 (let : ui/renderer
  [layout : ui/layout := (ui/layout<-style
                          style)]
  (if : ui/renderer
   (then
    (== layout ui/layout-app)
    renderer-app)
   (else
    renderer-default)))
 :doc "Returns a renderer from a given style")

(func ui-render-app<-ui-orig-parent : ui/ui
 [ui     : ui
  orig   : ui
  parent : ui]
 (let : ui/ui
  [uid      : string            := (:uid ui)
   uimap    : ui/uimap          := (:uimap ui)
   children : html/divchildlist := (divchildlist<-uimap
                                    uimap)
   node     : html/node         := (html/div
                                    :id uid
                                    :nodes children)
   nodechg  : html/node         := (node-render<-node-uid
                                    node
                                    uid)]
  ui)
 :doc "")

(func ui-render-default<-ui-orig-parent : ui/ui
 [ui     : ui
  orig   : ui
  parent : ui]
 (let : ui/ui
  [uid      : string    := (:uid ui)
   uimap    : ui/uimap  := (:uimap ui)
   children : html/divchildlist := (divchildlist<-uimap
                                    uimap)
   node     : html/node := (html/div
                            :id uid
                            :nodes children)
   nodechg  : html/node := (node-render<-node-uid
                            node
                            uid)]
  ui)

 :doc "")

(func ui-renderer<-ui : ui/ui
 [ui : ui/ui]
 (let : ui/ui
  [style    : ui/style  := (:style ui)
   renderer : ui/renderer := (renderer<-style
                              style)
   uimap    : ui/uimap    := (uimap-renderer<-uimap
                              (:uimap ui))]
  (copy ui
   :renderer renderer
   :uimap    uimap))
 :doc "Returns a ui with an HTML renderer added to each ui.")

(func uimap-renderer<-uimap : ui/uimap
 [uimap : ui/uimap]
 (map<-map : uimap
  uimap
  (fn : ui
   [key : string
    ui  : ui/ui]
   (ui-renderer<-ui
    ui)))
 :doc "Returns a uimap with an HTML renderer added to each ui.")
