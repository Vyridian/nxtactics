(testpackagelist
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "any<-for-until-loop"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 8
 (any<-for-until-loop
  1
  (fn : boolean
   [current : int]
   (> current 6))
  (fn : int
   [current : int]
   (+ current current))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 8
          :actual 8))))
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "any<-for-while-loop"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 8
 (any<-for-while-loop
  1
  (fn : boolean
   [current : int]
   (< current 5))
  (fn : int
   [current : int]
   (+ current current))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 8
          :actual 8))))
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "is-list"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (is-list (empty stringlist)))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "is-map"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (is-map (empty stringmap)))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-for-end-loop"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (intlist 4 9)
 (list<-for-end-loop : intlist
  2
  3
  (fn
   [current : int]
   (* current current))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (intlist
            4
            9)
          :actual
           (intlist
            4
            9)))))
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-end"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringlist
  "a" "b" "c")
 (list<-list-end
  (stringlist
   "a" "b" "c" "d")
  3))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a"
            "b"
            "c")
          :actual
           (stringlist
            "a"
            "b"
            "c")))))
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-filter"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringlist
  "a1" "b1" "c1" "d1")
 (list<-list-filter : stringlist
  (list
   "a" 4 "b" (list) "c" (map) "d")
  (fn : string
   [val : any]
   (if
    (then
     (is-string val)
     (string val "1"))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a1"
            "b1"
            "c1"
            "d1")
          :actual
           (stringlist
            "a1"
            "b1"
            "c1"
            "d1")))))
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-filtertypes"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (list
  "a" 1 "b" "c")
 (list<-list-filtertypes : list
  (list
   "a" 1 "b" "c" 4.5)
  string int))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (list
            "a"
            1
            "b"
            "c")
          :actual
           (list
            "a"
            1
            "b"
            "c")))))
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-start"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringlist
  "b" "c" "d")
 (list<-list-start
  (stringlist
   "a" "b" "c" "d")
  2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "b"
            "c"
            "d")
          :actual
           (stringlist
            "b"
            "c"
            "d")))))
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-start-end"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringlist
  "b" "c")
 (list<-list-start-end
  (stringlist
   "a" "b" "c" "d")
  2 3))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "b"
            "c")
          :actual
           (stringlist
            "b"
            "c"))))))
  :coveragedetail
   (testcoveragedetail
    :funcmap
     (intmap
      :any<-for-until-loop 1
      :any<-for-until-loop-max 0
      :any<-for-while-loop 1
      :any<-for-while-loop-max 0
      :is-list 1
      :is-map 1
      :list<-for-end-loop 1
      :list<-for-while-loop 0
      :list<-for-while-loop-max 0
      :list<-list-end 1
      :list<-list-filter 1
      :list<-list-filtertypes 1
      :list<-list-start 1
      :list<-list-start-end 1)
    :testpkg "vx/collection")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 14)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 14)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 14
      :total 14)
    :funcnums
     (testcoveragenums
      :pct 71
      :tests 10
      :total 14)
    :testpkg "vx/collection"
    :totalnums
     (testcoveragenums
      :pct 71
      :tests 10
      :total 14)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/collection")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "boolean"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true true)"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-false false)"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))
       (testdescribe
        :describename "(test-true (boolean true))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-false (boolean false))"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "float"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 4.5 (float 4.5))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 4.5
          :actual 4.5))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "int"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true  (is-int 4))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-true  (is-int "4"))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-true  (is-int infinity))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-true  (is-int neginfinity))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-true  (is-int notanumber))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-false (is-int "a"))"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))
       (testdescribe
        :describename "(test-false (is-int 5.5))"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "a" (string "a"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"))
       (testdescribe
        :describename "(test "ab" (string "a" "b"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "ab"
          :actual "ab"))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "false"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-false false)"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "true"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true true)"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "!"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-false false)"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))
       (testdescribe
        :describename "(test-false (! true))"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "!="
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-ne true false)"
        :testresult
         (testresult
          :code ":ne"
          :passfail true
          :expected true
          :actual false))
       (testdescribe
        :describename "(test-ne "a" "b")"
        :testresult
         (testresult
          :code ":ne"
          :passfail true
          :expected "a"
          :actual "b"))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "*"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 6 (* 3 2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 6
          :actual 6))
       (testdescribe
        :describename "(test -10 (* 5 -2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected -10
          :actual -10))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "*_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 6.4 (* 3.2 2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 6.4
          :actual 6.4))
       (testdescribe
        :describename "(test -10.2 (* 5.1 -2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected -10.2
          :actual -10.2))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "*_2"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 24 (* 3 2 4))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 24
          :actual 24))
       (testdescribe
        :describename "(test -20 (* 5 -2 2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected -20
          :actual -20))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "*_3"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 24 (* 3 2 4))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 24
          :actual 24))
       (testdescribe
        :describename "(test -20 (* 5 -2 2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected -20
          :actual -20))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "+"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 5 (+ 2 3))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))
       (testdescribe
        :describename "(test 3 (+ 5 -2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "+_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 5 (+ 2  3))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))
       (testdescribe
        :describename "(test 3 (+ 5 -2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "+1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test  3 (+1  2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3))
       (testdescribe
        :describename "(test -1 (+1 -2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected -1
          :actual -1))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "-"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 1 (- 3 2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 1
          :actual 1))
       (testdescribe
        :describename "(test 7 (- 5 -2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 7
          :actual 7))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "-_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 5 (+ 2 3))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))
       (testdescribe
        :describename "(test 3 (+ 5 -2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "-1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test  1 (-1  2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 1
          :actual 1))
       (testdescribe
        :describename "(test -3 (-1 -2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected -3
          :actual -3))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "/"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 3 (/ 6 2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3))
       (testdescribe
        :describename "(test -5 (/ 10 -2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected -5
          :actual -5))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (< 2 3))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (< 2 3))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-true
 (< "b" "d" "z"))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<-"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (*
  (+
   (- 5 3)
   3)
  2)
 (<-
  5
  (- 3)
  (+ 3)
  (* 2)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 10
          :actual 10))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<<-"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (* (+ (- 3 5) 3) 2)
 (<<-
  5
  (- 3)
  (+ 3)
  (* 2)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 2
          :actual 2))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<="
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (<= 2 3))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<=_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (<= "b" "d" "z"))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "="
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (= true true))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-true (= 2 2))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-true (= "a" "a"))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-true
 (=
  (stringlist "a" "b" "c")
  (new stringlist "a" "b" "c")))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-true
 (=
  (stringmap :a "1" :b "2")
  (new stringmap :a "1" :b "2")))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "=_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-false (= 2 2 3))"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "=="
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (== 0 0))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-true (== "" ""))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename ">"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (> 3 2))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename ">_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (> "z" "y" "b"))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename ">="
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (>= 3 2))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename ">=_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (>= "z" "b" "b"))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "and"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (and true true))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-false
 (and true false))"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "and_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (and true true true))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-false
 (and true true false))"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "any<-list"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "b"
 (any<-list
  (list "a" "b" "c")
  2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"))
       (testdescribe
        :describename
         "(test
 "b"
 (:2 (stringlist "a" "b" "c")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "any<-list-start-reduce"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 24
 (any<-list-start-reduce : int
  (intlist 3 2 4)
  1
  (fn : int
   [total : int
    num   : int]
   (* total num))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 24
          :actual 24))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "any<-map"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "v2"
 (any<-map
  (map
   :a "v1"
   :b "v2"
   :c "v3")
  :b))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "v2"
          :actual "v2"))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "any<-map-start-reduce"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "xayb"
 (any<-map-start-reduce
  (stringmap
   :a "x"
   :b "y")
  ""
  (fn : string
   [current : string
    key     : string
    value   : any]
   (copy current
    value
    key))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "xayb"
          :actual "xayb"))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "compare"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 1 (compare 3 2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 1
          :actual 1))
       (testdescribe
        :describename "(test 1 (compare "z" "a"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 1
          :actual 1))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "contains"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true  (contains "abcde" "cd"))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-false (contains "abcde" "dc"))"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "contains_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (contains (stringlist "1" "2" "3") "2"))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-true
 (contains (intlist 1 2 3) 2))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-false
 (contains (list 1 "2" 3) 2))"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "copy"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringmap
  :a "1"
  :b "2")
 (copy (stringmap :a "1")
  :b "2"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringmap
            :a "1"
            :b "2")
          :actual
           (stringmap
            :a "1"
            :b "2")))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "empty"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test ""     (empty string))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true))
       (testdescribe
        :describename "(test (list) (empty list))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true))
       (testdescribe
        :describename "(test (map)  (empty map))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "first<-list"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "b"
 (first<-list
  (stringlist "b" "c")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "first<-list-any<-any"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "b"
 (first<-list-any<-any
  (list nothing "b" "c")
  resolve))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "float<-string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (float 2.3)
 (float<-string
  "2.3"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 2.3
          :actual 2.3))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "if"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "a"
 (if (= 2 2) "a"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"))
       (testdescribe
        :describename
         "(test
 ""
 (if : string
  (= 1 2)
  "a"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "if_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "a"
 (if
  (= 2 2)
  "a"
  "b"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"))
       (testdescribe
        :describename
         "(test
 "b"
 (if
  (= 1 2)
  "a"
  "b"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "if_2"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (if
  (then (= 2 3) false)
  (then (!= 3 3) false)
  (else (! false))))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "int<-string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 4 (int<-string "4"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4))
       (testdescribe
        :describename "(test 5 (int<-string "5.4"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))
       (testdescribe
        :describename "(test 5 (int<-string "5.9"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))
       (testdescribe
        :describename "(test notanumber  (int<-string "notanumber"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected notanumber
          :actual notanumber))
       (testdescribe
        :describename "(test infinity    (int<-string "infinity"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected infinity
          :actual infinity))
       (testdescribe
        :describename "(test neginfinity (int<-string "neginfinity"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected neginfinity
          :actual neginfinity))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "is-empty_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (is-empty ""))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-true (is-empty (list)))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-true (is-empty (map)))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "is-int"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (is-int 2))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-true
 (is-int "2"))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-true
 (is-int infinity))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-true
 (is-int "infinity"))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "is-number"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true  (is-number 5))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-true  (is-number 5.5))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-false (is-number "a"))"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "last<-list"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "c" (last<-list (list "b" "c")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "c"
          :actual "c"))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "length<-list"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 3 (length<-list (stringlist "a" "b" "c")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "let"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 7
 (let
  [v1 : int := 2
   v2 : int := (+ v1 3)]
  (+ v1 v2)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 7
          :actual 7))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "list<-map"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringlist "a1" "b2")
 (list<-map : stringlist
  (stringmap "a" "1" "b" "2")
  (fn : string
   [key : string
    val : string]
   (string key val))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a1"
            "b2")
          :actual
           (stringlist
            "a1"
            "b2")))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "map<-list"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringmap
  "keya" "a"
  "keyb" "b")
 (map<-list : stringmap
  (stringlist "a" "b")
  (fn : string
   [val : string]
   (string "key" val))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringmap
            :keya "a"
            :keyb "b")
          :actual
           (stringmap
            :keya "a"
            :keyb "b")))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "map<-map"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringmap
  :a "a1"
  :b "b2")
 (map<-map : stringmap
  (stringmap
   :a "1"
   :b "2")
  (fn : string
   [key : string
    val : string]
   (string key val))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringmap
            :a "a1"
            :b "b2")
          :actual
           (stringmap
            :a "a1"
            :b "b2")))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "new"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test true (new boolean true))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test 4 (new int 4))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4))
       (testdescribe
        :describename "(test 5.4 (new float 5.4))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5.4
          :actual 5.4))
       (testdescribe
        :describename "(test "a" (new string "a"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"))
       (testdescribe
        :describename
         "(test
 (stringlist "a" "b" "c")
 (new stringlist "a" "b" "c"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a"
            "b"
            "c")
          :actual
           (stringlist
            "a"
            "b"
            "c")))
       (testdescribe
        :describename
         "(test
 (stringmap :a "1" :b "2")
 (new stringmap :a "1" :b "2"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringmap
            :a "1"
            :b "2")
          :actual
           (stringmap
            :a "1"
            :b "2")))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "or"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (or true true))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-true (or true false))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-false (or false false))"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "or_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (or false true false))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename "(test-false (or false false false))"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "resolve"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "a" (resolve "a"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "resolve_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 4 (resolve (fn : int [] (+ 1 3))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "resolve-async"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 4 (resolve : int (fn : int [] (+ 1 3))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "string-repeat"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "abab" (string-repeat "ab" 2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "abab"
          :actual "abab"))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "string<-any"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "true"  (string<-any true))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "true"
          :actual "true"))
       (testdescribe
        :describename "(test "4"     (string<-any 4))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "4"
          :actual "4"))
       (testdescribe
        :describename "(test "5.4"   (string<-any 5.4))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "5.4"
          :actual "5.4"))
       (testdescribe
        :describename "(test "\"a\"" (string<-any "a"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected ""a""
          :actual ""a""))
       (testdescribe
        :describename
         "(test
 "(stringlist
   \"a\"
   \"b\"
   \"c\")"
 (string<-any (stringlist "a" "b" "c")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           "(stringlist
 "a"
 "b"
 "c")"
          :actual
           "(stringlist
 "a"
 "b"
 "c")"))
       (testdescribe
        :describename
         "(test
 "(stringmap
   :a \"1\"
   :b \"2\")"
 (string<-any (stringmap :a "1" :b "2")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           "(stringmap
 :a "1"
 :b "2")"
          :actual
           "(stringmap
 :a "1"
 :b "2")"))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "string<-string-find-replace"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "a!b!c"
 (string<-string-find-replace
  "axybxyc"
  "xy"
  "!"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "a!b!c"
          :actual "a!b!c"))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "switch"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test 1
 (switch : int
  "d"
  (case (list "b" "c" "d") 1)
  (else 2)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 1
          :actual 1))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "type<-any"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 boolean
 (type<-any false))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected vx/core/boolean
          :actual vx/core/boolean))
       (testdescribe
        :describename
         "(test
 int
 (type<-any 5))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected vx/core/int
          :actual vx/core/int))
       (testdescribe
        :describename
         "(test
 string
 (type<-any "a"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected vx/core/string
          :actual vx/core/string))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "typename<-any"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "vx/core/boolean" (typename<-any false))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "vx/core/boolean"
          :actual "vx/core/boolean"))
       (testdescribe
        :describename "(test "vx/core/int"     (typename<-any 5))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "vx/core/int"
          :actual "vx/core/int"))
       (testdescribe
        :describename "(test "vx/core/string"  (typename<-any "a"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "vx/core/string"
          :actual "vx/core/string")))))
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :false 1
      :global 0
      :infinity 0
      :mempool-active 0
      :msg-error 0
      :msg-info 0
      :msg-severe 0
      :msg-warning 0
      :neginfinity 0
      :newline 0
      :notanumber 0
      :nothing 0
      :quote 0
      :true 1)
    :funcmap
     (intmap
      :! 2
      :!-empty 0
      :!-empty_1 0
      :!= 2
      :!== 0
      :* 2
      :*_1 2
      :*_2 2
      :*_3 2
      :+ 2
      :+_1 2
      :+_2 0
      :+_3 0
      :+1 2
      :- 2
      :-_1 2
      :-_2 0
      :-_3 0
      :-1 2
      :. 0
      :/ 2
      :< 1
      :<_1 2
      :<- 1
      :<<- 1
      :<= 1
      :<=_1 1
      := 5
      :=_1 1
      :== 2
      :> 1
      :>_1 1
      :>= 1
      :>=_1 1
      :allowfuncs<-security 0
      :allowtypenames<-typedef 0
      :allowtypes<-typedef 0
      :and 2
      :and_1 2
      :any<-any 0
      :any<-any-async 0
      :any<-any-context 0
      :any<-any-context-async 0
      :any<-any-key-value 0
      :any<-func 0
      :any<-func-async 0
      :any<-int 0
      :any<-key-value 0
      :any<-key-value-async 0
      :any<-list 2
      :any<-list-start-reduce 1
      :any<-list-start-reduce-next 0
      :any<-map 1
      :any<-map-start-reduce 1
      :any<-none 0
      :any<-none-async 0
      :any<-reduce 0
      :any<-reduce-async 0
      :any<-reduce-next 0
      :any<-reduce-next-async 0
      :any<-struct 0
      :async 0
      :boolean-permission<-func 0
      :boolean<-any 0
      :boolean<-func 0
      :boolean<-none 0
      :case 0
      :case_1 0
      :compare 2
      :contains 2
      :contains_1 3
      :context-main 0
      :copy 1
      :else 0
      :empty 3
      :extends<-any 0
      :extends<-typedef 0
      :first<-list 1
      :first<-list-any<-any 1
      :float<-string 1
      :fn 0
      :funcdef<-func 0
      :funcname<-funcdef 0
      :if 2
      :if_1 2
      :if_2 1
      :int<-func 0
      :int<-string 6
      :is-empty 0
      :is-empty_1 3
      :is-endswith 0
      :is-float 0
      :is-func 0
      :is-int 4
      :is-number 3
      :is-pass<-permission 0
      :last<-list 1
      :length<-list 1
      :let 1
      :let-async 0
      :list-join<-list 0
      :list<-list 0
      :list<-list-async 0
      :list<-map 1
      :list<-map-async 0
      :list<-type 0
      :log 0
      :log_1 0
      :main 0
      :map<-list 1
      :map<-map 1
      :mempool-addref 0
      :mempool-release 0
      :mempool-removeref 0
      :mempool-removerefchildren 0
      :mempool-reserve 0
      :msg<-error 0
      :msg<-error_1 0
      :msg<-error_2 0
      :msg<-warning 0
      :msgblock<-msgblock-msg 0
      :msgblock<-msgblock-msgblock 0
      :name<-typedef 0
      :native 0
      :native<-any 0
      :new 6
      :number<-func 0
      :or 3
      :or_1 2
      :package-global<-name 0
      :packagename<-typedef 0
      :path<-context-path 0
      :path<-setting-path 0
      :permission<-id-context 0
      :properties<-typedef 0
      :proplast<-typedef 0
      :resolve 1
      :resolve_1 1
      :resolve-async 1
      :resolve-first 0
      :resolve-list 0
      :security<-context 0
      :security<-user 0
      :session<-context 0
      :setting<-context 0
      :string-repeat 1
      :string<-any 6
      :string<-any-indent 0
      :string<-func 0
      :string<-string-find-replace 1
      :switch 1
      :then 0
      :traits<-typedef 0
      :type<-any 3
      :typedef<-any 0
      :typedef<-type 0
      :typename<-any 3
      :typename<-type 0
      :typename<-typedef 0
      :typenames<-typelist 0
      :user<-context 0)
    :testpkg "vx/core"
    :typemap
     (intmap
      :any 0
      :any-async<-func 0
      :any<-anylist 0
      :anylist 0
      :anymap 0
      :anytype 0
      :arg 0
      :arglist 0
      :argmap 0
      :boolean 4
      :booleanlist 0
      :collection 0
      :compilelanguages 0
      :connect 0
      :connectlist 0
      :connectmap 0
      :const 0
      :constdef 0
      :constlist 0
      :constmap 0
      :context 0
      :date 0
      :decimal 0
      :error 0
      :float 1
      :func 0
      :funcdef 0
      :funclist 0
      :funcmap 0
      :int 7
      :intlist 0
      :intmap 0
      :list 0
      :listtype 0
      :locale 0
      :map 0
      :maptype 0
      :mempool 0
      :msg 0
      :msgblock 0
      :msgblocklist 0
      :msglist 0
      :none 0
      :notype 0
      :number 0
      :numberlist 0
      :numbermap 0
      :package 0
      :packagemap 0
      :permission 0
      :permissionlist 0
      :permissionmap 0
      :project 0
      :security 0
      :session 0
      :setting 0
      :state 0
      :statelistener 0
      :string 2
      :stringlist 0
      :stringmap 0
      :struct 0
      :thenelse 0
      :thenelselist 0
      :translation 0
      :translationlist 0
      :translationmap 0
      :type 0
      :typedef 0
      :typelist 0
      :typemap 0
      :user 0
      :value 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 1
      :total 161)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 1
      :total 161)
    :constnums
     (testcoveragenums
      :pct 14
      :tests 2
      :total 14)
    :docnums
     (testcoveragenums
      :pct 89
      :tests 221
      :total 248)
    :funcnums
     (testcoveragenums
      :pct 48
      :tests 65
      :total 135)
    :testpkg "vx/core"
    :totalnums
     (testcoveragenums
      :pct 31
      :tests 71
      :total 222)
    :typenums
     (testcoveragenums
      :pct 5
      :tests 4
      :total 73))
  :passfail true
  :testpkg "vx/core")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/data/csv"
     :casename "textblock-csv<-string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (tb/textblock
  :text
`"a","b"
1,"2"`
  :startpos 1
  :endpos 13
  :children
   (tb/textblocklist
    (tb/textblock
     :text `"a"`
     :startpos 1
     :endpos 3
     :delim
      (copy tb/delimquote
       :pos 0)
     :children
      (tb/textblocklist
       (tb/textblock
        :text "a"
        :startpos 2
        :endpos 2)))
    (tb/textblock
     :text ","
     :startpos 4
     :endpos 4
     :delim
      (copy tb/delimcomma
       :pos 0))
    (tb/textblock
     :text `"b"`
     :startpos 5
     :endpos 7
     :delim
      (copy tb/delimquote
       :pos 0)
     :children
      (tb/textblocklist
       (tb/textblock
        :text "b"
        :startpos 6
        :endpos 6)))
    (tb/textblock
     :text "
"
     :startpos 8
     :endpos 8
     :delim
      (copy tb/delimline
       :pos 0))
    (tb/textblock
     :text "1"
     :startpos 9
     :endpos 9)
    (tb/textblock
     :text ","
     :startpos 10
     :endpos 10
     :delim
      (copy tb/delimcomma
       :pos 0))
    (tb/textblock
     :text `"2"`
     :startpos 11
     :endpos 13
     :delim
      (copy tb/delimquote
       :pos 0)
     :children
      (tb/textblocklist
       (tb/textblock
        :text "2"
        :startpos 12
        :endpos 12)))))
 (textblock-csv<-string
  `"a","b"
1,"2"`))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text
             ""a","b"
1,"2""
            :startpos 1
            :endpos 13
            :children
             (textblocklist
              (textblock
               :text ""a""
               :startpos 1
               :endpos 3
               :delim
                (delim
                 :name "delimquote"
                 :starttext """
                 :endtext """)
               :children
                (textblocklist
                 (textblock
                  :text "a"
                  :startpos 2
                  :endpos 2)))
              (textblock
               :text ","
               :startpos 4
               :endpos 4
               :delim
                (delim
                 :name "delimcomma"
                 :starttext ","))
              (textblock
               :text ""b""
               :startpos 5
               :endpos 7
               :delim
                (delim
                 :name "delimquote"
                 :starttext """
                 :endtext """)
               :children
                (textblocklist
                 (textblock
                  :text "b"
                  :startpos 6
                  :endpos 6)))
              (textblock
               :text
                "
"
               :startpos 8
               :endpos 8
               :delim
                (delim
                 :name "delimline"
                 :starttext
                  "
"))
              (textblock
               :text "1"
               :startpos 9
               :endpos 9)
              (textblock
               :text ","
               :startpos 10
               :endpos 10
               :delim
                (delim
                 :name "delimcomma"
                 :starttext ","))
              (textblock
               :text ""2""
               :startpos 11
               :endpos 13
               :delim
                (delim
                 :name "delimquote"
                 :starttext """
                 :endtext """)
               :children
                (textblocklist
                 (textblock
                  :text "2"
                  :startpos 12
                  :endpos 12)))))
          :actual
           (textblock
            :text
             ""a","b"
1,"2""
            :startpos 1
            :endpos 13
            :children
             (textblocklist
              (textblock
               :text ""a""
               :startpos 1
               :endpos 3
               :delim
                (delim
                 :name "delimquote"
                 :starttext """
                 :endtext """)
               :children
                (textblocklist
                 (textblock
                  :text "a"
                  :startpos 2
                  :endpos 2)))
              (textblock
               :text ","
               :startpos 4
               :endpos 4
               :delim
                (delim
                 :name "delimcomma"
                 :starttext ","))
              (textblock
               :text ""b""
               :startpos 5
               :endpos 7
               :delim
                (delim
                 :name "delimquote"
                 :starttext """
                 :endtext """)
               :children
                (textblocklist
                 (textblock
                  :text "b"
                  :startpos 6
                  :endpos 6)))
              (textblock
               :text
                "
"
               :startpos 8
               :endpos 8
               :delim
                (delim
                 :name "delimline"
                 :starttext
                  "
"))
              (textblock
               :text "1"
               :startpos 9
               :endpos 9)
              (textblock
               :text ","
               :startpos 10
               :endpos 10
               :delim
                (delim
                 :name "delimcomma"
                 :starttext ","))
              (textblock
               :text ""2""
               :startpos 11
               :endpos 13
               :delim
                (delim
                 :name "delimquote"
                 :starttext """
                 :endtext """)
               :children
                (textblocklist
                 (textblock
                  :text "2"
                  :startpos 12
                  :endpos 12))))))))))
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :delimcsv 0)
    :funcmap
     (intmap
      :csv-read<-file 0
      :csv<-file 0
      :csv<-string 0
      :csv<-textblock 0
      :csvrows<-textblock 0
      :stringmap<-csv 0
      :textblock-csv<-string 1)
    :testpkg "vx/data/csv"
    :typemap
     (intmap
      :csv 0
      :csvrowmap 0
      :csvrows 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 7)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 7)
    :constnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1)
    :docnums
     (testcoveragenums
      :pct 63
      :tests 7
      :total 11)
    :funcnums
     (testcoveragenums
      :pct 14
      :tests 1
      :total 7)
    :testpkg "vx/data/csv"
    :totalnums
     (testcoveragenums
      :pct 9
      :tests 1
      :total 11)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3))
  :passfail true
  :testpkg "vx/data/csv")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :testpkg "vx/data/db"
    :typemap
     (intmap
      :db 0
      :dbcell 0
      :dbcellmap 0
      :dbfield 0
      :dbfieldmap 0
      :dbid 0
      :dblink 0
      :dblinklist 0
      :dbnode 0
      :dbnote 0
      :dbtable 0
      :dbvalue 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 12
      :total 12)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "vx/data/db"
    :totalnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 12)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 12))
  :passfail true
  :testpkg "vx/data/db")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/data/file"
     :casename "boolean-exists<-file"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (boolean-exists<-file
  (file
   :name "boolean_exists_from_file.txt"
   :path "src/test/resources/vx")))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/data/file"
     :casename "boolean-write<-file-string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (boolean-write<-file-string
  (file
   :name "boolean_write_from_file_string.txt"
   :path "src/test/resources/vx")
  "writetext"))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/data/file"
     :casename "file-read<-file"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (file
  :name "string_read_from_file.txt"
  :path "src/test/resources/vx"
  :text "testdata")
 (file-read<-file
  (file
   :name "string_read_from_file.txt"
   :path "src/test/resources/vx")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (file
            :name "string_read_from_file.txt"
            :path "src/test/resources/vx"
            :text "testdata")
          :actual
           (file
            :name "string_read_from_file.txt"
            :path "src/test/resources/vx"
            :text "testdata")))))
    (testcase
     :passfail true
     :testpkg "vx/data/file"
     :casename "string-read<-file"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "testdata"
 (string-read<-file
  (file
   :name "string_read_from_file.txt"
   :path "src/test/resources/vx")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "testdata"
          :actual "testdata")))))
  :coveragedetail
   (testcoveragedetail
    :funcmap
     (intmap
      :boolean-exists<-file 1
      :boolean-write<-file 0
      :boolean-write<-file-any 0
      :boolean-write<-file-string 1
      :file-read<-file 1
      :name<-file 0
      :path<-file 0
      :pathcurrent<-os 0
      :pathfull<-file 0
      :string-read<-file 1)
    :testpkg "vx/data/file"
    :typemap
     (intmap
      :file 0
      :fileformat 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 10)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 10)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 91
      :tests 11
      :total 12)
    :funcnums
     (testcoveragenums
      :pct 40
      :tests 4
      :total 10)
    :testpkg "vx/data/file"
    :totalnums
     (testcoveragenums
      :pct 33
      :tests 4
      :total 12)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 2))
  :passfail true
  :testpkg "vx/data/file")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :testpkg "vx/data/table"
    :typemap
     (intmap
      :cell 0
      :celllist 0
      :cellmap 0
      :field 0
      :fieldlist 0
      :fieldmap 0
      :filter 0
      :row 0
      :rowlist 0
      :rowmap 0
      :sort 0
      :table 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 12)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "vx/data/table"
    :totalnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 12)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 12))
  :passfail true
  :testpkg "vx/data/table")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "delimlist"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (new delimlist
  delimcomma
  delimwhitespace)
 (delimlist
  delimcomma
  delimwhitespace))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (delimlist
            vx/data/textblock/delimcomma
            vx/data/textblock/delimwhitespace)
          :actual
           (delimlist
            vx/data/textblock/delimcomma
            vx/data/textblock/delimwhitespace)))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "delim-first<-delim-delim"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (copy delimcomma
  :pos 1)
 (delim-first<-delim-delim
  (copy delimspace
   :pos 2)
  (copy delimcomma
   :pos 1)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (delim
            :name "delimcomma"
            :starttext ","
            :pos 1)
          :actual
           (delim
            :name "delimcomma"
            :starttext ","
            :pos 1)))
       (testdescribe
        :describename
         "(test
 (empty delim)
 (delim-first<-delim-delim
  (delim
   :pos 0)
  (empty delim)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "delim-first<-string-delimlist"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (copy delimcomma
  :pos 2)
 (delim-first<-string-delimlist
  "a, b"
  (delimlist
   delimspace
   delimcomma)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (delim
            :name "delimcomma"
            :starttext ","
            :pos 2)
          :actual
           (delim
            :name "delimcomma"
            :starttext ","
            :pos 2)))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "delim-pos<-string-delim"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (copy delimcomma
  :pos 2)
 (delim-pos<-string-delim
  "a,b"
  delimcomma))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (delim
            :name "delimcomma"
            :starttext ","
            :pos 2)
          :actual
           (delim
            :name "delimcomma"
            :starttext ","
            :pos 2)))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "delimlist-pos<-string-delimlist"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (delimlist
  (copy delimspace
   :pos 3)
  (copy delimcomma
   :pos 2))
 (delimlist-pos<-string-delimlist
  "a, b"
  (delimlist
   delimspace
   delimcomma)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (delimlist
            (delim
             :name "delimspace"
             :starttext " "
             :endtext " "
             :pos 3)
            (delim
             :name "delimcomma"
             :starttext ","
             :pos 2))
          :actual
           (delimlist
            (delim
             :name "delimspace"
             :starttext " "
             :endtext " "
             :pos 3)
            (delim
             :name "delimcomma"
             :starttext ","
             :pos 2))))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "stringlist<-textblocklist"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringlist
  "a" "b")
 (stringlist<-textblocklist
  (textblocklist
   (textblock
    :text "a")
   (textblock
    :text "b"))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a"
            "b")
          :actual
           (stringlist
            "a"
            "b")))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "text<-textblock"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "a"
 (text<-textblock
  (textblock
   :text "a")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock-delimnotfound"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (textblock
  :text "<a"
  :startpos 1
  :endpos 2
  :children
   (textblocklist
    (textblock
     :text "<a"
     :startpos 1
     :endpos 2
     :delim
      (copy delimbracketangle
       :delimlist vx/data/textblock/delimlisttest1)
     :children
      (textblocklist
       (textblock
        :text "a"
        :startpos 2
        :endpos 2))
     (msgblock
      (msg
       :code "closedelimmissing"
       :detail
        (delim
         :name "delimclose"
         :starttext ">")
       :severity 2))))
  (msgblock
   (msg
    :code "closedelimmissing"
    :detail
     (delim
      :name "delimclose"
      :starttext ">")
    :severity 2)))
 (textblock-delimnotfound
  (textblock
   :text "a"
   :startpos 2
   :endpos 2
   :delim
    (delim
     :delimlist vx/data/textblock/delimlisttest2)
   :close
    (copy delimclose
     :starttext ">")
   :parent
    (textblock
     :text "<a"
     :startpos 1
     :endpos 2
     :delim
      (copy delimbracketangle
       :delimlist vx/data/textblock/delimlisttest1)
     :parent
      (textblock
       :text "<a"
       :startpos 1
       :endpos 2)))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "<a"
            :startpos 1
            :endpos 2
            :children
             (textblocklist
              (textblock
               :text "<a"
               :startpos 1
               :endpos 2
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">"
                 :delimlist vx/data/textblock/delimlisttest1)
               :children
                (textblocklist
                 (textblock
                  :text "a"
                  :startpos 2
                  :endpos 2))
               (msgblock
                :msgs
                 (msglist
                  (msg
                   :code "closedelimmissing"
                   :detail
                    (delim
                     :name "delimclose"
                     :starttext ">")
                   :severity 2)))))
            (msgblock
             :msgs
              (msglist
               (msg
                :code "closedelimmissing"
                :detail
                 (delim
                  :name "delimclose"
                  :starttext ">")
                :severity 2))))
          :actual
           (textblock
            :text "<a"
            :startpos 1
            :endpos 2
            :children
             (textblocklist
              (textblock
               :text "<a"
               :startpos 1
               :endpos 2
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">"
                 :delimlist vx/data/textblock/delimlisttest1)
               :children
                (textblocklist
                 (textblock
                  :text "a"
                  :startpos 2
                  :endpos 2))
               (msgblock
                :msgs
                 (msglist
                  (msg
                   :code "closedelimmissing"
                   :detail
                    (delim
                     :name "delimclose"
                     :starttext ">")
                   :severity 2)))))
            (msgblock
             :msgs
              (msglist
               (msg
                :code "closedelimmissing"
                :detail
                 (delim
                  :name "delimclose"
                  :starttext ">")
                :severity 2))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text ","
  :startpos 4
  :endpos 4
  :delim
   (copy delimcomma
    :pos 0)
  :parent
   (textblock
    :text "b},{c d}>"
    :startpos 5
    :endpos 13
    :delim
     (delim
      :delimlist delimlisttest3)
    :close
     (copy delimclose
      :starttext "}")
    :parent
     (textblock
      :text "{a,b},{c d}>"
      :startpos 2
      :endpos 13
      :delim
       (copy delimbracketcurly
        :pos 0)
      :close
       (copy delimclose
        :starttext ">")
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13
        :delim
         (copy delimbracketangle
          :pos 0)
        :parent
         (textblock
          :text "<{a,b},{c d}>"
          :startpos 1
          :endpos 13))
      :children
       (textblocklist
        (textblock
         :text "a"
         :startpos 3
         :endpos 3)))))
 (textblock-delimnotfound
  (textblock
   :text "a"
   :startpos 3
   :endpos 3
   :parent
    (textblock
     :text ","
     :startpos 4
     :endpos 4
     :delim
      (copy delimcomma
       :pos 0)
     :parent
      (textblock
       :text "b},{c d}>"
       :startpos 5
       :endpos 13
       :delim
        (delim
         :delimlist delimlisttest3)
       :close
        (copy delimclose
         :starttext "}")
       :parent
        (textblock
         :text "{a,b},{c d}>"
         :startpos 2
         :endpos 13
         :delim
          (copy delimbracketcurly
           :pos 0)
         :close
          (copy delimclose
           :starttext ">")
         :parent
          (textblock
           :text "<{a,b},{c d}>"
           :startpos 1
           :endpos 13
           :delim
            (copy delimbracketangle
             :pos 0)
           :parent
            (textblock
             :text "<{a,b},{c d}>"
             :startpos 1
             :endpos 13))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text ","
            :startpos 4
            :endpos 4
            :delim
             (delim
              :name "delimcomma"
              :starttext ",")
            :parent
             (textblock
              :text "b},{c d}>"
              :startpos 5
              :endpos 13
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest3)
              :close
               (delim
                :name "delimclose"
                :starttext "}")
              :parent
               (textblock
                :text "{a,b},{c d}>"
                :startpos 2
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketcurly"
                  :starttext "{"
                  :endtext "}")
                :close
                 (delim
                  :name "delimclose"
                  :starttext ">")
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">")
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13))
                :children
                 (textblocklist
                  (textblock
                   :text "a"
                   :startpos 3
                   :endpos 3)))))
          :actual
           (textblock
            :text ","
            :startpos 4
            :endpos 4
            :delim
             (delim
              :name "delimcomma"
              :starttext ",")
            :parent
             (textblock
              :text "b},{c d}>"
              :startpos 5
              :endpos 13
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest3)
              :close
               (delim
                :name "delimclose"
                :starttext "}")
              :parent
               (textblock
                :text "{a,b},{c d}>"
                :startpos 2
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketcurly"
                  :starttext "{"
                  :endtext "}")
                :close
                 (delim
                  :name "delimclose"
                  :starttext ">")
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">")
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13))
                :children
                 (textblocklist
                  (textblock
                   :text "a"
                   :startpos 3
                   :endpos 3)))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text ",{c d}>"
  :startpos 7
  :endpos 13
  :delim
   (delim
    :delimlist delimlisttest3)
  :close
   (copy delimclose
    :starttext ">")
  :parent
   (textblock
    :text "<{a,b},{c d}>"
    :startpos 1
    :endpos 13
    :delim
     (copy delimbracketangle
      :pos 0)
    :parent
     (textblock
      :text "<{a,b},{c d}>"
      :startpos 1
      :endpos 13)
    :children
     (textblocklist
      (textblock
       :text "{a,b}"
       :startpos 2
       :endpos 6
       :delim
        (copy delimbracketcurly
         :pos 0)
       :children
        (textblocklist
         (textblock
          :text "a"
          :startpos 3
          :endpos 3)
         (textblock
          :text ","
          :startpos 4
          :endpos 4
          :delim
           (copy delimcomma
            :pos 0))
         (textblock
          :text "b"
          :startpos 5
          :endpos 5))))))
 (textblock-delimnotfound
  (textblock
   :text "b"
   :startpos 5
   :endpos 5
   :parent
    (textblock
     :text ",{c d}>"
     :startpos 7
     :endpos 13
     :delim
      (delim
       :delimlist delimlisttest3)
     :close
      (copy delimclose
       :starttext ">")
     :parent
      (textblock
       :text "{a,b}"
       :startpos 2
       :endpos 6
       :delim
        (copy delimbracketcurly
         :pos 0)
       :close delimclosing
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13
         :delim
          (copy delimbracketangle
           :pos 0)
         :parent
          (textblock
           :text "<{a,b},{c d}>"
           :startpos 1
           :endpos 13))
       :children
        (textblocklist
         (textblock
          :text "a"
          :startpos 3
          :endpos 3)
         (textblock
          :text ","
          :startpos 4
          :endpos 4
          :delim
           (copy delimcomma
            :pos 0))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text ",{c d}>"
            :startpos 7
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest3)
            :close
             (delim
              :name "delimclose"
              :starttext ">")
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :delim
               (delim
                :name "delimbracketangle"
                :starttext "<"
                :endtext ">")
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13)
              :children
               (textblocklist
                (textblock
                 :text "{a,b}"
                 :startpos 2
                 :endpos 6
                 :delim
                  (delim
                   :name "delimbracketcurly"
                   :starttext "{"
                   :endtext "}")
                 :children
                  (textblocklist
                   (textblock
                    :text "a"
                    :startpos 3
                    :endpos 3)
                   (textblock
                    :text ","
                    :startpos 4
                    :endpos 4
                    :delim
                     (delim
                      :name "delimcomma"
                      :starttext ","))
                   (textblock
                    :text "b"
                    :startpos 5
                    :endpos 5))))))
          :actual
           (textblock
            :text ",{c d}>"
            :startpos 7
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest3)
            :close
             (delim
              :name "delimclose"
              :starttext ">")
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :delim
               (delim
                :name "delimbracketangle"
                :starttext "<"
                :endtext ">")
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13)
              :children
               (textblocklist
                (textblock
                 :text "{a,b}"
                 :startpos 2
                 :endpos 6
                 :delim
                  (delim
                   :name "delimbracketcurly"
                   :starttext "{"
                   :endtext "}")
                 :children
                  (textblocklist
                   (textblock
                    :text "a"
                    :startpos 3
                    :endpos 3)
                   (textblock
                    :text ","
                    :startpos 4
                    :endpos 4
                    :delim
                     (delim
                      :name "delimcomma"
                      :starttext ","))
                   (textblock
                    :text "b"
                    :startpos 5
                    :endpos 5))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :startpos 14
  :endpos 14
  :delim
   (delim
    :delimlist delimlisttest1)
  :parent
   (textblock
    :text "<{a,b},{c d}>"
    :startpos 1
    :endpos 13
    :children
     (textblocklist
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13
       :delim
        (copy delimbracketangle
         :pos 0)
       :children
        (textblocklist
         (textblock
          :text "{a,b}"
          :startpos 2
          :endpos 6
          :delim
           (copy delimbracketcurly
            :pos 0)
          :children
           (textblocklist
            (textblock
             :text "a"
             :startpos 3
             :endpos 3)
            (textblock
             :text ","
             :startpos 4
             :endpos 4
             :delim
              (copy delimcomma
               :pos 0))
            (textblock
             :text "b"
             :startpos 5
             :endpos 5)))
         (textblock
          :text ","
          :startpos 7
          :endpos 7
          :delim
           (copy delimcomma
            :pos 0))
         (textblock
          :text "{c d}"
          :startpos 8
          :endpos 12
          :delim
           (copy delimbracketcurly
            :pos 0)
          :children
           (textblocklist
            (textblock
             :text "c"
             :startpos 9
             :endpos 9)
           (textblock
            :text " "
            :startpos 10
            :endpos 10
            :delim
             (copy delimwhitespace
              :pos 0))
           (textblock
            :text "d"
            :startpos 11
            :endpos 11))))))))
 (textblock-delimnotfound
  (textblock
   :startpos 13
   :endpos 13
   :parent
    (textblock
     :startpos 14
     :endpos 14
     :delim
      (delim
       :delimlist delimlisttest1)
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13
       :delim
        (copy delimbracketangle
         :pos 0)
       :close delimclosing
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13)
       :children
        (textblocklist
         (textblock
          :text "{a,b}"
          :startpos 2
          :endpos 6
          :delim
           (copy delimbracketcurly
            :pos 0)
          :children
           (textblocklist
            (textblock
             :text "a"
             :startpos 3
             :endpos 3)
            (textblock
             :text ","
             :startpos 4
             :endpos 4
             :delim
              (copy delimcomma
               :pos 0))
            (textblock
             :text "b"
             :startpos 5
             :endpos 5)))
         (textblock
          :text ","
          :startpos 7
          :endpos 7
          :delim
           (copy delimcomma
            :pos 0))
         (textblock
          :text "{c d}"
          :startpos 8
          :endpos 12
          :delim
           (copy delimbracketcurly
            :pos 0)
          :children
           (textblocklist
            (textblock
             :text "c"
             :startpos 9
             :endpos 9)
           (textblock
            :text " "
            :startpos 10
            :endpos 10
            :delim
             (copy delimwhitespace
              :pos 0))
           (textblock
            :text "d"
            :startpos 11
            :endpos 11)))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :startpos 14
            :endpos 14
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest1)
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :children
               (textblocklist
                (textblock
                 :text "<{a,b},{c d}>"
                 :startpos 1
                 :endpos 13
                 :delim
                  (delim
                   :name "delimbracketangle"
                   :starttext "<"
                   :endtext ">")
                 :children
                  (textblocklist
                   (textblock
                    :text "{a,b}"
                    :startpos 2
                    :endpos 6
                    :delim
                     (delim
                      :name "delimbracketcurly"
                      :starttext "{"
                      :endtext "}")
                    :children
                     (textblocklist
                      (textblock
                       :text "a"
                       :startpos 3
                       :endpos 3)
                      (textblock
                       :text ","
                       :startpos 4
                       :endpos 4
                       :delim
                        (delim
                         :name "delimcomma"
                         :starttext ","))
                      (textblock
                       :text "b"
                       :startpos 5
                       :endpos 5)))
                   (textblock
                    :text ","
                    :startpos 7
                    :endpos 7
                    :delim
                     (delim
                      :name "delimcomma"
                      :starttext ","))
                   (textblock
                    :text "{c d}"
                    :startpos 8
                    :endpos 12
                    :delim
                     (delim
                      :name "delimbracketcurly"
                      :starttext "{"
                      :endtext "}")
                    :children
                     (textblocklist
                      (textblock
                       :text "c"
                       :startpos 9
                       :endpos 9)
                      (textblock
                       :text " "
                       :startpos 10
                       :endpos 10
                       :delim
                        (delim
                         :name "delimwhitespace"
                         :starttext ":whitespace"))
                      (textblock
                       :text "d"
                       :startpos 11
                       :endpos 11))))))))
          :actual
           (textblock
            :startpos 14
            :endpos 14
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest1)
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :children
               (textblocklist
                (textblock
                 :text "<{a,b},{c d}>"
                 :startpos 1
                 :endpos 13
                 :delim
                  (delim
                   :name "delimbracketangle"
                   :starttext "<"
                   :endtext ">")
                 :children
                  (textblocklist
                   (textblock
                    :text "{a,b}"
                    :startpos 2
                    :endpos 6
                    :delim
                     (delim
                      :name "delimbracketcurly"
                      :starttext "{"
                      :endtext "}")
                    :children
                     (textblocklist
                      (textblock
                       :text "a"
                       :startpos 3
                       :endpos 3)
                      (textblock
                       :text ","
                       :startpos 4
                       :endpos 4
                       :delim
                        (delim
                         :name "delimcomma"
                         :starttext ","))
                      (textblock
                       :text "b"
                       :startpos 5
                       :endpos 5)))
                   (textblock
                    :text ","
                    :startpos 7
                    :endpos 7
                    :delim
                     (delim
                      :name "delimcomma"
                      :starttext ","))
                   (textblock
                    :text "{c d}"
                    :startpos 8
                    :endpos 12
                    :delim
                     (delim
                      :name "delimbracketcurly"
                      :starttext "{"
                      :endtext "}")
                    :children
                     (textblocklist
                      (textblock
                       :text "c"
                       :startpos 9
                       :endpos 9)
                      (textblock
                       :text " "
                       :startpos 10
                       :endpos 10
                       :delim
                        (delim
                         :name "delimwhitespace"
                         :starttext ":whitespace"))
                      (textblock
                       :text "d"
                       :startpos 11
                       :endpos 11))))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text
   "\"b\"
1,\"2\""
  :startpos 5
  :endpos 13
  :delim
   (delim
    :delimlist
     (delimlist
      vx/data/textblock/delimline
      vx/data/textblock/delimquote
      vx/data/textblock/delimcomma))
  :parent
   (textblock
    :text
     "\"a\",\"b\"
1,\"2\""
    :startpos 1
    :endpos 13
    :children
     (textblocklist
      (textblock
       :text "\"a\""
       :startpos 1
       :endpos 3
       :delim
        (delim
         :name "delimquote"
         :starttext "\""
         :endtext "\"")
       :children
        (textblocklist
         (textblock
          :text "a"
          :startpos 2
          :endpos 2)))
      (textblock
       :text ","
       :startpos 4
       :endpos 4
       :delim
        (delim
         :name "delimcomma"
         :starttext ",")))))
(textblock-delimnotfound
 (textblock
  :text ","
  :startpos 4
  :endpos 4
  :delim
   (delim
    :name "delimcomma"
    :starttext ",")
  :parent
   (textblock
    :text
     "\"b\"
1,\"2\""
    :startpos 5
    :endpos 13
    :delim
     (delim
      :delimlist
       (delimlist
        vx/data/textblock/delimline
        vx/data/textblock/delimquote
        vx/data/textblock/delimcomma))
    :parent
     (textblock
      :text
       "\"a\",\"b\"
1,\"2\""
      :startpos 1
      :endpos 13
      :children
       (textblocklist
        (textblock
         :text "\"a\""
         :startpos 1
         :endpos 3
         :delim
          (delim
           :name "delimquote"
           :starttext "\""
           :endtext "\"")
         :children
          (textblocklist
           (textblock
            :text "a"
            :startpos 2
            :endpos 2)))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text
             ""b"
1,"2""
            :startpos 5
            :endpos 13
            :delim
             (delim
              :delimlist
               (delimlist
                vx/data/textblock/delimline
                vx/data/textblock/delimquote
                vx/data/textblock/delimcomma))
            :parent
             (textblock
              :text
               ""a","b"
1,"2""
              :startpos 1
              :endpos 13
              :children
               (textblocklist
                (textblock
                 :text ""a""
                 :startpos 1
                 :endpos 3
                 :delim
                  (delim
                   :name "delimquote"
                   :starttext """
                   :endtext """)
                 :children
                  (textblocklist
                   (textblock
                    :text "a"
                    :startpos 2
                    :endpos 2)))
                (textblock
                 :text ","
                 :startpos 4
                 :endpos 4
                 :delim
                  (delim
                   :name "delimcomma"
                   :starttext ",")))))
          :actual
           (textblock
            :text
             ""b"
1,"2""
            :startpos 5
            :endpos 13
            :delim
             (delim
              :delimlist
               (delimlist
                vx/data/textblock/delimline
                vx/data/textblock/delimquote
                vx/data/textblock/delimcomma))
            :parent
             (textblock
              :text
               ""a","b"
1,"2""
              :startpos 1
              :endpos 13
              :children
               (textblocklist
                (textblock
                 :text ""a""
                 :startpos 1
                 :endpos 3
                 :delim
                  (delim
                   :name "delimquote"
                   :starttext """
                   :endtext """)
                 :children
                  (textblocklist
                   (textblock
                    :text "a"
                    :startpos 2
                    :endpos 2)))
                (textblock
                 :text ","
                 :startpos 4
                 :endpos 4
                 :delim
                  (delim
                   :name "delimcomma"
                   :starttext ",")))))))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock-init"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (textblock
  :text "<{a,b},{c d}>"
  :startpos 1
  :endpos 13
  :delim delimtest1
  :parent
   (textblock
    :text "<{a,b},{c d}>"
    :startpos 1
    :endpos 13))
 (textblock-init
  (textblock
   :text "<{a,b},{c d}>"
   :delim delimtest1)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "<{a,b},{c d}>"
            :startpos 1
            :endpos 13
            :delim vx/data/textblock/delimtest1
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13))
          :actual
           (textblock
            :text "<{a,b},{c d}>"
            :startpos 1
            :endpos 13
            :delim vx/data/textblock/delimtest1
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13))))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock-parse"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (textblock
  :text "<{a,b},{c d}>"
  :startpos 1
  :endpos 13
  :children
   (textblocklist
    (textblock
     :text "<{a,b},{c d}>"
     :startpos 1
     :endpos 13
     :delim
      (copy delimbracketangle
       :pos 0)
     :children
      (textblocklist
       (textblock
        :text "{a,b}"
        :startpos 2
        :endpos 6
        :delim
         (copy delimbracketcurly
          :pos 0)
        :children
         (textblocklist
          (textblock
           :text "a"
           :startpos 3
           :endpos 3)
          (textblock
           :text ","
           :startpos 4
           :endpos 4
           :delim
            (copy delimcomma
             :pos 0))
          (textblock
           :text "b"
           :startpos 5
           :endpos 5)))
       (textblock
        :text ","
        :startpos 7
        :endpos 7
        :delim
         (copy delimcomma
          :pos 0))
       (textblock
        :text "{c d}"
        :startpos 8
        :endpos 12
        :delim
         (copy delimbracketcurly
          :pos 0)
        :children
         (textblocklist
          (textblock
           :text "c"
           :startpos 9
           :endpos 9)
          (textblock
           :text " "
           :startpos 10
           :endpos 10
           :delim
            (copy delimwhitespace
             :pos 0))
          (textblock
           :text "d"
           :startpos 11
           :endpos 11)))))))
 (textblock-parse
  (textblock
   :text "<{a,b},{c d}>"
   :delim delimtest1)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "<{a,b},{c d}>"
            :startpos 1
            :endpos 13
            :children
             (textblocklist
              (textblock
               :text "<{a,b},{c d}>"
               :startpos 1
               :endpos 13
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "{a,b}"
                  :startpos 2
                  :endpos 6
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}")
                  :children
                   (textblocklist
                    (textblock
                     :text "a"
                     :startpos 3
                     :endpos 3)
                    (textblock
                     :text ","
                     :startpos 4
                     :endpos 4
                     :delim
                      (delim
                       :name "delimcomma"
                       :starttext ","))
                    (textblock
                     :text "b"
                     :startpos 5
                     :endpos 5)))
                 (textblock
                  :text ","
                  :startpos 7
                  :endpos 7
                  :delim
                   (delim
                    :name "delimcomma"
                    :starttext ","))
                 (textblock
                  :text "{c d}"
                  :startpos 8
                  :endpos 12
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}")
                  :children
                   (textblocklist
                    (textblock
                     :text "c"
                     :startpos 9
                     :endpos 9)
                    (textblock
                     :text " "
                     :startpos 10
                     :endpos 10
                     :delim
                      (delim
                       :name "delimwhitespace"
                       :starttext ":whitespace"))
                    (textblock
                     :text "d"
                     :startpos 11
                     :endpos 11)))))))
          :actual
           (textblock
            :text "<{a,b},{c d}>"
            :startpos 1
            :endpos 13
            :children
             (textblocklist
              (textblock
               :text "<{a,b},{c d}>"
               :startpos 1
               :endpos 13
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "{a,b}"
                  :startpos 2
                  :endpos 6
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}")
                  :children
                   (textblocklist
                    (textblock
                     :text "a"
                     :startpos 3
                     :endpos 3)
                    (textblock
                     :text ","
                     :startpos 4
                     :endpos 4
                     :delim
                      (delim
                       :name "delimcomma"
                       :starttext ","))
                    (textblock
                     :text "b"
                     :startpos 5
                     :endpos 5)))
                 (textblock
                  :text ","
                  :startpos 7
                  :endpos 7
                  :delim
                   (delim
                    :name "delimcomma"
                    :starttext ","))
                 (textblock
                  :text "{c d}"
                  :startpos 8
                  :endpos 12
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}")
                  :children
                   (textblocklist
                    (textblock
                     :text "c"
                     :startpos 9
                     :endpos 9)
                    (textblock
                     :text " "
                     :startpos 10
                     :endpos 10
                     :delim
                      (delim
                       :name "delimwhitespace"
                       :starttext ":whitespace"))
                    (textblock
                     :text "d"
                     :startpos 11
                     :endpos 11)))))))))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock-parse-one"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (textblock
  :text "<a"
  :startpos 1
  :endpos 2
  :children
   (textblocklist
    (textblock
     :text "<a"
     :startpos 1
     :endpos 2
     :delim
      (copy delimbracketangle
       :delimlist vx/data/textblock/delimlisttest1)
     :children
      (textblocklist
       (textblock
        :text "a"
        :startpos 2
        :endpos 2))
     (msgblock
      (msg
       :code "closedelimmissing"
       :detail
        (delim
         :name "delimclose"
         :starttext ">")
       :severity 2))))
  (msgblock
   (msg
    :code "closedelimmissing"
    :detail
     (delim
      :name "delimclose"
      :starttext ">")
    :severity 2)))
 (textblock-parse-one
  (textblock
   :text "a"
   :startpos 2
   :endpos 2
   :delim
    (delim
     :delimlist vx/data/textblock/delimlisttest2)
   :close
    (copy delimclose
     :starttext ">")
   :parent
    (textblock
     :text "<a"
     :startpos 1
     :endpos 2
     :delim
      (copy delimbracketangle
       :delimlist vx/data/textblock/delimlisttest1)
     :parent
      (textblock
       :text "<a"
       :startpos 1
       :endpos 2)))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "<a"
            :startpos 1
            :endpos 2
            :children
             (textblocklist
              (textblock
               :text "<a"
               :startpos 1
               :endpos 2
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">"
                 :delimlist vx/data/textblock/delimlisttest1)
               :children
                (textblocklist
                 (textblock
                  :text "a"
                  :startpos 2
                  :endpos 2))
               (msgblock
                :msgs
                 (msglist
                  (msg
                   :code "closedelimmissing"
                   :detail
                    (delim
                     :name "delimclose"
                     :starttext ">")
                   :severity 2)))))
            (msgblock
             :msgs
              (msglist
               (msg
                :code "closedelimmissing"
                :detail
                 (delim
                  :name "delimclose"
                  :starttext ">")
                :severity 2))))
          :actual
           (textblock
            :text "<a"
            :startpos 1
            :endpos 2
            :children
             (textblocklist
              (textblock
               :text "<a"
               :startpos 1
               :endpos 2
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">"
                 :delimlist vx/data/textblock/delimlisttest1)
               :children
                (textblocklist
                 (textblock
                  :text "a"
                  :startpos 2
                  :endpos 2))
               (msgblock
                :msgs
                 (msglist
                  (msg
                   :code "closedelimmissing"
                   :detail
                    (delim
                     :name "delimclose"
                     :starttext ">")
                   :severity 2)))))
            (msgblock
             :msgs
              (msglist
               (msg
                :code "closedelimmissing"
                :detail
                 (delim
                  :name "delimclose"
                  :starttext ">")
                :severity 2))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "<{a,b},{c d}>"
  :startpos 1
  :endpos 13
  :delim delimtest1
  :parent
   (textblock
    :text "<{a,b},{c d}>"
    :startpos 1
    :endpos 13))
 (textblock-parse-one
  (textblock
   :text "<{a,b},{c d}>"
   :delim delimtest1)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "<{a,b},{c d}>"
            :startpos 1
            :endpos 13
            :delim vx/data/textblock/delimtest1
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13))
          :actual
           (textblock
            :text "<{a,b},{c d}>"
            :startpos 1
            :endpos 13
            :delim vx/data/textblock/delimtest1
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "{a,b},{c d}>"
  :startpos 2
  :endpos 13
  :delim
   (delim
    :delimlist delimlisttest2)
  :close
   (copy delimclose
    :starttext ">")
  :parent
   (textblock
    :text "<{a,b},{c d}>"
    :startpos 1
    :endpos 13
    :delim
     (copy delimbracketangle
      :delimlist delimlisttest1)
    :parent
     (textblock
      :text "<{a,b},{c d}>"
      :startpos 1
      :endpos 13)))
 (textblock-parse-one
  (textblock
   :text "<{a,b},{c d}>"
   :startpos 1
   :endpos 13
   :delim delimtest1
   :parent
    (textblock
     :text "<{a,b},{c d}>"
     :startpos 1
     :endpos 13))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "{a,b},{c d}>"
            :startpos 2
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest2)
            :close
             (delim
              :name "delimclose"
              :starttext ">")
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :delim
               (delim
                :name "delimbracketangle"
                :starttext "<"
                :endtext ">"
                :delimlist vx/data/textblock/delimlisttest1)
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13)))
          :actual
           (textblock
            :text "{a,b},{c d}>"
            :startpos 2
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest2)
            :close
             (delim
              :name "delimclose"
              :starttext ">")
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :delim
               (delim
                :name "delimbracketangle"
                :starttext "<"
                :endtext ">"
                :delimlist vx/data/textblock/delimlisttest1)
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13)))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "a,b},{c d}>"
  :startpos 3
  :endpos 13
  :delim
   (delim
    :delimlist delimlisttest3)
  :close
   (copy delimclose
    :starttext "}")
  :parent
   (textblock
    :text "{a,b},{c d}>"
    :startpos 2
    :endpos 13
    :delim
     (copy delimbracketcurly
      :delimlist delimlisttest2)
    :close
     (copy delimclose
      :starttext ">")
    :parent
     (textblock
      :text "<{a,b},{c d}>"
      :startpos 1
      :endpos 13
      :delim
       (copy delimbracketangle
        :delimlist delimlisttest1)
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13))))
 (textblock-parse-one
  (textblock
   :text "{a,b},{c d}>"
   :startpos 2
   :endpos 13
   :delim
    (delim
     :delimlist delimlisttest2)
   :close
    (copy delimclose
     :starttext ">")
   :parent
    (textblock
     :text "<{a,b},{c d}>"
     :startpos 1
     :endpos 13
     :delim
      (copy delimbracketangle
       :delimlist delimlisttest1)
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13)))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "a,b},{c d}>"
            :startpos 3
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest3)
            :close
             (delim
              :name "delimclose"
              :starttext "}")
            :parent
             (textblock
              :text "{a,b},{c d}>"
              :startpos 2
              :endpos 13
              :delim
               (delim
                :name "delimbracketcurly"
                :starttext "{"
                :endtext "}"
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">"
                  :delimlist vx/data/textblock/delimlisttest1)
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13))))
          :actual
           (textblock
            :text "a,b},{c d}>"
            :startpos 3
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest3)
            :close
             (delim
              :name "delimclose"
              :starttext "}")
            :parent
             (textblock
              :text "{a,b},{c d}>"
              :startpos 2
              :endpos 13
              :delim
               (delim
                :name "delimbracketcurly"
                :starttext "{"
                :endtext "}"
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">"
                  :delimlist vx/data/textblock/delimlisttest1)
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "a"
  :startpos 3
  :endpos 3
  :parent
   (textblock
    :text ","
    :startpos 4
    :endpos 4
    :delim
     (copy delimcomma
      :pos 0)
    :parent
     (textblock
      :text "b},{c d}>"
      :startpos 5
      :endpos 13
      :delim
       (delim
        :delimlist delimlisttest3)
      :close
       (copy delimclose
        :starttext "}")
      :parent
       (textblock
        :text "{a,b},{c d}>"
        :startpos 2
        :endpos 13
        :delim
         (copy delimbracketcurly
          :delimlist delimlisttest2)
        :close
         (copy delimclose
          :starttext ">")
        :parent
         (textblock
          :text "<{a,b},{c d}>"
          :startpos 1
          :endpos 13
          :delim
           (copy delimbracketangle
            :delimlist delimlisttest1)
          :parent
           (textblock
            :text "<{a,b},{c d}>"
            :startpos 1
            :endpos 13))))))
 (textblock-parse-one
  (textblock
   :text "a,b},{c d}>"
   :startpos 3
   :endpos 13
   :delim
    (delim
     :delimlist delimlisttest3)
   :close
    (copy delimclose
     :starttext "}")
   :parent
    (textblock
     :text "{a,b},{c d}>"
     :startpos 2
     :endpos 13
     :delim
      (copy delimbracketcurly
       :delimlist delimlisttest2)
     :close
      (copy delimclose
       :starttext ">")
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13
       :delim
        (copy delimbracketangle
         :delimlist delimlisttest1)
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "a"
            :startpos 3
            :endpos 3
            :parent
             (textblock
              :text ","
              :startpos 4
              :endpos 4
              :delim
               (delim
                :name "delimcomma"
                :starttext ",")
              :parent
               (textblock
                :text "b},{c d}>"
                :startpos 5
                :endpos 13
                :delim
                 (delim
                  :delimlist vx/data/textblock/delimlisttest3)
                :close
                 (delim
                  :name "delimclose"
                  :starttext "}")
                :parent
                 (textblock
                  :text "{a,b},{c d}>"
                  :startpos 2
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}"
                    :delimlist vx/data/textblock/delimlisttest2)
                  :close
                   (delim
                    :name "delimclose"
                    :starttext ">")
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13
                    :delim
                     (delim
                      :name "delimbracketangle"
                      :starttext "<"
                      :endtext ">"
                      :delimlist vx/data/textblock/delimlisttest1)
                    :parent
                     (textblock
                      :text "<{a,b},{c d}>"
                      :startpos 1
                      :endpos 13))))))
          :actual
           (textblock
            :text "a"
            :startpos 3
            :endpos 3
            :parent
             (textblock
              :text ","
              :startpos 4
              :endpos 4
              :delim
               (delim
                :name "delimcomma"
                :starttext ",")
              :parent
               (textblock
                :text "b},{c d}>"
                :startpos 5
                :endpos 13
                :delim
                 (delim
                  :delimlist vx/data/textblock/delimlisttest3)
                :close
                 (delim
                  :name "delimclose"
                  :starttext "}")
                :parent
                 (textblock
                  :text "{a,b},{c d}>"
                  :startpos 2
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}"
                    :delimlist vx/data/textblock/delimlisttest2)
                  :close
                   (delim
                    :name "delimclose"
                    :starttext ">")
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13
                    :delim
                     (delim
                      :name "delimbracketangle"
                      :starttext "<"
                      :endtext ">"
                      :delimlist vx/data/textblock/delimlisttest1)
                    :parent
                     (textblock
                      :text "<{a,b},{c d}>"
                      :startpos 1
                      :endpos 13))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text ","
  :startpos 4
  :endpos 4
  :delim
   (copy delimcomma
    :pos 0)
  :parent
   (textblock
    :text "b},{c d}>"
    :startpos 5
    :endpos 13
    :delim
     (delim
      :delimlist delimlisttest3)
    :close
     (copy delimclose
      :starttext "}")
    :parent
     (textblock
      :text "{a,b},{c d}>"
      :startpos 2
      :endpos 13
      :delim
       (copy delimbracketcurly
        :delimlist delimlisttest2)
      :close
       (copy delimclose
        :starttext ">")
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13
        :delim
         (copy delimbracketangle
          :delimlist delimlisttest1)
        :parent
         (textblock
          :text "<{a,b},{c d}>"
          :startpos 1
          :endpos 13))
      :children
       (textblocklist
        (textblock
         :text "a"
         :startpos 3
         :endpos 3)))))
 (textblock-parse-one
  (textblock
   :text "a"
   :startpos 3
   :endpos 3
   :parent
    (textblock
     :text ","
     :startpos 4
     :endpos 4
     :delim
      (copy delimcomma
       :pos 0)
     :parent
      (textblock
       :text "b},{c d}>"
       :startpos 5
       :endpos 13
       :delim
        (delim
         :delimlist delimlisttest3)
       :close
        (copy delimclose
         :starttext "}")
       :parent
        (textblock
         :text "{a,b},{c d}>"
         :startpos 2
         :endpos 13
         :delim
          (copy delimbracketcurly
           :delimlist delimlisttest2)
         :close
          (copy delimclose
           :starttext ">")
         :parent
          (textblock
           :text "<{a,b},{c d}>"
           :startpos 1
           :endpos 13
           :delim
            (copy delimbracketangle
             :delimlist delimlisttest1)
           :parent
            (textblock
             :text "<{a,b},{c d}>"
             :startpos 1
             :endpos 13))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text ","
            :startpos 4
            :endpos 4
            :delim
             (delim
              :name "delimcomma"
              :starttext ",")
            :parent
             (textblock
              :text "b},{c d}>"
              :startpos 5
              :endpos 13
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest3)
              :close
               (delim
                :name "delimclose"
                :starttext "}")
              :parent
               (textblock
                :text "{a,b},{c d}>"
                :startpos 2
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketcurly"
                  :starttext "{"
                  :endtext "}"
                  :delimlist vx/data/textblock/delimlisttest2)
                :close
                 (delim
                  :name "delimclose"
                  :starttext ">")
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">"
                    :delimlist vx/data/textblock/delimlisttest1)
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13))
                :children
                 (textblocklist
                  (textblock
                   :text "a"
                   :startpos 3
                   :endpos 3)))))
          :actual
           (textblock
            :text ","
            :startpos 4
            :endpos 4
            :delim
             (delim
              :name "delimcomma"
              :starttext ",")
            :parent
             (textblock
              :text "b},{c d}>"
              :startpos 5
              :endpos 13
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest3)
              :close
               (delim
                :name "delimclose"
                :starttext "}")
              :parent
               (textblock
                :text "{a,b},{c d}>"
                :startpos 2
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketcurly"
                  :starttext "{"
                  :endtext "}"
                  :delimlist vx/data/textblock/delimlisttest2)
                :close
                 (delim
                  :name "delimclose"
                  :starttext ">")
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">"
                    :delimlist vx/data/textblock/delimlisttest1)
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13))
                :children
                 (textblocklist
                  (textblock
                   :text "a"
                   :startpos 3
                   :endpos 3)))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "b},{c d}>"
  :startpos 5
  :endpos 13
  :delim
   (delim
    :delimlist delimlisttest3)
  :close
   (copy delimclose
    :starttext "}")
  :parent
   (textblock
    :text "{a,b},{c d}>"
    :startpos 2
    :endpos 13
    :delim
     (copy delimbracketcurly
      :delimlist delimlisttest2)
    :close
     (copy delimclose
      :starttext ">")
    :parent
     (textblock
      :text "<{a,b},{c d}>"
      :startpos 1
      :endpos 13
      :delim
       (copy delimbracketangle
        :delimlist delimlisttest1)
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13))
    :children
     (textblocklist
      (textblock
       :text "a"
       :startpos 3
       :endpos 3)
      (textblock
       :text ","
       :startpos 4
       :endpos 4
       :delim
        (copy delimcomma
         :pos 0)))))
 (textblock-parse-one
  (textblock
   :text ","
   :startpos 4
   :endpos 4
   :delim
    (copy delimcomma
     :pos 0)
   :parent
    (textblock
     :text "b},{c d}>"
     :startpos 5
     :endpos 13
     :delim
      (delim
       :delimlist delimlisttest3)
     :close
      (copy delimclose
       :starttext "}")
     :parent
      (textblock
       :text "{a,b},{c d}>"
       :startpos 2
       :endpos 13
       :delim
        (copy delimbracketcurly
         :delimlist delimlisttest2)
       :close
        (copy delimclose
         :starttext ">")
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13
         :delim
          (copy delimbracketangle
           :delimlist delimlisttest1)
         :parent
          (textblock
           :text "<{a,b},{c d}>"
           :startpos 1
           :endpos 13))
       :children
        (textblocklist
         (textblock
          :text "a"
          :startpos 3
          :endpos 3)))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "b},{c d}>"
            :startpos 5
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest3)
            :close
             (delim
              :name "delimclose"
              :starttext "}")
            :parent
             (textblock
              :text "{a,b},{c d}>"
              :startpos 2
              :endpos 13
              :delim
               (delim
                :name "delimbracketcurly"
                :starttext "{"
                :endtext "}"
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">"
                  :delimlist vx/data/textblock/delimlisttest1)
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13))
              :children
               (textblocklist
                (textblock
                 :text "a"
                 :startpos 3
                 :endpos 3)
                (textblock
                 :text ","
                 :startpos 4
                 :endpos 4
                 :delim
                  (delim
                   :name "delimcomma"
                   :starttext ",")))))
          :actual
           (textblock
            :text "b},{c d}>"
            :startpos 5
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest3)
            :close
             (delim
              :name "delimclose"
              :starttext "}")
            :parent
             (textblock
              :text "{a,b},{c d}>"
              :startpos 2
              :endpos 13
              :delim
               (delim
                :name "delimbracketcurly"
                :starttext "{"
                :endtext "}"
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">"
                  :delimlist vx/data/textblock/delimlisttest1)
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13))
              :children
               (textblocklist
                (textblock
                 :text "a"
                 :startpos 3
                 :endpos 3)
                (textblock
                 :text ","
                 :startpos 4
                 :endpos 4
                 :delim
                  (delim
                   :name "delimcomma"
                   :starttext ",")))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "b"
  :startpos 5
  :endpos 5
  :parent
   (textblock
    :text ",{c d}>"
    :startpos 7
    :endpos 13
    :delim
     (delim
      :delimlist delimlisttest2)
    :close
     (copy delimclose
      :starttext ">")
    :parent
     (textblock
      :text "{a,b}"
      :startpos 2
      :endpos 6
      :delim
       (copy delimbracketcurly
        :pos 0)
      :close delimclosing
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13
        :delim
         (copy delimbracketangle
          :delimlist delimlisttest1)
        :parent
         (textblock
          :text "<{a,b},{c d}>"
          :startpos 1
          :endpos 13))
      :children
       (textblocklist
        (textblock
         :text "a"
         :startpos 3
         :endpos 3)
        (textblock
         :text ","
         :startpos 4
         :endpos 4
         :delim
          (copy delimcomma
           :pos 0))))))
 (textblock-parse-one
  (textblock
   :text "b},{c d}>"
   :startpos 5
   :endpos 13
   :delim
    (delim
     :delimlist delimlisttest3)
   :close
    (copy delimclose
     :starttext "}")
   :parent
    (textblock
     :text "{a,b},{c d}>"
     :startpos 2
     :endpos 13
     :delim
      (copy delimbracketcurly
       :delimlist delimlisttest2)
     :close
      (copy delimclose
       :starttext ">")
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13
       :delim
        (copy delimbracketangle
         :delimlist delimlisttest1)
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13))
     :children
      (textblocklist
       (textblock
        :text "a"
        :startpos 3
        :endpos 3)
       (textblock
        :text ","
        :startpos 4
        :endpos 4
        :delim
         (copy delimcomma
          :pos 0)))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "b"
            :startpos 5
            :endpos 5
            :parent
             (textblock
              :text ",{c d}>"
              :startpos 7
              :endpos 13
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "{a,b}"
                :startpos 2
                :endpos 6
                :delim
                 (delim
                  :name "delimbracketcurly"
                  :starttext "{"
                  :endtext "}")
                :close vx/data/textblock/delimclosing
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">"
                    :delimlist vx/data/textblock/delimlisttest1)
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13))
                :children
                 (textblocklist
                  (textblock
                   :text "a"
                   :startpos 3
                   :endpos 3)
                  (textblock
                   :text ","
                   :startpos 4
                   :endpos 4
                   :delim
                    (delim
                     :name "delimcomma"
                     :starttext ","))))))
          :actual
           (textblock
            :text "b"
            :startpos 5
            :endpos 5
            :parent
             (textblock
              :text ",{c d}>"
              :startpos 7
              :endpos 13
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "{a,b}"
                :startpos 2
                :endpos 6
                :delim
                 (delim
                  :name "delimbracketcurly"
                  :starttext "{"
                  :endtext "}")
                :close vx/data/textblock/delimclosing
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">"
                    :delimlist vx/data/textblock/delimlisttest1)
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13))
                :children
                 (textblocklist
                  (textblock
                   :text "a"
                   :startpos 3
                   :endpos 3)
                  (textblock
                   :text ","
                   :startpos 4
                   :endpos 4
                   :delim
                    (delim
                     :name "delimcomma"
                     :starttext ","))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text ",{c d}>"
  :startpos 7
  :endpos 13
  :delim
   (delim
    :delimlist delimlisttest2)
  :close
   (copy delimclose
    :starttext ">")
  :parent
   (textblock
    :text "<{a,b},{c d}>"
    :startpos 1
    :endpos 13
    :delim
     (copy delimbracketangle
      :delimlist delimlisttest1)
    :parent
     (textblock
      :text "<{a,b},{c d}>"
      :startpos 1
      :endpos 13)
    :children
     (textblocklist
      (textblock
       :text "{a,b}"
       :startpos 2
       :endpos 6
       :delim
        (copy delimbracketcurly
         :pos 0)
       :children
        (textblocklist
         (textblock
          :text "a"
          :startpos 3
          :endpos 3)
         (textblock
          :text ","
          :startpos 4
          :endpos 4
          :delim
           (copy delimcomma
            :pos 0))
         (textblock
          :text "b"
          :startpos 5
          :endpos 5))))))
 (textblock-parse-one
  (textblock
   :text "b"
   :startpos 5
   :endpos 5
   :parent
    (textblock
     :text ",{c d}>"
     :startpos 7
     :endpos 13
     :delim
      (delim
       :delimlist delimlisttest2)
     :close
      (copy delimclose
       :starttext ">")
     :parent
      (textblock
       :text "{a,b}"
       :startpos 2
       :endpos 6
       :delim
        (copy delimbracketcurly
         :pos 0)
       :close delimclosing
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13
         :delim
          (copy delimbracketangle
           :delimlist delimlisttest1)
         :parent
          (textblock
           :text "<{a,b},{c d}>"
           :startpos 1
           :endpos 13))
       :children
        (textblocklist
         (textblock
          :text "a"
          :startpos 3
          :endpos 3)
         (textblock
          :text ","
          :startpos 4
          :endpos 4
          :delim
           (copy delimcomma
            :pos 0))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text ",{c d}>"
            :startpos 7
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest2)
            :close
             (delim
              :name "delimclose"
              :starttext ">")
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :delim
               (delim
                :name "delimbracketangle"
                :starttext "<"
                :endtext ">"
                :delimlist vx/data/textblock/delimlisttest1)
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13)
              :children
               (textblocklist
                (textblock
                 :text "{a,b}"
                 :startpos 2
                 :endpos 6
                 :delim
                  (delim
                   :name "delimbracketcurly"
                   :starttext "{"
                   :endtext "}")
                 :children
                  (textblocklist
                   (textblock
                    :text "a"
                    :startpos 3
                    :endpos 3)
                   (textblock
                    :text ","
                    :startpos 4
                    :endpos 4
                    :delim
                     (delim
                      :name "delimcomma"
                      :starttext ","))
                   (textblock
                    :text "b"
                    :startpos 5
                    :endpos 5))))))
          :actual
           (textblock
            :text ",{c d}>"
            :startpos 7
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest2)
            :close
             (delim
              :name "delimclose"
              :starttext ">")
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :delim
               (delim
                :name "delimbracketangle"
                :starttext "<"
                :endtext ">"
                :delimlist vx/data/textblock/delimlisttest1)
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13)
              :children
               (textblocklist
                (textblock
                 :text "{a,b}"
                 :startpos 2
                 :endpos 6
                 :delim
                  (delim
                   :name "delimbracketcurly"
                   :starttext "{"
                   :endtext "}")
                 :children
                  (textblocklist
                   (textblock
                    :text "a"
                    :startpos 3
                    :endpos 3)
                   (textblock
                    :text ","
                    :startpos 4
                    :endpos 4
                    :delim
                     (delim
                      :name "delimcomma"
                      :starttext ","))
                   (textblock
                    :text "b"
                    :startpos 5
                    :endpos 5))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :startpos 7
  :endpos 7
  :parent
   (textblock
    :text ","
    :startpos 7
    :endpos 7
    :delim
     (copy delimcomma
      :pos 0)
    :parent
     (textblock
      :text "{c d}>"
      :startpos 8
      :endpos 13
      :delim
       (delim
        :delimlist delimlisttest2)
      :close
       (copy delimclose
        :starttext ">")
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13
        :delim
         (copy delimbracketangle
          :delimlist delimlisttest1)
        :parent
         (textblock
          :text "<{a,b},{c d}>"
          :startpos 1
          :endpos 13)
        :children
         (textblocklist
          (textblock
           :text "{a,b}"
           :startpos 2
           :endpos 6
           :delim
            (copy delimbracketcurly
             :pos 0)
           :children
            (textblocklist
             (textblock
              :text "a"
              :startpos 3
              :endpos 3)
             (textblock
              :text ","
              :startpos 4
              :endpos 4
              :delim
               (copy delimcomma
                :pos 0))
             (textblock
              :text "b"
              :startpos 5
              :endpos 5))))))))
 (textblock-parse-one
  (textblock
   :text ",{c d}>"
   :startpos 7
   :endpos 13
   :delim
    (delim
     :delimlist delimlisttest2)
   :close
    (copy delimclose
     :starttext ">")
   :parent
    (textblock
     :text "<{a,b},{c d}>"
     :startpos 1
     :endpos 13
     :delim
      (copy delimbracketangle
       :delimlist delimlisttest1)
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13)
     :children
      (textblocklist
       (textblock
        :text "{a,b}"
        :startpos 2
        :endpos 6
        :delim
         (copy delimbracketcurly
          :pos 0)
        :children
         (textblocklist
          (textblock
           :text "a"
           :startpos 3
           :endpos 3)
          (textblock
           :text ","
           :startpos 4
           :endpos 4
           :delim
            (copy delimcomma
             :pos 0))
          (textblock
           :text "b"
           :startpos 5
           :endpos 5))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :startpos 7
            :endpos 7
            :parent
             (textblock
              :text ","
              :startpos 7
              :endpos 7
              :delim
               (delim
                :name "delimcomma"
                :starttext ",")
              :parent
               (textblock
                :text "{c d}>"
                :startpos 8
                :endpos 13
                :delim
                 (delim
                  :delimlist vx/data/textblock/delimlisttest2)
                :close
                 (delim
                  :name "delimclose"
                  :starttext ">")
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">"
                    :delimlist vx/data/textblock/delimlisttest1)
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13)
                  :children
                   (textblocklist
                    (textblock
                     :text "{a,b}"
                     :startpos 2
                     :endpos 6
                     :delim
                      (delim
                       :name "delimbracketcurly"
                       :starttext "{"
                       :endtext "}")
                     :children
                      (textblocklist
                       (textblock
                        :text "a"
                        :startpos 3
                        :endpos 3)
                       (textblock
                        :text ","
                        :startpos 4
                        :endpos 4
                        :delim
                         (delim
                          :name "delimcomma"
                          :starttext ","))
                       (textblock
                        :text "b"
                        :startpos 5
                        :endpos 5))))))))
          :actual
           (textblock
            :startpos 7
            :endpos 7
            :parent
             (textblock
              :text ","
              :startpos 7
              :endpos 7
              :delim
               (delim
                :name "delimcomma"
                :starttext ",")
              :parent
               (textblock
                :text "{c d}>"
                :startpos 8
                :endpos 13
                :delim
                 (delim
                  :delimlist vx/data/textblock/delimlisttest2)
                :close
                 (delim
                  :name "delimclose"
                  :starttext ">")
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">"
                    :delimlist vx/data/textblock/delimlisttest1)
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13)
                  :children
                   (textblocklist
                    (textblock
                     :text "{a,b}"
                     :startpos 2
                     :endpos 6
                     :delim
                      (delim
                       :name "delimbracketcurly"
                       :starttext "{"
                       :endtext "}")
                     :children
                      (textblocklist
                       (textblock
                        :text "a"
                        :startpos 3
                        :endpos 3)
                       (textblock
                        :text ","
                        :startpos 4
                        :endpos 4
                        :delim
                         (delim
                          :name "delimcomma"
                          :starttext ","))
                       (textblock
                        :text "b"
                        :startpos 5
                        :endpos 5))))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text ","
  :startpos 7
  :endpos 7
  :delim
   (copy delimcomma
    :pos 0)
  :parent
   (textblock
    :text "{c d}>"
    :startpos 8
    :endpos 13
    :delim
     (delim
      :delimlist delimlisttest2)
    :close
     (copy delimclose
      :starttext ">")
    :parent
     (textblock
      :text "<{a,b},{c d}>"
      :startpos 1
      :endpos 13
      :delim
       (copy delimbracketangle
        :delimlist delimlisttest1)
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13)
      :children
       (textblocklist
        (textblock
         :text "{a,b}"
         :startpos 2
         :endpos 6
         :delim
          (copy delimbracketcurly
           :pos 0)
         :children
          (textblocklist
           (textblock
            :text "a"
            :startpos 3
            :endpos 3)
           (textblock
            :text ","
            :startpos 4
            :endpos 4
            :delim
             (copy delimcomma
              :pos 0))
           (textblock
            :text "b"
            :startpos 5
            :endpos 5)))))))
 (textblock-parse-one
  (textblock
   :startpos 7
   :endpos 7
   :parent
    (textblock
     :text ","
     :startpos 7
     :endpos 7
     :delim
      (copy delimcomma
       :pos 0)
     :parent
      (textblock
       :text "{c d}>"
       :startpos 8
       :endpos 13
       :delim
        (delim
         :delimlist delimlisttest2)
       :close
        (copy delimclose
         :starttext ">")
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13
         :delim
          (copy delimbracketangle
           :delimlist delimlisttest1)
         :parent
          (textblock
           :text "<{a,b},{c d}>"
           :startpos 1
           :endpos 13)
         :children
          (textblocklist
           (textblock
            :text "{a,b}"
            :startpos 2
            :endpos 6
            :delim
             (copy delimbracketcurly
              :pos 0)
            :children
             (textblocklist
              (textblock
               :text "a"
               :startpos 3
               :endpos 3)
              (textblock
               :text ","
               :startpos 4
               :endpos 4
               :delim
                (copy delimcomma
                 :pos 0))
              (textblock
               :text "b"
               :startpos 5
               :endpos 5))))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text ","
            :startpos 7
            :endpos 7
            :delim
             (delim
              :name "delimcomma"
              :starttext ",")
            :parent
             (textblock
              :text "{c d}>"
              :startpos 8
              :endpos 13
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">"
                  :delimlist vx/data/textblock/delimlisttest1)
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13)
                :children
                 (textblocklist
                  (textblock
                   :text "{a,b}"
                   :startpos 2
                   :endpos 6
                   :delim
                    (delim
                     :name "delimbracketcurly"
                     :starttext "{"
                     :endtext "}")
                   :children
                    (textblocklist
                     (textblock
                      :text "a"
                      :startpos 3
                      :endpos 3)
                     (textblock
                      :text ","
                      :startpos 4
                      :endpos 4
                      :delim
                       (delim
                        :name "delimcomma"
                        :starttext ","))
                     (textblock
                      :text "b"
                      :startpos 5
                      :endpos 5)))))))
          :actual
           (textblock
            :text ","
            :startpos 7
            :endpos 7
            :delim
             (delim
              :name "delimcomma"
              :starttext ",")
            :parent
             (textblock
              :text "{c d}>"
              :startpos 8
              :endpos 13
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">"
                  :delimlist vx/data/textblock/delimlisttest1)
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13)
                :children
                 (textblocklist
                  (textblock
                   :text "{a,b}"
                   :startpos 2
                   :endpos 6
                   :delim
                    (delim
                     :name "delimbracketcurly"
                     :starttext "{"
                     :endtext "}")
                   :children
                    (textblocklist
                     (textblock
                      :text "a"
                      :startpos 3
                      :endpos 3)
                     (textblock
                      :text ","
                      :startpos 4
                      :endpos 4
                      :delim
                       (delim
                        :name "delimcomma"
                        :starttext ","))
                     (textblock
                      :text "b"
                      :startpos 5
                      :endpos 5)))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "{c d}>"
  :startpos 8
  :endpos 13
  :delim
   (delim
    :delimlist delimlisttest2)
  :close
   (copy delimclose
    :starttext ">")
  :parent
   (textblock
    :text "<{a,b},{c d}>"
    :startpos 1
    :endpos 13
    :delim
     (copy delimbracketangle
      :delimlist delimlisttest1)
    :parent
     (textblock
      :text "<{a,b},{c d}>"
      :startpos 1
      :endpos 13)
    :children
     (textblocklist
      (textblock
       :text "{a,b}"
       :startpos 2
       :endpos 6
       :delim
        (copy delimbracketcurly
         :pos 0)
       :children
        (textblocklist
         (textblock
          :text "a"
          :startpos 3
          :endpos 3)
         (textblock
          :text ","
          :startpos 4
          :endpos 4
          :delim
           (copy delimcomma
            :pos 0))
         (textblock
          :text "b"
          :startpos 5
          :endpos 5)))
      (textblock
       :text ","
       :startpos 7
       :endpos 7
       :delim
        (copy delimcomma
         :pos 0)))))
 (textblock-parse-one
  (textblock
   :text ","
   :startpos 7
   :endpos 7
   :delim
    (copy delimcomma
     :pos 0)
   :parent
    (textblock
     :text "{c d}>"
     :startpos 8
     :endpos 13
     :delim
      (delim
       :delimlist delimlisttest2)
       :close
        (copy delimclose
         :starttext ">")
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13
       :delim
        (copy delimbracketangle
         :delimlist delimlisttest1)
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13)
       :children
        (textblocklist
         (textblock
          :text "{a,b}"
          :startpos 2
          :endpos 6
          :delim
           (copy delimbracketcurly
            :pos 0)
          :children
           (textblocklist
            (textblock
             :text "a"
             :startpos 3
             :endpos 3)
            (textblock
             :text ","
             :startpos 4
             :endpos 4
             :delim
              (copy delimcomma
               :pos 0))
            (textblock
             :text "b"
             :startpos 5
             :endpos 5)))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "{c d}>"
            :startpos 8
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest2)
            :close
             (delim
              :name "delimclose"
              :starttext ">")
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :delim
               (delim
                :name "delimbracketangle"
                :starttext "<"
                :endtext ">"
                :delimlist vx/data/textblock/delimlisttest1)
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13)
              :children
               (textblocklist
                (textblock
                 :text "{a,b}"
                 :startpos 2
                 :endpos 6
                 :delim
                  (delim
                   :name "delimbracketcurly"
                   :starttext "{"
                   :endtext "}")
                 :children
                  (textblocklist
                   (textblock
                    :text "a"
                    :startpos 3
                    :endpos 3)
                   (textblock
                    :text ","
                    :startpos 4
                    :endpos 4
                    :delim
                     (delim
                      :name "delimcomma"
                      :starttext ","))
                   (textblock
                    :text "b"
                    :startpos 5
                    :endpos 5)))
                (textblock
                 :text ","
                 :startpos 7
                 :endpos 7
                 :delim
                  (delim
                   :name "delimcomma"
                   :starttext ",")))))
          :actual
           (textblock
            :text "{c d}>"
            :startpos 8
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest2)
            :close
             (delim
              :name "delimclose"
              :starttext ">")
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :delim
               (delim
                :name "delimbracketangle"
                :starttext "<"
                :endtext ">"
                :delimlist vx/data/textblock/delimlisttest1)
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13)
              :children
               (textblocklist
                (textblock
                 :text "{a,b}"
                 :startpos 2
                 :endpos 6
                 :delim
                  (delim
                   :name "delimbracketcurly"
                   :starttext "{"
                   :endtext "}")
                 :children
                  (textblocklist
                   (textblock
                    :text "a"
                    :startpos 3
                    :endpos 3)
                   (textblock
                    :text ","
                    :startpos 4
                    :endpos 4
                    :delim
                     (delim
                      :name "delimcomma"
                      :starttext ","))
                   (textblock
                    :text "b"
                    :startpos 5
                    :endpos 5)))
                (textblock
                 :text ","
                 :startpos 7
                 :endpos 7
                 :delim
                  (delim
                   :name "delimcomma"
                   :starttext ",")))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "c d}>"
  :startpos 9
  :endpos 13
  :delim
   (delim
    :delimlist delimlisttest3)
  :close
   (copy delimclose
    :starttext "}")
    :parent
     (textblock
      :text "{c d}>"
      :startpos 8
      :endpos 13
      :delim
       (copy delimbracketcurly
        :delimlist delimlisttest2)
      :close
       (copy delimclose
        :starttext ">")
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13
        :delim
         (copy delimbracketangle
          :delimlist delimlisttest1)
        :parent
         (textblock
          :text "<{a,b},{c d}>"
          :startpos 1
          :endpos 13)
        :children
         (textblocklist
          (textblock
           :text "{a,b}"
           :startpos 2
           :endpos 6
           :delim
            (copy delimbracketcurly
             :pos 0)
           :children
            (textblocklist
             (textblock
              :text "a"
              :startpos 3
              :endpos 3)
             (textblock
              :text ","
              :startpos 4
              :endpos 4
              :delim
               (copy delimcomma
                :pos 0))
             (textblock
              :text "b"
              :startpos 5
              :endpos 5)))
          (textblock
           :text ","
           :startpos 7
           :endpos 7
           :delim
            (copy delimcomma
             :pos 0))))))
 (textblock-parse-one
  (textblock
   :text "{c d}>"
   :startpos 8
   :endpos 13
   :delim
    (delim
     :delimlist delimlisttest2)
   :close
    (copy delimclose
     :starttext ">")
   :parent
    (textblock
     :text "<{a,b},{c d}>"
     :startpos 1
     :endpos 13
     :delim
      (copy delimbracketangle
       :delimlist delimlisttest1)
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13)
     :children
      (textblocklist
       (textblock
        :text "{a,b}"
        :startpos 2
        :endpos 6
        :delim
         (copy delimbracketcurly
          :pos 0)
        :children
         (textblocklist
          (textblock
           :text "a"
           :startpos 3
           :endpos 3)
          (textblock
           :text ","
           :startpos 4
           :endpos 4
           :delim
            (copy delimcomma
             :pos 0))
          (textblock
           :text "b"
           :startpos 5
           :endpos 5)))
       (textblock
        :text ","
        :startpos 7
        :endpos 7
        :delim
         (copy delimcomma
          :pos 0)))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "c d}>"
            :startpos 9
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest3)
            :close
             (delim
              :name "delimclose"
              :starttext "}")
            :parent
             (textblock
              :text "{c d}>"
              :startpos 8
              :endpos 13
              :delim
               (delim
                :name "delimbracketcurly"
                :starttext "{"
                :endtext "}"
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">"
                  :delimlist vx/data/textblock/delimlisttest1)
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13)
                :children
                 (textblocklist
                  (textblock
                   :text "{a,b}"
                   :startpos 2
                   :endpos 6
                   :delim
                    (delim
                     :name "delimbracketcurly"
                     :starttext "{"
                     :endtext "}")
                   :children
                    (textblocklist
                     (textblock
                      :text "a"
                      :startpos 3
                      :endpos 3)
                     (textblock
                      :text ","
                      :startpos 4
                      :endpos 4
                      :delim
                       (delim
                        :name "delimcomma"
                        :starttext ","))
                     (textblock
                      :text "b"
                      :startpos 5
                      :endpos 5)))
                  (textblock
                   :text ","
                   :startpos 7
                   :endpos 7
                   :delim
                    (delim
                     :name "delimcomma"
                     :starttext ","))))))
          :actual
           (textblock
            :text "c d}>"
            :startpos 9
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest3)
            :close
             (delim
              :name "delimclose"
              :starttext "}")
            :parent
             (textblock
              :text "{c d}>"
              :startpos 8
              :endpos 13
              :delim
               (delim
                :name "delimbracketcurly"
                :starttext "{"
                :endtext "}"
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">"
                  :delimlist vx/data/textblock/delimlisttest1)
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13)
                :children
                 (textblocklist
                  (textblock
                   :text "{a,b}"
                   :startpos 2
                   :endpos 6
                   :delim
                    (delim
                     :name "delimbracketcurly"
                     :starttext "{"
                     :endtext "}")
                   :children
                    (textblocklist
                     (textblock
                      :text "a"
                      :startpos 3
                      :endpos 3)
                     (textblock
                      :text ","
                      :startpos 4
                      :endpos 4
                      :delim
                       (delim
                        :name "delimcomma"
                        :starttext ","))
                     (textblock
                      :text "b"
                      :startpos 5
                      :endpos 5)))
                  (textblock
                   :text ","
                   :startpos 7
                   :endpos 7
                   :delim
                    (delim
                     :name "delimcomma"
                     :starttext ","))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "c"
  :startpos 9
  :endpos 9
  :parent
   (textblock
    :text " "
    :startpos 10
    :endpos 10
    :delim
     (copy delimwhitespace
      :pos 0)
    :parent
     (textblock
      :text "d}>"
      :startpos 11
      :endpos 13
      :delim
       (delim
        :delimlist delimlisttest3)
      :close
       (copy delimclose
        :starttext "}")
      :parent
       (textblock
        :text "{c d}>"
        :startpos 8
        :endpos 13
        :delim
         (copy delimbracketcurly
          :delimlist delimlisttest2)
        :close
         (copy delimclose
          :starttext ">")
        :parent
         (textblock
          :text "<{a,b},{c d}>"
          :startpos 1
          :endpos 13
          :delim
           (copy delimbracketangle
            :delimlist delimlisttest1)
          :parent
           (textblock
            :text "<{a,b},{c d}>"
            :startpos 1
            :endpos 13)
          :children
           (textblocklist
            (textblock
             :text "{a,b}"
             :startpos 2
             :endpos 6
             :delim
              (copy delimbracketcurly
               :pos 0)
             :children
              (textblocklist
               (textblock
                :text "a"
                :startpos 3
                :endpos 3)
               (textblock
                :text ","
                :startpos 4
                :endpos 4
                :delim
                 (copy delimcomma
                  :pos 0))
               (textblock
                :text "b"
                :startpos 5
                :endpos 5)))
            (textblock
             :text ","
             :startpos 7
             :endpos 7
             :delim
              (copy delimcomma
               :pos 0))))))))
 (textblock-parse-one
  (textblock
   :text "c d}>"
   :startpos 9
   :endpos 13
   :delim
    (delim
     :delimlist delimlisttest3)
     :close
      (copy delimclose
       :starttext "}")
     :parent
      (textblock
       :text "{c d}>"
       :startpos 8
       :endpos 13
       :delim
        (copy delimbracketcurly
         :delimlist delimlisttest2)
       :close
        (copy delimclose
         :starttext ">")
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13
         :delim
          (copy delimbracketangle
           :delimlist delimlisttest1)
         :parent
          (textblock
           :text "<{a,b},{c d}>"
           :startpos 1
           :endpos 13)
         :children
          (textblocklist
           (textblock
            :text "{a,b}"
            :startpos 2
            :endpos 6
            :delim
             (copy delimbracketcurly
              :pos 0)
            :children
             (textblocklist
              (textblock
               :text "a"
               :startpos 3
               :endpos 3)
              (textblock
               :text ","
               :startpos 4
               :endpos 4
               :delim
                (copy delimcomma
                 :pos 0))
              (textblock
               :text "b"
               :startpos 5
               :endpos 5)))
           (textblock
            :text ","
            :startpos 7
            :endpos 7
            :delim
             (copy delimcomma
              :pos 0))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "c"
            :startpos 9
            :endpos 9
            :parent
             (textblock
              :text " "
              :startpos 10
              :endpos 10
              :delim
               (delim
                :name "delimwhitespace"
                :starttext ":whitespace")
              :parent
               (textblock
                :text "d}>"
                :startpos 11
                :endpos 13
                :delim
                 (delim
                  :delimlist vx/data/textblock/delimlisttest3)
                :close
                 (delim
                  :name "delimclose"
                  :starttext "}")
                :parent
                 (textblock
                  :text "{c d}>"
                  :startpos 8
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}"
                    :delimlist vx/data/textblock/delimlisttest2)
                  :close
                   (delim
                    :name "delimclose"
                    :starttext ">")
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13
                    :delim
                     (delim
                      :name "delimbracketangle"
                      :starttext "<"
                      :endtext ">"
                      :delimlist vx/data/textblock/delimlisttest1)
                    :parent
                     (textblock
                      :text "<{a,b},{c d}>"
                      :startpos 1
                      :endpos 13)
                    :children
                     (textblocklist
                      (textblock
                       :text "{a,b}"
                       :startpos 2
                       :endpos 6
                       :delim
                        (delim
                         :name "delimbracketcurly"
                         :starttext "{"
                         :endtext "}")
                       :children
                        (textblocklist
                         (textblock
                          :text "a"
                          :startpos 3
                          :endpos 3)
                         (textblock
                          :text ","
                          :startpos 4
                          :endpos 4
                          :delim
                           (delim
                            :name "delimcomma"
                            :starttext ","))
                         (textblock
                          :text "b"
                          :startpos 5
                          :endpos 5)))
                      (textblock
                       :text ","
                       :startpos 7
                       :endpos 7
                       :delim
                        (delim
                         :name "delimcomma"
                         :starttext ","))))))))
          :actual
           (textblock
            :text "c"
            :startpos 9
            :endpos 9
            :parent
             (textblock
              :text " "
              :startpos 10
              :endpos 10
              :delim
               (delim
                :name "delimwhitespace"
                :starttext ":whitespace")
              :parent
               (textblock
                :text "d}>"
                :startpos 11
                :endpos 13
                :delim
                 (delim
                  :delimlist vx/data/textblock/delimlisttest3)
                :close
                 (delim
                  :name "delimclose"
                  :starttext "}")
                :parent
                 (textblock
                  :text "{c d}>"
                  :startpos 8
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}"
                    :delimlist vx/data/textblock/delimlisttest2)
                  :close
                   (delim
                    :name "delimclose"
                    :starttext ">")
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13
                    :delim
                     (delim
                      :name "delimbracketangle"
                      :starttext "<"
                      :endtext ">"
                      :delimlist vx/data/textblock/delimlisttest1)
                    :parent
                     (textblock
                      :text "<{a,b},{c d}>"
                      :startpos 1
                      :endpos 13)
                    :children
                     (textblocklist
                      (textblock
                       :text "{a,b}"
                       :startpos 2
                       :endpos 6
                       :delim
                        (delim
                         :name "delimbracketcurly"
                         :starttext "{"
                         :endtext "}")
                       :children
                        (textblocklist
                         (textblock
                          :text "a"
                          :startpos 3
                          :endpos 3)
                         (textblock
                          :text ","
                          :startpos 4
                          :endpos 4
                          :delim
                           (delim
                            :name "delimcomma"
                            :starttext ","))
                         (textblock
                          :text "b"
                          :startpos 5
                          :endpos 5)))
                      (textblock
                       :text ","
                       :startpos 7
                       :endpos 7
                       :delim
                        (delim
                         :name "delimcomma"
                         :starttext ","))))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text " "
  :startpos 10
  :endpos 10
  :delim
   (copy delimwhitespace
    :pos 0)
  :parent
   (textblock
    :text "d}>"
    :startpos 11
    :endpos 13
    :delim
     (delim
      :delimlist delimlisttest3)
    :close
     (copy delimclose
      :starttext "}")
    :parent
     (textblock
      :text "{c d}>"
      :startpos 8
      :endpos 13
      :delim
       (copy delimbracketcurly
       :delimlist delimlisttest2)
      :close
       (copy delimclose
        :starttext ">")
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13
        :delim
         (copy delimbracketangle
          :delimlist delimlisttest1)
        :parent
         (textblock
          :text "<{a,b},{c d}>"
          :startpos 1
          :endpos 13)
          :children
           (textblocklist
            (textblock
             :text "{a,b}"
             :startpos 2
             :endpos 6
             :delim
              (copy delimbracketcurly
               :pos 0)
             :children
              (textblocklist
               (textblock
                :text "a"
                :startpos 3
                :endpos 3)
               (textblock
                :text ","
                :startpos 4
                :endpos 4
                :delim
                 (copy delimcomma
                  :pos 0))
               (textblock
                :text "b"
                :startpos 5
                :endpos 5)))
               (textblock
                :text ","
                :startpos 7
                :endpos 7
                :delim
                 (copy delimcomma
                  :pos 0))))
      :children
       (textblocklist
        (textblock
         :text "c"
         :startpos 9
         :endpos 9)))))
 (textblock-parse-one
  (textblock
   :text "c"
   :startpos 9
   :endpos 9
   :parent
    (textblock
     :text " "
     :startpos 10
     :endpos 10
     :delim
      (copy delimwhitespace
       :pos 0)
     :parent
      (textblock
       :text "d}>"
       :startpos 11
       :endpos 13
       :delim
        (delim
         :delimlist delimlisttest3)
       :close
        (copy delimclose
         :starttext "}")
       :parent
        (textblock
         :text "{c d}>"
         :startpos 8
         :endpos 13
         :delim
          (copy delimbracketcurly
           :delimlist delimlisttest2)
         :close
          (copy delimclose
           :starttext ">")
         :parent
          (textblock
           :text "<{a,b},{c d}>"
           :startpos 1
           :endpos 13
           :delim
            (copy delimbracketangle
             :delimlist delimlisttest1)
           :parent
            (textblock
             :text "<{a,b},{c d}>"
             :startpos 1
             :endpos 13)
           :children
            (textblocklist
             (textblock
              :text "{a,b}"
              :startpos 2
              :endpos 6
              :delim
               (copy delimbracketcurly
                :pos 0)
              :children
               (textblocklist
                (textblock
                 :text "a"
                 :startpos 3
                 :endpos 3)
                (textblock
                 :text ","
                 :startpos 4
                 :endpos 4
                 :delim
                  (copy delimcomma
                   :pos 0))
                (textblock
                 :text "b"
                 :startpos 5
                 :endpos 5)))
             (textblock
              :text ","
              :startpos 7
              :endpos 7
              :delim
               (copy delimcomma
                :pos 0))))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text " "
            :startpos 10
            :endpos 10
            :delim
             (delim
              :name "delimwhitespace"
              :starttext ":whitespace")
            :parent
             (textblock
              :text "d}>"
              :startpos 11
              :endpos 13
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest3)
              :close
               (delim
                :name "delimclose"
                :starttext "}")
              :parent
               (textblock
                :text "{c d}>"
                :startpos 8
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketcurly"
                  :starttext "{"
                  :endtext "}"
                  :delimlist vx/data/textblock/delimlisttest2)
                :close
                 (delim
                  :name "delimclose"
                  :starttext ">")
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">"
                    :delimlist vx/data/textblock/delimlisttest1)
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13)
                  :children
                   (textblocklist
                    (textblock
                     :text "{a,b}"
                     :startpos 2
                     :endpos 6
                     :delim
                      (delim
                       :name "delimbracketcurly"
                       :starttext "{"
                       :endtext "}")
                     :children
                      (textblocklist
                       (textblock
                        :text "a"
                        :startpos 3
                        :endpos 3)
                       (textblock
                        :text ","
                        :startpos 4
                        :endpos 4
                        :delim
                         (delim
                          :name "delimcomma"
                          :starttext ","))
                       (textblock
                        :text "b"
                        :startpos 5
                        :endpos 5)))
                    (textblock
                     :text ","
                     :startpos 7
                     :endpos 7
                     :delim
                      (delim
                       :name "delimcomma"
                       :starttext ","))))
                :children
                 (textblocklist
                  (textblock
                   :text "c"
                   :startpos 9
                   :endpos 9)))))
          :actual
           (textblock
            :text " "
            :startpos 10
            :endpos 10
            :delim
             (delim
              :name "delimwhitespace"
              :starttext ":whitespace")
            :parent
             (textblock
              :text "d}>"
              :startpos 11
              :endpos 13
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest3)
              :close
               (delim
                :name "delimclose"
                :starttext "}")
              :parent
               (textblock
                :text "{c d}>"
                :startpos 8
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketcurly"
                  :starttext "{"
                  :endtext "}"
                  :delimlist vx/data/textblock/delimlisttest2)
                :close
                 (delim
                  :name "delimclose"
                  :starttext ">")
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">"
                    :delimlist vx/data/textblock/delimlisttest1)
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13)
                  :children
                   (textblocklist
                    (textblock
                     :text "{a,b}"
                     :startpos 2
                     :endpos 6
                     :delim
                      (delim
                       :name "delimbracketcurly"
                       :starttext "{"
                       :endtext "}")
                     :children
                      (textblocklist
                       (textblock
                        :text "a"
                        :startpos 3
                        :endpos 3)
                       (textblock
                        :text ","
                        :startpos 4
                        :endpos 4
                        :delim
                         (delim
                          :name "delimcomma"
                          :starttext ","))
                       (textblock
                        :text "b"
                        :startpos 5
                        :endpos 5)))
                    (textblock
                     :text ","
                     :startpos 7
                     :endpos 7
                     :delim
                      (delim
                       :name "delimcomma"
                       :starttext ","))))
                :children
                 (textblocklist
                  (textblock
                   :text "c"
                   :startpos 9
                   :endpos 9)))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "d}>"
  :startpos 11
  :endpos 13
  :delim
   (delim
    :delimlist delimlisttest3)
  :close
   (copy delimclose
    :starttext "}")
  :parent
   (textblock
    :text "{c d}>"
    :startpos 8
    :endpos 13
    :delim
     (copy delimbracketcurly
      :delimlist delimlisttest2)
    :close
     (copy delimclose
      :starttext ">")
    :parent
     (textblock
      :text "<{a,b},{c d}>"
      :startpos 1
      :endpos 13
      :delim
       (delim
        :name "delimbracketangle"
        :starttext "<"
        :endtext ">"
        :delimlist delimlisttest1)
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13)
      :children
       (textblocklist
        (textblock
         :text "{a,b}"
         :startpos 2
         :endpos 6
         :delim
          (copy delimbracketcurly
           :pos 0)
         :children
          (textblocklist
           (textblock
            :text "a"
            :startpos 3
            :endpos 3)
             (textblock
              :text ","
              :startpos 4
              :endpos 4
              :delim
               (copy delimcomma
                :pos 0))
           (textblock
            :text "b"
            :startpos 5
            :endpos 5)))
        (textblock
         :text ","
         :startpos 7
         :endpos 7
         :delim
          (copy delimcomma
           :pos 0))))
    :children
     (textblocklist
      (textblock
       :text "c"
       :startpos 9
       :endpos 9)
      (textblock
       :text " "
       :startpos 10
       :endpos 10
       :delim
        (copy delimwhitespace
         :pos 0)))))
 (textblock-parse-one
  (textblock
   :text " "
   :startpos 10
   :endpos 10
   :delim
    (copy delimwhitespace
     :pos 0)
   :parent
    (textblock
     :text "d}>"
     :startpos 11
     :endpos 13
     :delim
      (delim
       :delimlist delimlisttest3)
     :close
      (copy delimclose
       :starttext "}")
     :parent
      (textblock
       :text "{c d}>"
       :startpos 8
       :endpos 13
       :delim
        (copy delimbracketcurly
        :delimlist delimlisttest2)
       :close
        (copy delimclose
         :starttext ">")
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13
         :delim
          (copy delimbracketangle
           :delimlist delimlisttest1)
         :parent
          (textblock
           :text "<{a,b},{c d}>"
           :startpos 1
           :endpos 13)
         :children
          (textblocklist
           (textblock
            :text "{a,b}"
            :startpos 2
            :endpos 6
            :delim
             (copy delimbracketcurly
              :pos 0)
            :children
             (textblocklist
              (textblock
               :text "a"
               :startpos 3
               :endpos 3)
              (textblock
               :text ","
               :startpos 4
               :endpos 4
               :delim
                (copy delimcomma
                 :pos 0))
              (textblock
               :text "b"
               :startpos 5
               :endpos 5)))
              (textblock
               :text ","
               :startpos 7
               :endpos 7
               :delim
                (copy delimcomma
                 :pos 0))))
       :children
        (textblocklist
         (textblock
          :text "c"
          :startpos 9
          :endpos 9)))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "d}>"
            :startpos 11
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest3)
            :close
             (delim
              :name "delimclose"
              :starttext "}")
            :parent
             (textblock
              :text "{c d}>"
              :startpos 8
              :endpos 13
              :delim
               (delim
                :name "delimbracketcurly"
                :starttext "{"
                :endtext "}"
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">"
                  :delimlist vx/data/textblock/delimlisttest1)
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13)
                :children
                 (textblocklist
                  (textblock
                   :text "{a,b}"
                   :startpos 2
                   :endpos 6
                   :delim
                    (delim
                     :name "delimbracketcurly"
                     :starttext "{"
                     :endtext "}")
                   :children
                    (textblocklist
                     (textblock
                      :text "a"
                      :startpos 3
                      :endpos 3)
                     (textblock
                      :text ","
                      :startpos 4
                      :endpos 4
                      :delim
                       (delim
                        :name "delimcomma"
                        :starttext ","))
                     (textblock
                      :text "b"
                      :startpos 5
                      :endpos 5)))
                  (textblock
                   :text ","
                   :startpos 7
                   :endpos 7
                   :delim
                    (delim
                     :name "delimcomma"
                     :starttext ","))))
              :children
               (textblocklist
                (textblock
                 :text "c"
                 :startpos 9
                 :endpos 9)
                (textblock
                 :text " "
                 :startpos 10
                 :endpos 10
                 :delim
                  (delim
                   :name "delimwhitespace"
                   :starttext ":whitespace")))))
          :actual
           (textblock
            :text "d}>"
            :startpos 11
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest3)
            :close
             (delim
              :name "delimclose"
              :starttext "}")
            :parent
             (textblock
              :text "{c d}>"
              :startpos 8
              :endpos 13
              :delim
               (delim
                :name "delimbracketcurly"
                :starttext "{"
                :endtext "}"
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">"
                  :delimlist vx/data/textblock/delimlisttest1)
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13)
                :children
                 (textblocklist
                  (textblock
                   :text "{a,b}"
                   :startpos 2
                   :endpos 6
                   :delim
                    (delim
                     :name "delimbracketcurly"
                     :starttext "{"
                     :endtext "}")
                   :children
                    (textblocklist
                     (textblock
                      :text "a"
                      :startpos 3
                      :endpos 3)
                     (textblock
                      :text ","
                      :startpos 4
                      :endpos 4
                      :delim
                       (delim
                        :name "delimcomma"
                        :starttext ","))
                     (textblock
                      :text "b"
                      :startpos 5
                      :endpos 5)))
                  (textblock
                   :text ","
                   :startpos 7
                   :endpos 7
                   :delim
                    (delim
                     :name "delimcomma"
                     :starttext ","))))
              :children
               (textblocklist
                (textblock
                 :text "c"
                 :startpos 9
                 :endpos 9)
                (textblock
                 :text " "
                 :startpos 10
                 :endpos 10
                 :delim
                  (delim
                   :name "delimwhitespace"
                   :starttext ":whitespace")))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "d"
  :startpos 11
  :endpos 11
  :parent
   (textblock
    :text ">"
    :startpos 13
    :endpos 13
    :delim
     (delim
      :delimlist delimlisttest2)
    :close
     (copy delimclose
      :starttext ">")
    :parent
     (textblock
      :text "{c d}"
      :startpos 8
      :endpos 12
      :delim
       (copy delimbracketcurly
        :pos 0)
      :close delimclosing
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13
        :delim
         (copy delimbracketangle
          :delimlist delimlisttest1)
        :parent
         (textblock
          :text "<{a,b},{c d}>"
          :startpos 1
          :endpos 13)
        :children
         (textblocklist
          (textblock
           :text "{a,b}"
           :startpos 2
           :endpos 6
           :delim
            (copy delimbracketcurly
             :pos 0)
           :children
            (textblocklist
             (textblock
              :text "a"
              :startpos 3
              :endpos 3)
             (textblock
              :text ","
              :startpos 4
              :endpos 4
              :delim
               (copy delimcomma
                :pos 0))
             (textblock
              :text "b"
              :startpos 5
              :endpos 5)))
          (textblock
           :text ","
           :startpos 7
           :endpos 7
           :delim
            (copy delimcomma
             :pos 0))))
           :children
            (textblocklist
             (textblock
              :text "c"
              :startpos 9
              :endpos 9)
             (textblock
              :text " "
              :startpos 10
              :endpos 10
              :delim
               (copy delimwhitespace
                :pos 0))))))
 (textblock-parse-one
  (textblock
   :text "d}>"
   :startpos 11
   :endpos 13
   :delim
    (delim
     :delimlist delimlisttest3)
   :close
    (copy delimclose
     :starttext "}")
   :parent
    (textblock
     :text "{c d}>"
     :startpos 8
     :endpos 13
     :delim
      (copy delimbracketcurly
       :delimlist delimlisttest2)
     :close
      (copy delimclose
       :starttext ">")
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13
       :delim
        (delim
         :name "delimbracketangle"
         :starttext "<"
         :endtext ">"
         :delimlist delimlisttest1)
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13)
       :children
        (textblocklist
         (textblock
          :text "{a,b}"
          :startpos 2
          :endpos 6
          :delim
           (copy delimbracketcurly
            :pos 0)
          :children
           (textblocklist
            (textblock
             :text "a"
             :startpos 3
             :endpos 3)
              (textblock
               :text ","
               :startpos 4
               :endpos 4
               :delim
                (copy delimcomma
                 :pos 0))
            (textblock
             :text "b"
             :startpos 5
             :endpos 5)))
         (textblock
          :text ","
          :startpos 7
          :endpos 7
          :delim
           (copy delimcomma
            :pos 0))))
     :children
      (textblocklist
       (textblock
        :text "c"
        :startpos 9
        :endpos 9)
       (textblock
        :text " "
        :startpos 10
        :endpos 10
        :delim
         (copy delimwhitespace
          :pos 0)))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "d"
            :startpos 11
            :endpos 11
            :parent
             (textblock
              :text ">"
              :startpos 13
              :endpos 13
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "{c d}"
                :startpos 8
                :endpos 12
                :delim
                 (delim
                  :name "delimbracketcurly"
                  :starttext "{"
                  :endtext "}")
                :close vx/data/textblock/delimclosing
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">"
                    :delimlist vx/data/textblock/delimlisttest1)
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13)
                  :children
                   (textblocklist
                    (textblock
                     :text "{a,b}"
                     :startpos 2
                     :endpos 6
                     :delim
                      (delim
                       :name "delimbracketcurly"
                       :starttext "{"
                       :endtext "}")
                     :children
                      (textblocklist
                       (textblock
                        :text "a"
                        :startpos 3
                        :endpos 3)
                       (textblock
                        :text ","
                        :startpos 4
                        :endpos 4
                        :delim
                         (delim
                          :name "delimcomma"
                          :starttext ","))
                       (textblock
                        :text "b"
                        :startpos 5
                        :endpos 5)))
                    (textblock
                     :text ","
                     :startpos 7
                     :endpos 7
                     :delim
                      (delim
                       :name "delimcomma"
                       :starttext ","))))
                :children
                 (textblocklist
                  (textblock
                   :text "c"
                   :startpos 9
                   :endpos 9)
                  (textblock
                   :text " "
                   :startpos 10
                   :endpos 10
                   :delim
                    (delim
                     :name "delimwhitespace"
                     :starttext ":whitespace"))))))
          :actual
           (textblock
            :text "d"
            :startpos 11
            :endpos 11
            :parent
             (textblock
              :text ">"
              :startpos 13
              :endpos 13
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "{c d}"
                :startpos 8
                :endpos 12
                :delim
                 (delim
                  :name "delimbracketcurly"
                  :starttext "{"
                  :endtext "}")
                :close vx/data/textblock/delimclosing
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">"
                    :delimlist vx/data/textblock/delimlisttest1)
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13)
                  :children
                   (textblocklist
                    (textblock
                     :text "{a,b}"
                     :startpos 2
                     :endpos 6
                     :delim
                      (delim
                       :name "delimbracketcurly"
                       :starttext "{"
                       :endtext "}")
                     :children
                      (textblocklist
                       (textblock
                        :text "a"
                        :startpos 3
                        :endpos 3)
                       (textblock
                        :text ","
                        :startpos 4
                        :endpos 4
                        :delim
                         (delim
                          :name "delimcomma"
                          :starttext ","))
                       (textblock
                        :text "b"
                        :startpos 5
                        :endpos 5)))
                    (textblock
                     :text ","
                     :startpos 7
                     :endpos 7
                     :delim
                      (delim
                       :name "delimcomma"
                       :starttext ","))))
                :children
                 (textblocklist
                  (textblock
                   :text "c"
                   :startpos 9
                   :endpos 9)
                  (textblock
                   :text " "
                   :startpos 10
                   :endpos 10
                   :delim
                    (delim
                     :name "delimwhitespace"
                     :starttext ":whitespace"))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text ">"
  :startpos 13
  :endpos 13
  :delim
   (delim
    :delimlist delimlisttest2)
  :close
   (copy delimclose
    :starttext ">")
  :parent
   (textblock
    :text "<{a,b},{c d}>"
    :startpos 1
    :endpos 13
    :delim
     (copy delimbracketangle
      :delimlist delimlisttest1)
    :parent
     (textblock
      :text "<{a,b},{c d}>"
      :startpos 1
      :endpos 13)
    :children
     (textblocklist
      (textblock
       :text "{a,b}"
       :startpos 2
       :endpos 6
       :delim
        (copy delimbracketcurly
         :pos 0)
       :children
        (textblocklist
         (textblock
          :text "a"
          :startpos 3
          :endpos 3)
         (textblock
          :text ","
          :startpos 4
          :endpos 4
          :delim
           (copy delimcomma
            :pos 0))
         (textblock
          :text "b"
          :startpos 5
          :endpos 5)))
      (textblock
       :text ","
       :startpos 7
       :endpos 7
       :delim
        (copy delimcomma
         :pos 0))
      (textblock
       :text "{c d}"
       :startpos 8
       :endpos 12
       :delim
        (copy delimbracketcurly
         :pos 0)
       :children
        (textblocklist
         (textblock
          :text "c"
          :startpos 9
          :endpos 9)
         (textblock
          :text " "
          :startpos 10
          :endpos 10
          :delim
           (copy delimwhitespace
            :pos 0))
         (textblock
          :text "d"
          :startpos 11
          :endpos 11))))))
 (textblock-parse-one
  (textblock
   :text "d"
   :startpos 11
   :endpos 11
   :parent
    (textblock
     :text ">"
     :startpos 13
     :endpos 13
     :delim
      (delim
       :delimlist delimlisttest2)
     :close
      (copy delimclose
       :starttext ">")
     :parent
      (textblock
       :text "{c d}"
       :startpos 8
       :endpos 12
       :delim
        (copy delimbracketcurly
         :pos 0)
       :close delimclosing
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13
         :delim
          (copy delimbracketangle
           :delimlist delimlisttest1)
         :parent
          (textblock
           :text "<{a,b},{c d}>"
           :startpos 1
           :endpos 13)
         :children
          (textblocklist
           (textblock
            :text "{a,b}"
            :startpos 2
            :endpos 6
            :delim
             (copy delimbracketcurly
              :pos 0)
            :children
             (textblocklist
              (textblock
               :text "a"
               :startpos 3
               :endpos 3)
              (textblock
               :text ","
               :startpos 4
               :endpos 4
               :delim
                (copy delimcomma
                 :pos 0))
              (textblock
               :text "b"
               :startpos 5
               :endpos 5)))
           (textblock
            :text ","
            :startpos 7
            :endpos 7
            :delim
             (copy delimcomma
              :pos 0))))
            :children
             (textblocklist
              (textblock
               :text "c"
               :startpos 9
               :endpos 9)
              (textblock
               :text " "
               :startpos 10
               :endpos 10
               :delim
                (copy delimwhitespace
                 :pos 0))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text ">"
            :startpos 13
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest2)
            :close
             (delim
              :name "delimclose"
              :starttext ">")
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :delim
               (delim
                :name "delimbracketangle"
                :starttext "<"
                :endtext ">"
                :delimlist vx/data/textblock/delimlisttest1)
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13)
              :children
               (textblocklist
                (textblock
                 :text "{a,b}"
                 :startpos 2
                 :endpos 6
                 :delim
                  (delim
                   :name "delimbracketcurly"
                   :starttext "{"
                   :endtext "}")
                 :children
                  (textblocklist
                   (textblock
                    :text "a"
                    :startpos 3
                    :endpos 3)
                   (textblock
                    :text ","
                    :startpos 4
                    :endpos 4
                    :delim
                     (delim
                      :name "delimcomma"
                      :starttext ","))
                   (textblock
                    :text "b"
                    :startpos 5
                    :endpos 5)))
                (textblock
                 :text ","
                 :startpos 7
                 :endpos 7
                 :delim
                  (delim
                   :name "delimcomma"
                   :starttext ","))
                (textblock
                 :text "{c d}"
                 :startpos 8
                 :endpos 12
                 :delim
                  (delim
                   :name "delimbracketcurly"
                   :starttext "{"
                   :endtext "}")
                 :children
                  (textblocklist
                   (textblock
                    :text "c"
                    :startpos 9
                    :endpos 9)
                   (textblock
                    :text " "
                    :startpos 10
                    :endpos 10
                    :delim
                     (delim
                      :name "delimwhitespace"
                      :starttext ":whitespace"))
                   (textblock
                    :text "d"
                    :startpos 11
                    :endpos 11))))))
          :actual
           (textblock
            :text ">"
            :startpos 13
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest2)
            :close
             (delim
              :name "delimclose"
              :starttext ">")
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :delim
               (delim
                :name "delimbracketangle"
                :starttext "<"
                :endtext ">"
                :delimlist vx/data/textblock/delimlisttest1)
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13)
              :children
               (textblocklist
                (textblock
                 :text "{a,b}"
                 :startpos 2
                 :endpos 6
                 :delim
                  (delim
                   :name "delimbracketcurly"
                   :starttext "{"
                   :endtext "}")
                 :children
                  (textblocklist
                   (textblock
                    :text "a"
                    :startpos 3
                    :endpos 3)
                   (textblock
                    :text ","
                    :startpos 4
                    :endpos 4
                    :delim
                     (delim
                      :name "delimcomma"
                      :starttext ","))
                   (textblock
                    :text "b"
                    :startpos 5
                    :endpos 5)))
                (textblock
                 :text ","
                 :startpos 7
                 :endpos 7
                 :delim
                  (delim
                   :name "delimcomma"
                   :starttext ","))
                (textblock
                 :text "{c d}"
                 :startpos 8
                 :endpos 12
                 :delim
                  (delim
                   :name "delimbracketcurly"
                   :starttext "{"
                   :endtext "}")
                 :children
                  (textblocklist
                   (textblock
                    :text "c"
                    :startpos 9
                    :endpos 9)
                   (textblock
                    :text " "
                    :startpos 10
                    :endpos 10
                    :delim
                     (delim
                      :name "delimwhitespace"
                      :starttext ":whitespace"))
                   (textblock
                    :text "d"
                    :startpos 11
                    :endpos 11))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :startpos 13
  :endpos 13
  :parent
   (textblock
    :startpos 14
    :endpos 14
    :delim
     (delim
      :delimlist delimlisttest1)
    :parent
     (textblock
      :text "<{a,b},{c d}>"
      :startpos 1
      :endpos 13
      :delim
       (copy delimbracketangle
        :pos 0)
      :close delimclosing
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13)
      :children
       (textblocklist
        (textblock
         :text "{a,b}"
         :startpos 2
         :endpos 6
         :delim
          (copy delimbracketcurly
           :pos 0)
         :children
          (textblocklist
           (textblock
            :text "a"
            :startpos 3
            :endpos 3)
           (textblock
            :text ","
            :startpos 4
            :endpos 4
            :delim
             (copy delimcomma
              :pos 0))
           (textblock
            :text "b"
            :startpos 5
            :endpos 5)))
        (textblock
         :text ","
         :startpos 7
         :endpos 7
         :delim
          (copy delimcomma
           :pos 0))
        (textblock
         :text "{c d}"
         :startpos 8
         :endpos 12
         :delim
          (copy delimbracketcurly
           :pos 0)
         :children
          (textblocklist
           (textblock
            :text "c"
            :startpos 9
            :endpos 9)
          (textblock
           :text " "
           :startpos 10
           :endpos 10
           :delim
            (copy delimwhitespace
             :pos 0))
          (textblock
           :text "d"
           :startpos 11
           :endpos 11)))))))
 (textblock-parse-one
  (textblock
   :text ">"
   :startpos 13
   :endpos 13
   :delim
    (delim
     :delimlist delimlisttest2)
   :close
    (copy delimclose
     :starttext ">")
   :parent
    (textblock
     :text "<{a,b},{c d}>"
     :startpos 1
     :endpos 13
     :delim
      (copy delimbracketangle
       :delimlist delimlisttest1)
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13)
     :children
      (textblocklist
       (textblock
        :text "{a,b}"
        :startpos 2
        :endpos 6
        :delim
         (copy delimbracketcurly
          :pos 0)
        :children
         (textblocklist
          (textblock
           :text "a"
           :startpos 3
           :endpos 3)
          (textblock
           :text ","
           :startpos 4
           :endpos 4
           :delim
            (copy delimcomma
             :pos 0))
          (textblock
           :text "b"
           :startpos 5
           :endpos 5)))
       (textblock
        :text ","
        :startpos 7
        :endpos 7
        :delim
         (copy delimcomma
          :pos 0))
       (textblock
        :text "{c d}"
        :startpos 8
        :endpos 12
        :delim
         (copy delimbracketcurly
          :pos 0)
        :children
         (textblocklist
          (textblock
           :text "c"
           :startpos 9
           :endpos 9)
          (textblock
           :text " "
           :startpos 10
           :endpos 10
           :delim
            (copy delimwhitespace
             :pos 0))
          (textblock
           :text "d"
           :startpos 11
           :endpos 11))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :startpos 13
            :endpos 13
            :parent
             (textblock
              :startpos 14
              :endpos 14
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest1)
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">")
                :close vx/data/textblock/delimclosing
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13)
                :children
                 (textblocklist
                  (textblock
                   :text "{a,b}"
                   :startpos 2
                   :endpos 6
                   :delim
                    (delim
                     :name "delimbracketcurly"
                     :starttext "{"
                     :endtext "}")
                   :children
                    (textblocklist
                     (textblock
                      :text "a"
                      :startpos 3
                      :endpos 3)
                     (textblock
                      :text ","
                      :startpos 4
                      :endpos 4
                      :delim
                       (delim
                        :name "delimcomma"
                        :starttext ","))
                     (textblock
                      :text "b"
                      :startpos 5
                      :endpos 5)))
                  (textblock
                   :text ","
                   :startpos 7
                   :endpos 7
                   :delim
                    (delim
                     :name "delimcomma"
                     :starttext ","))
                  (textblock
                   :text "{c d}"
                   :startpos 8
                   :endpos 12
                   :delim
                    (delim
                     :name "delimbracketcurly"
                     :starttext "{"
                     :endtext "}")
                   :children
                    (textblocklist
                     (textblock
                      :text "c"
                      :startpos 9
                      :endpos 9)
                     (textblock
                      :text " "
                      :startpos 10
                      :endpos 10
                      :delim
                       (delim
                        :name "delimwhitespace"
                        :starttext ":whitespace"))
                     (textblock
                      :text "d"
                      :startpos 11
                      :endpos 11)))))))
          :actual
           (textblock
            :startpos 13
            :endpos 13
            :parent
             (textblock
              :startpos 14
              :endpos 14
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest1)
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">")
                :close vx/data/textblock/delimclosing
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13)
                :children
                 (textblocklist
                  (textblock
                   :text "{a,b}"
                   :startpos 2
                   :endpos 6
                   :delim
                    (delim
                     :name "delimbracketcurly"
                     :starttext "{"
                     :endtext "}")
                   :children
                    (textblocklist
                     (textblock
                      :text "a"
                      :startpos 3
                      :endpos 3)
                     (textblock
                      :text ","
                      :startpos 4
                      :endpos 4
                      :delim
                       (delim
                        :name "delimcomma"
                        :starttext ","))
                     (textblock
                      :text "b"
                      :startpos 5
                      :endpos 5)))
                  (textblock
                   :text ","
                   :startpos 7
                   :endpos 7
                   :delim
                    (delim
                     :name "delimcomma"
                     :starttext ","))
                  (textblock
                   :text "{c d}"
                   :startpos 8
                   :endpos 12
                   :delim
                    (delim
                     :name "delimbracketcurly"
                     :starttext "{"
                     :endtext "}")
                   :children
                    (textblocklist
                     (textblock
                      :text "c"
                      :startpos 9
                      :endpos 9)
                     (textblock
                      :text " "
                      :startpos 10
                      :endpos 10
                      :delim
                       (delim
                        :name "delimwhitespace"
                        :starttext ":whitespace"))
                     (textblock
                      :text "d"
                      :startpos 11
                      :endpos 11)))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :startpos 14
  :endpos 14
  :delim
   (delim
    :delimlist delimlisttest1)
  :parent
   (textblock
    :text "<{a,b},{c d}>"
    :startpos 1
    :endpos 13
    :children
     (textblocklist
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13
       :delim
        (copy delimbracketangle
         :pos 0)
       :children
        (textblocklist
         (textblock
          :text "{a,b}"
          :startpos 2
          :endpos 6
          :delim
           (copy delimbracketcurly
            :pos 0)
          :children
           (textblocklist
            (textblock
             :text "a"
             :startpos 3
             :endpos 3)
            (textblock
             :text ","
             :startpos 4
             :endpos 4
             :delim
              (copy delimcomma
               :pos 0))
            (textblock
             :text "b"
             :startpos 5
             :endpos 5)))
         (textblock
          :text ","
          :startpos 7
          :endpos 7
          :delim
           (copy delimcomma
            :pos 0))
         (textblock
          :text "{c d}"
          :startpos 8
          :endpos 12
          :delim
           (copy delimbracketcurly
            :pos 0)
          :children
           (textblocklist
            (textblock
             :text "c"
             :startpos 9
             :endpos 9)
           (textblock
            :text " "
            :startpos 10
            :endpos 10
            :delim
             (copy delimwhitespace
              :pos 0))
           (textblock
            :text "d"
            :startpos 11
            :endpos 11))))))))
 (textblock-parse-one
  (textblock
   :startpos 13
   :endpos 13
   :parent
    (textblock
     :startpos 14
     :endpos 14
     :delim
      (delim
       :delimlist delimlisttest1)
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13
       :delim
        (copy delimbracketangle
         :pos 0)
       :close delimclosing
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13)
       :children
        (textblocklist
         (textblock
          :text "{a,b}"
          :startpos 2
          :endpos 6
          :delim
           (copy delimbracketcurly
            :pos 0)
          :children
           (textblocklist
            (textblock
             :text "a"
             :startpos 3
             :endpos 3)
            (textblock
             :text ","
             :startpos 4
             :endpos 4
             :delim
              (copy delimcomma
               :pos 0))
            (textblock
             :text "b"
             :startpos 5
             :endpos 5)))
         (textblock
          :text ","
          :startpos 7
          :endpos 7
          :delim
           (copy delimcomma
            :pos 0))
         (textblock
          :text "{c d}"
          :startpos 8
          :endpos 12
          :delim
           (copy delimbracketcurly
            :pos 0)
          :children
           (textblocklist
            (textblock
             :text "c"
             :startpos 9
             :endpos 9)
           (textblock
            :text " "
            :startpos 10
            :endpos 10
            :delim
             (copy delimwhitespace
              :pos 0))
           (textblock
            :text "d"
            :startpos 11
            :endpos 11)))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :startpos 14
            :endpos 14
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest1)
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :children
               (textblocklist
                (textblock
                 :text "<{a,b},{c d}>"
                 :startpos 1
                 :endpos 13
                 :delim
                  (delim
                   :name "delimbracketangle"
                   :starttext "<"
                   :endtext ">")
                 :children
                  (textblocklist
                   (textblock
                    :text "{a,b}"
                    :startpos 2
                    :endpos 6
                    :delim
                     (delim
                      :name "delimbracketcurly"
                      :starttext "{"
                      :endtext "}")
                    :children
                     (textblocklist
                      (textblock
                       :text "a"
                       :startpos 3
                       :endpos 3)
                      (textblock
                       :text ","
                       :startpos 4
                       :endpos 4
                       :delim
                        (delim
                         :name "delimcomma"
                         :starttext ","))
                      (textblock
                       :text "b"
                       :startpos 5
                       :endpos 5)))
                   (textblock
                    :text ","
                    :startpos 7
                    :endpos 7
                    :delim
                     (delim
                      :name "delimcomma"
                      :starttext ","))
                   (textblock
                    :text "{c d}"
                    :startpos 8
                    :endpos 12
                    :delim
                     (delim
                      :name "delimbracketcurly"
                      :starttext "{"
                      :endtext "}")
                    :children
                     (textblocklist
                      (textblock
                       :text "c"
                       :startpos 9
                       :endpos 9)
                      (textblock
                       :text " "
                       :startpos 10
                       :endpos 10
                       :delim
                        (delim
                         :name "delimwhitespace"
                         :starttext ":whitespace"))
                      (textblock
                       :text "d"
                       :startpos 11
                       :endpos 11))))))))
          :actual
           (textblock
            :startpos 14
            :endpos 14
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest1)
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :children
               (textblocklist
                (textblock
                 :text "<{a,b},{c d}>"
                 :startpos 1
                 :endpos 13
                 :delim
                  (delim
                   :name "delimbracketangle"
                   :starttext "<"
                   :endtext ">")
                 :children
                  (textblocklist
                   (textblock
                    :text "{a,b}"
                    :startpos 2
                    :endpos 6
                    :delim
                     (delim
                      :name "delimbracketcurly"
                      :starttext "{"
                      :endtext "}")
                    :children
                     (textblocklist
                      (textblock
                       :text "a"
                       :startpos 3
                       :endpos 3)
                      (textblock
                       :text ","
                       :startpos 4
                       :endpos 4
                       :delim
                        (delim
                         :name "delimcomma"
                         :starttext ","))
                      (textblock
                       :text "b"
                       :startpos 5
                       :endpos 5)))
                   (textblock
                    :text ","
                    :startpos 7
                    :endpos 7
                    :delim
                     (delim
                      :name "delimcomma"
                      :starttext ","))
                   (textblock
                    :text "{c d}"
                    :startpos 8
                    :endpos 12
                    :delim
                     (delim
                      :name "delimbracketcurly"
                      :starttext "{"
                      :endtext "}")
                    :children
                     (textblocklist
                      (textblock
                       :text "c"
                       :startpos 9
                       :endpos 9)
                      (textblock
                       :text " "
                       :startpos 10
                       :endpos 10
                       :delim
                        (delim
                         :name "delimwhitespace"
                         :starttext ":whitespace"))
                      (textblock
                       :text "d"
                       :startpos 11
                       :endpos 11))))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "<{a,b},{c d}>"
  :startpos 1
  :endpos 13
  :children
   (textblocklist
    (textblock
     :text "<{a,b},{c d}>"
     :startpos 1
     :endpos 13
     :delim
      (copy delimbracketangle
       :pos 0)
     :children
      (textblocklist
       (textblock
        :text "{a,b}"
        :startpos 2
        :endpos 6
        :delim
         (copy delimbracketcurly
          :pos 0)
        :children
         (textblocklist
          (textblock
           :text "a"
           :startpos 3
           :endpos 3)
          (textblock
           :text ","
           :startpos 4
           :endpos 4
           :delim
            (copy delimcomma
             :pos 0))
          (textblock
           :text "b"
           :startpos 5
           :endpos 5)))
       (textblock
        :text ","
        :startpos 7
        :endpos 7
        :delim
         (copy delimcomma
          :pos 0))
       (textblock
        :text "{c d}"
        :startpos 8
        :endpos 12
        :delim
         (copy delimbracketcurly
          :pos 0)
        :children
         (textblocklist
          (textblock
           :text "c"
           :startpos 9
           :endpos 9)
          (textblock
           :text " "
           :startpos 10
           :endpos 10
           :delim
            (copy delimwhitespace
             :pos 0))
          (textblock
           :text "d"
           :startpos 11
           :endpos 11)))))))
 (textblock-parse-one
  (textblock
   :startpos 14
   :endpos 14
   :delim
    (delim
     :delimlist delimlisttest1)
   :parent
    (textblock
     :text "<{a,b},{c d}>"
     :startpos 1
     :endpos 13
     :children
      (textblocklist
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13
        :delim
         (copy delimbracketangle
          :pos 0)
        :children
         (textblocklist
          (textblock
           :text "{a,b}"
           :startpos 2
           :endpos 6
           :delim
            (copy delimbracketcurly
             :pos 0)
           :children
            (textblocklist
             (textblock
              :text "a"
              :startpos 3
              :endpos 3)
             (textblock
              :text ","
              :startpos 4
              :endpos 4
              :delim
               (copy delimcomma
                :pos 0))
             (textblock
              :text "b"
              :startpos 5
              :endpos 5)))
          (textblock
           :text ","
           :startpos 7
           :endpos 7
           :delim
            (copy delimcomma
             :pos 0))
          (textblock
           :text "{c d}"
           :startpos 8
           :endpos 12
           :delim
            (copy delimbracketcurly
             :pos 0)
           :children
            (textblocklist
             (textblock
              :text "c"
              :startpos 9
              :endpos 9)
            (textblock
             :text " "
             :startpos 10
             :endpos 10
             :delim
              (copy delimwhitespace
               :pos 0))
            (textblock
             :text "d"
             :startpos 11
             :endpos 11))))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "<{a,b},{c d}>"
            :startpos 1
            :endpos 13
            :children
             (textblocklist
              (textblock
               :text "<{a,b},{c d}>"
               :startpos 1
               :endpos 13
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "{a,b}"
                  :startpos 2
                  :endpos 6
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}")
                  :children
                   (textblocklist
                    (textblock
                     :text "a"
                     :startpos 3
                     :endpos 3)
                    (textblock
                     :text ","
                     :startpos 4
                     :endpos 4
                     :delim
                      (delim
                       :name "delimcomma"
                       :starttext ","))
                    (textblock
                     :text "b"
                     :startpos 5
                     :endpos 5)))
                 (textblock
                  :text ","
                  :startpos 7
                  :endpos 7
                  :delim
                   (delim
                    :name "delimcomma"
                    :starttext ","))
                 (textblock
                  :text "{c d}"
                  :startpos 8
                  :endpos 12
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}")
                  :children
                   (textblocklist
                    (textblock
                     :text "c"
                     :startpos 9
                     :endpos 9)
                    (textblock
                     :text " "
                     :startpos 10
                     :endpos 10
                     :delim
                      (delim
                       :name "delimwhitespace"
                       :starttext ":whitespace"))
                    (textblock
                     :text "d"
                     :startpos 11
                     :endpos 11)))))))
          :actual
           (textblock
            :text "<{a,b},{c d}>"
            :startpos 1
            :endpos 13
            :children
             (textblocklist
              (textblock
               :text "<{a,b},{c d}>"
               :startpos 1
               :endpos 13
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "{a,b}"
                  :startpos 2
                  :endpos 6
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}")
                  :children
                   (textblocklist
                    (textblock
                     :text "a"
                     :startpos 3
                     :endpos 3)
                    (textblock
                     :text ","
                     :startpos 4
                     :endpos 4
                     :delim
                      (delim
                       :name "delimcomma"
                       :starttext ","))
                    (textblock
                     :text "b"
                     :startpos 5
                     :endpos 5)))
                 (textblock
                  :text ","
                  :startpos 7
                  :endpos 7
                  :delim
                   (delim
                    :name "delimcomma"
                    :starttext ","))
                 (textblock
                  :text "{c d}"
                  :startpos 8
                  :endpos 12
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}")
                  :children
                   (textblocklist
                    (textblock
                     :text "c"
                     :startpos 9
                     :endpos 9)
                    (textblock
                     :text " "
                     :startpos 10
                     :endpos 10
                     :delim
                      (delim
                       :name "delimwhitespace"
                       :starttext ":whitespace"))
                    (textblock
                     :text "d"
                     :startpos 11
                     :endpos 11)))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "<{a,b},{c d}>"
  :startpos 1
  :endpos 13
  :children
   (textblocklist
    (textblock
     :text "<{a,b},{c d}>"
     :startpos 1
     :endpos 13
     :delim
      (copy delimbracketangle
       :pos 0)
     :children
      (textblocklist
       (textblock
        :text "{a,b}"
        :startpos 2
        :endpos 6
        :delim
         (copy delimbracketcurly
          :pos 0)
        :children
         (textblocklist
          (textblock
           :text "a"
           :startpos 3
           :endpos 3)
          (textblock
           :text ","
           :startpos 4
           :endpos 4
           :delim
            (copy delimcomma
             :pos 0))
          (textblock
           :text "b"
           :startpos 5
           :endpos 5)))
       (textblock
        :text ","
        :startpos 7
        :endpos 7
        :delim
         (copy delimcomma
          :pos 0))
       (textblock
        :text "{c d}"
        :startpos 8
        :endpos 12
        :delim
         (copy delimbracketcurly
          :pos 0)
        :children
         (textblocklist
          (textblock
           :text "c"
           :startpos 9
           :endpos 9)
          (textblock
           :text " "
           :startpos 10
           :endpos 10
           :delim
            (copy delimwhitespace
             :pos 0))
          (textblock
           :text "d"
           :startpos 11
           :endpos 11)))))))
 (textblock-parse-one
  (textblock
   :text "<{a,b},{c d}>"
   :startpos 1
   :endpos 13
   :children
    (textblocklist
     (textblock
      :text "<{a,b},{c d}>"
      :startpos 1
      :endpos 13
      :delim
       (copy delimbracketangle
        :pos 0)
      :children
       (textblocklist
        (textblock
         :text "{a,b}"
         :startpos 2
         :endpos 6
         :delim
          (copy delimbracketcurly
           :pos 0)
         :children
          (textblocklist
           (textblock
            :text "a"
            :startpos 3
            :endpos 3)
           (textblock
            :text ","
            :startpos 4
            :endpos 4
            :delim
             (copy delimcomma
              :pos 0))
           (textblock
            :text "b"
            :startpos 5
            :endpos 5)))
        (textblock
         :text ","
         :startpos 7
         :endpos 7
         :delim
          (copy delimcomma
           :pos 0))
        (textblock
         :text "{c d}"
         :startpos 8
         :endpos 12
         :delim
          (copy delimbracketcurly
           :pos 0)
         :children
          (textblocklist
           (textblock
            :text "c"
            :startpos 9
            :endpos 9)
           (textblock
            :text " "
            :startpos 10
            :endpos 10
            :delim
             (copy delimwhitespace
              :pos 0))
           (textblock
            :text "d"
            :startpos 11
            :endpos 11)))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "<{a,b},{c d}>"
            :startpos 1
            :endpos 13
            :children
             (textblocklist
              (textblock
               :text "<{a,b},{c d}>"
               :startpos 1
               :endpos 13
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "{a,b}"
                  :startpos 2
                  :endpos 6
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}")
                  :children
                   (textblocklist
                    (textblock
                     :text "a"
                     :startpos 3
                     :endpos 3)
                    (textblock
                     :text ","
                     :startpos 4
                     :endpos 4
                     :delim
                      (delim
                       :name "delimcomma"
                       :starttext ","))
                    (textblock
                     :text "b"
                     :startpos 5
                     :endpos 5)))
                 (textblock
                  :text ","
                  :startpos 7
                  :endpos 7
                  :delim
                   (delim
                    :name "delimcomma"
                    :starttext ","))
                 (textblock
                  :text "{c d}"
                  :startpos 8
                  :endpos 12
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}")
                  :children
                   (textblocklist
                    (textblock
                     :text "c"
                     :startpos 9
                     :endpos 9)
                    (textblock
                     :text " "
                     :startpos 10
                     :endpos 10
                     :delim
                      (delim
                       :name "delimwhitespace"
                       :starttext ":whitespace"))
                    (textblock
                     :text "d"
                     :startpos 11
                     :endpos 11)))))))
          :actual
           (textblock
            :text "<{a,b},{c d}>"
            :startpos 1
            :endpos 13
            :children
             (textblocklist
              (textblock
               :text "<{a,b},{c d}>"
               :startpos 1
               :endpos 13
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "{a,b}"
                  :startpos 2
                  :endpos 6
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}")
                  :children
                   (textblocklist
                    (textblock
                     :text "a"
                     :startpos 3
                     :endpos 3)
                    (textblock
                     :text ","
                     :startpos 4
                     :endpos 4
                     :delim
                      (delim
                       :name "delimcomma"
                       :starttext ","))
                    (textblock
                     :text "b"
                     :startpos 5
                     :endpos 5)))
                 (textblock
                  :text ","
                  :startpos 7
                  :endpos 7
                  :delim
                   (delim
                    :name "delimcomma"
                    :starttext ","))
                 (textblock
                  :text "{c d}"
                  :startpos 8
                  :endpos 12
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}")
                  :children
                   (textblocklist
                    (textblock
                     :text "c"
                     :startpos 9
                     :endpos 9)
                    (textblock
                     :text " "
                     :startpos 10
                     :endpos 10
                     :delim
                      (delim
                       :name "delimwhitespace"
                       :starttext ":whitespace"))
                    (textblock
                     :text "d"
                     :startpos 11
                     :endpos 11)))))))))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock-startleft<-string-delim-offset"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (textblock
  :text "a"
  :startpos 1
  :endpos 1)
 (textblock-startleft<-string-delim-offset
  "a,b"
  (delim
   :pos 2)
  0))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "a"
            :startpos 1
            :endpos 1)
          :actual
           (textblock
            :text "a"
            :startpos 1
            :endpos 1)))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock-startright<-string-delim-offset"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (textblock
  :text ",b"
  :startpos 2
  :delim
   (copy delimcomma
    :pos 2))
 (textblock-startright<-string-delim-offset
  "a,b"
  (copy delimcomma
   :pos 2)
  0))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text ",b"
            :startpos 2
            :delim
             (delim
              :name "delimcomma"
              :starttext ","
              :pos 2))
          :actual
           (textblock
            :text ",b"
            :startpos 2
            :delim
             (delim
              :name "delimcomma"
              :starttext ","
              :pos 2))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "<b>c"
  :startpos 2
  :delim
   (copy delimbracketangle
    :pos 2
    :delimlist
     (delimlist
      delimbracketcurly))
  :close
   (copy delimclose
    :starttext ">"))
 (textblock-startright<-string-delim-offset
  "a<b>c"
  (copy delimbracketangle
   :pos 2
   :delimlist
    (delimlist
     delimbracketcurly))
  0))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "<b>c"
            :startpos 2
            :delim
             (delim
              :name "delimbracketangle"
              :starttext "<"
              :endtext ">"
              :pos 2
              :delimlist
               (delimlist
                vx/data/textblock/delimbracketcurly))
            :close
             (delim
              :name "delimclose"
              :starttext ">"))
          :actual
           (textblock
            :text "<b>c"
            :startpos 2
            :delim
             (delim
              :name "delimbracketangle"
              :starttext "<"
              :endtext ">"
              :pos 2
              :delimlist
               (delimlist
                vx/data/textblock/delimbracketcurly))
            :close
             (delim
              :name "delimclose"
              :starttext ">"))))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock<-close-textblock"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (textblock
  :text "b"
  :startpos 5
  :endpos 5
  :parent
   (textblock
    :text ",{c d}>"
    :startpos 7
    :endpos 13
    :delim
     (delim
      :delimlist delimlisttest2)
    :close
     (copy delimclose
      :starttext ">")
    :parent
     (textblock
      :text "{a,b}"
      :startpos 2
      :endpos 6
      :delim
       (copy delimbracketcurly
        :pos 0)
      :close delimclosing
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13
        :delim
         (copy delimbracketangle
          :delimlist delimlisttest1)
        :parent
         (textblock
          :text "<{a,b},{c d}>"
          :startpos 1
          :endpos 13))
      :children
       (textblocklist
        (textblock
         :text "a"
         :startpos 3
         :endpos 3)
        (textblock
         :text ","
         :startpos 4
         :endpos 4
         :delim
          (copy delimcomma
           :pos 0))))))
 (textblock<-close-textblock
  (copy delimclose
   :starttext "}"
   :pos 2)
  (textblock
   :text "b},{c d}>"
   :startpos 5
   :endpos 13
   :delim
    (delim
     :delimlist delimlisttest3)
   :close
    (copy delimclose
     :starttext "}")
   :parent
    (textblock
     :text "{a,b},{c d}>"
     :startpos 2
     :endpos 13
     :delim
      (copy delimbracketcurly
       :delimlist delimlisttest2)
     :close
      (copy delimclose
       :starttext ">")
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13
       :delim
        (copy delimbracketangle
         :delimlist delimlisttest1)
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13))
     :children
      (textblocklist
       (textblock
        :text "a"
        :startpos 3
        :endpos 3)
       (textblock
        :text ","
        :startpos 4
        :endpos 4
        :delim
         (copy delimcomma
          :pos 0)))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "b"
            :startpos 5
            :endpos 5
            :parent
             (textblock
              :text ",{c d}>"
              :startpos 7
              :endpos 13
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "{a,b}"
                :startpos 2
                :endpos 6
                :delim
                 (delim
                  :name "delimbracketcurly"
                  :starttext "{"
                  :endtext "}")
                :close vx/data/textblock/delimclosing
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">"
                    :delimlist vx/data/textblock/delimlisttest1)
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13))
                :children
                 (textblocklist
                  (textblock
                   :text "a"
                   :startpos 3
                   :endpos 3)
                  (textblock
                   :text ","
                   :startpos 4
                   :endpos 4
                   :delim
                    (delim
                     :name "delimcomma"
                     :starttext ","))))))
          :actual
           (textblock
            :text "b"
            :startpos 5
            :endpos 5
            :parent
             (textblock
              :text ",{c d}>"
              :startpos 7
              :endpos 13
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "{a,b}"
                :startpos 2
                :endpos 6
                :delim
                 (delim
                  :name "delimbracketcurly"
                  :starttext "{"
                  :endtext "}")
                :close vx/data/textblock/delimclosing
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">"
                    :delimlist vx/data/textblock/delimlisttest1)
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13))
                :children
                 (textblocklist
                  (textblock
                   :text "a"
                   :startpos 3
                   :endpos 3)
                  (textblock
                   :text ","
                   :startpos 4
                   :endpos 4
                   :delim
                    (delim
                     :name "delimcomma"
                     :starttext ","))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :startpos 13
  :endpos 13
  :parent
   (textblock
    :startpos 14
    :endpos 14
    :delim
     (delim
      :delimlist delimlisttest1)
    :parent
     (textblock
      :text "<{a,b},{c d}>"
      :startpos 1
      :endpos 13
      :delim
       (copy delimbracketangle
        :pos 0)
      :close delimclosing
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13)
      :children
       (textblocklist
        (textblock
         :text "{a,b}"
         :startpos 2
         :endpos 6
         :delim
          (copy delimbracketcurly
           :pos 0)
         :children
          (textblocklist
           (textblock
            :text "a"
            :startpos 3
            :endpos 3)
           (textblock
            :text ","
            :startpos 4
            :endpos 4
            :delim
             (copy delimcomma
              :pos 0))
           (textblock
            :text "b"
            :startpos 5
            :endpos 5)))
        (textblock
         :text ","
         :startpos 7
         :endpos 7
         :delim
          (copy delimcomma
           :pos 0))
        (textblock
         :text "{c d}"
         :startpos 8
         :endpos 12
         :delim
          (copy delimbracketcurly
           :pos 0)
         :children
          (textblocklist
           (textblock
            :text "c"
            :startpos 9
            :endpos 9)
          (textblock
           :text " "
           :startpos 10
           :endpos 10
           :delim
            (copy delimwhitespace
             :pos 0))
          (textblock
           :text "d"
           :startpos 11
           :endpos 11)))))))
 (textblock<-close-textblock
  (copy delimclose
   :starttext ">"
   :pos 1)
  (textblock
   :text ">"
   :startpos 13
   :endpos 13
   :delim
    (delim
     :delimlist delimlisttest2)
   :close
    (copy delimclose
     :starttext ">")
   :parent
    (textblock
     :text "<{a,b},{c d}>"
     :startpos 1
     :endpos 13
     :delim
      (copy delimbracketangle
       :delimlist delimlisttest1)
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13)
     :children
      (textblocklist
       (textblock
        :text "{a,b}"
        :startpos 2
        :endpos 6
        :delim
         (copy delimbracketcurly
          :pos 0)
        :children
         (textblocklist
          (textblock
           :text "a"
           :startpos 3
           :endpos 3)
          (textblock
           :text ","
           :startpos 4
           :endpos 4
           :delim
            (copy delimcomma
             :pos 0))
          (textblock
           :text "b"
           :startpos 5
           :endpos 5)))
       (textblock
        :text ","
        :startpos 7
        :endpos 7
        :delim
         (copy delimcomma
          :pos 0))
       (textblock
        :text "{c d}"
        :startpos 8
        :endpos 12
        :delim
         (copy delimbracketcurly
          :pos 0)
        :children
         (textblocklist
          (textblock
           :text "c"
           :startpos 9
           :endpos 9)
          (textblock
           :text " "
           :startpos 10
           :endpos 10
           :delim
            (copy delimwhitespace
             :pos 0))
          (textblock
           :text "d"
           :startpos 11
           :endpos 11))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :startpos 13
            :endpos 13
            :parent
             (textblock
              :startpos 14
              :endpos 14
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest1)
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">")
                :close vx/data/textblock/delimclosing
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13)
                :children
                 (textblocklist
                  (textblock
                   :text "{a,b}"
                   :startpos 2
                   :endpos 6
                   :delim
                    (delim
                     :name "delimbracketcurly"
                     :starttext "{"
                     :endtext "}")
                   :children
                    (textblocklist
                     (textblock
                      :text "a"
                      :startpos 3
                      :endpos 3)
                     (textblock
                      :text ","
                      :startpos 4
                      :endpos 4
                      :delim
                       (delim
                        :name "delimcomma"
                        :starttext ","))
                     (textblock
                      :text "b"
                      :startpos 5
                      :endpos 5)))
                  (textblock
                   :text ","
                   :startpos 7
                   :endpos 7
                   :delim
                    (delim
                     :name "delimcomma"
                     :starttext ","))
                  (textblock
                   :text "{c d}"
                   :startpos 8
                   :endpos 12
                   :delim
                    (delim
                     :name "delimbracketcurly"
                     :starttext "{"
                     :endtext "}")
                   :children
                    (textblocklist
                     (textblock
                      :text "c"
                      :startpos 9
                      :endpos 9)
                     (textblock
                      :text " "
                      :startpos 10
                      :endpos 10
                      :delim
                       (delim
                        :name "delimwhitespace"
                        :starttext ":whitespace"))
                     (textblock
                      :text "d"
                      :startpos 11
                      :endpos 11)))))))
          :actual
           (textblock
            :startpos 13
            :endpos 13
            :parent
             (textblock
              :startpos 14
              :endpos 14
              :delim
               (delim
                :delimlist vx/data/textblock/delimlisttest1)
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">")
                :close vx/data/textblock/delimclosing
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13)
                :children
                 (textblocklist
                  (textblock
                   :text "{a,b}"
                   :startpos 2
                   :endpos 6
                   :delim
                    (delim
                     :name "delimbracketcurly"
                     :starttext "{"
                     :endtext "}")
                   :children
                    (textblocklist
                     (textblock
                      :text "a"
                      :startpos 3
                      :endpos 3)
                     (textblock
                      :text ","
                      :startpos 4
                      :endpos 4
                      :delim
                       (delim
                        :name "delimcomma"
                        :starttext ","))
                     (textblock
                      :text "b"
                      :startpos 5
                      :endpos 5)))
                  (textblock
                   :text ","
                   :startpos 7
                   :endpos 7
                   :delim
                    (delim
                     :name "delimcomma"
                     :starttext ","))
                  (textblock
                   :text "{c d}"
                   :startpos 8
                   :endpos 12
                   :delim
                    (delim
                     :name "delimbracketcurly"
                     :starttext "{"
                     :endtext "}")
                   :children
                    (textblocklist
                     (textblock
                      :text "c"
                      :startpos 9
                      :endpos 9)
                     (textblock
                      :text " "
                      :startpos 10
                      :endpos 10
                      :delim
                       (delim
                        :name "delimwhitespace"
                        :starttext ":whitespace"))
                     (textblock
                      :text "d"
                      :startpos 11
                      :endpos 11)))))))))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock<-open-textblock"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (textblock
  :text "c}"
  :startpos 4
  :endpos 5
  :close
   (copy delimclose
    :starttext "}")
  :parent
   (textblock
    :text "{c}"
    :startpos 3
    :endpos 5
    :delim
     (copy delimbracketcurly
      :pos 0)
    :parent
     (textblock
      :text "ab{c}"
      :startpos 1
      :endpos 5
      :children
       (textblocklist
        (textblock
         :text "ab"
         :startpos 1
         :endpos 2)))))
 (textblock<-open-textblock
  (copy delimbracketcurly
   :pos 3)
  (textblock
   :text "ab{c}"
   :startpos 1
   :endpos 5
   :delim delimbracketcurly
   :parent
    (textblock
     :text "ab{c}"
     :startpos 1
     :endpos 5))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "c}"
            :startpos 4
            :endpos 5
            :close
             (delim
              :name "delimclose"
              :starttext "}")
            :parent
             (textblock
              :text "{c}"
              :startpos 3
              :endpos 5
              :delim
               (delim
                :name "delimbracketcurly"
                :starttext "{"
                :endtext "}")
              :parent
               (textblock
                :text "ab{c}"
                :startpos 1
                :endpos 5
                :children
                 (textblocklist
                  (textblock
                   :text "ab"
                   :startpos 1
                   :endpos 2)))))
          :actual
           (textblock
            :text "c}"
            :startpos 4
            :endpos 5
            :close
             (delim
              :name "delimclose"
              :starttext "}")
            :parent
             (textblock
              :text "{c}"
              :startpos 3
              :endpos 5
              :delim
               (delim
                :name "delimbracketcurly"
                :starttext "{"
                :endtext "}")
              :parent
               (textblock
                :text "ab{c}"
                :startpos 1
                :endpos 5
                :children
                 (textblocklist
                  (textblock
                   :text "ab"
                   :startpos 1
                   :endpos 2)))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "{a,b},{c d}>"
  :startpos 2
  :endpos 13
  :delim
   (delim
    :delimlist delimlisttest2)
  :close
   (copy delimclose
    :starttext ">")
  :parent
   (textblock
    :text "<{a,b},{c d}>"
    :startpos 1
    :endpos 13
    :delim
     (copy delimbracketangle
      :delimlist delimlisttest1)
    :parent
     (textblock
      :text "<{a,b},{c d}>"
      :startpos 1
      :endpos 13)))
 (textblock<-open-textblock
  (copy delimtest2
   :pos 1)
  (textblock
   :text "<{a,b},{c d}>"
   :startpos 1
   :endpos 13
   :delim delimtest1
   :parent
    (textblock
     :text "<{a,b},{c d}>"
     :startpos 1
     :endpos 13))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "{a,b},{c d}>"
            :startpos 2
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest2)
            :close
             (delim
              :name "delimclose"
              :starttext ">")
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :delim
               (delim
                :name "delimbracketangle"
                :starttext "<"
                :endtext ">"
                :delimlist vx/data/textblock/delimlisttest1)
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13)))
          :actual
           (textblock
            :text "{a,b},{c d}>"
            :startpos 2
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest2)
            :close
             (delim
              :name "delimclose"
              :starttext ">")
            :parent
             (textblock
              :text "<{a,b},{c d}>"
              :startpos 1
              :endpos 13
              :delim
               (delim
                :name "delimbracketangle"
                :starttext "<"
                :endtext ">"
                :delimlist vx/data/textblock/delimlisttest1)
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13)))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "a,b},{c d}>"
  :startpos 3
  :endpos 13
  :delim
   (delim
    :delimlist delimlisttest3)
  :close
   (copy delimclose
    :starttext "}")
  :parent
   (textblock
    :text "{a,b},{c d}>"
    :startpos 2
    :endpos 13
    :delim
     (copy delimbracketcurly
      :delimlist delimlisttest2)
    :close
     (copy delimclose
      :starttext ">")
    :parent
     (textblock
      :text "<{a,b},{c d}>"
      :startpos 1
      :endpos 13
      :delim
       (copy delimbracketangle
        :pos 0)
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13))))
 (textblock<-open-textblock
  (copy delimtest3
   :pos 1)
  (textblock
   :text "{a,b},{c d}>"
   :startpos 2
   :endpos 13
   :delim
    (delim
     :delimlist delimlisttest2)
   :close
    (copy delimclose
     :starttext ">")
   :parent
    (textblock
     :text "<{a,b},{c d}>"
     :startpos 1
     :endpos 13
     :delim
      (copy delimbracketangle
       :pos 0)
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13)))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "a,b},{c d}>"
            :startpos 3
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest3)
            :close
             (delim
              :name "delimclose"
              :starttext "}")
            :parent
             (textblock
              :text "{a,b},{c d}>"
              :startpos 2
              :endpos 13
              :delim
               (delim
                :name "delimbracketcurly"
                :starttext "{"
                :endtext "}"
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">")
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13))))
          :actual
           (textblock
            :text "a,b},{c d}>"
            :startpos 3
            :endpos 13
            :delim
             (delim
              :delimlist vx/data/textblock/delimlisttest3)
            :close
             (delim
              :name "delimclose"
              :starttext "}")
            :parent
             (textblock
              :text "{a,b},{c d}>"
              :startpos 2
              :endpos 13
              :delim
               (delim
                :name "delimbracketcurly"
                :starttext "{"
                :endtext "}"
                :delimlist vx/data/textblock/delimlisttest2)
              :close
               (delim
                :name "delimclose"
                :starttext ">")
              :parent
               (textblock
                :text "<{a,b},{c d}>"
                :startpos 1
                :endpos 13
                :delim
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">")
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13))))))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock<-single-textblock"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (textblock
  :text "a"
  :startpos 3
  :endpos 3
  :parent
   (textblock
    :text ","
    :startpos 4
    :endpos 4
    :delim
     (copy delimcomma
      :pos 0)
    :parent
     (textblock
      :text "b},{c d}>"
      :startpos 5
      :endpos 13
      :delim
       (delim
        :delimlist delimlisttest3)
      :close
       (copy delimclose
        :starttext "}")
      :parent
       (textblock
        :text "{a,b},{c d}>"
        :startpos 2
        :endpos 13
        :delim
         (copy delimbracketcurly
          :pos 0)
        :close
         (copy delimclose
          :starttext ">")
        :parent
         (textblock
          :text "<{a,b},{c d}>"
          :startpos 1
          :endpos 13
          :delim
           (copy delimbracketangle
            :pos 0)
          :parent
           (textblock
            :text "<{a,b},{c d}>"
            :startpos 1
            :endpos 13))))))
 (textblock<-single-textblock
  (copy delimcomma
   :pos 2)
  (textblock
   :text "a,b},{c d}>"
   :startpos 3
   :endpos 13
   :delim
    (delim
     :delimlist delimlisttest3)
   :close
    (copy delimclose
     :starttext "}")
   :parent
    (textblock
     :text "{a,b},{c d}>"
     :startpos 2
     :endpos 13
     :delim
      (copy delimbracketcurly
       :pos 0)
     :close
      (copy delimclose
       :starttext ">")
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13
       :delim
        (copy delimbracketangle
         :pos 0)
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "a"
            :startpos 3
            :endpos 3
            :parent
             (textblock
              :text ","
              :startpos 4
              :endpos 4
              :delim
               (delim
                :name "delimcomma"
                :starttext ",")
              :parent
               (textblock
                :text "b},{c d}>"
                :startpos 5
                :endpos 13
                :delim
                 (delim
                  :delimlist vx/data/textblock/delimlisttest3)
                :close
                 (delim
                  :name "delimclose"
                  :starttext "}")
                :parent
                 (textblock
                  :text "{a,b},{c d}>"
                  :startpos 2
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}")
                  :close
                   (delim
                    :name "delimclose"
                    :starttext ">")
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13
                    :delim
                     (delim
                      :name "delimbracketangle"
                      :starttext "<"
                      :endtext ">")
                    :parent
                     (textblock
                      :text "<{a,b},{c d}>"
                      :startpos 1
                      :endpos 13))))))
          :actual
           (textblock
            :text "a"
            :startpos 3
            :endpos 3
            :parent
             (textblock
              :text ","
              :startpos 4
              :endpos 4
              :delim
               (delim
                :name "delimcomma"
                :starttext ",")
              :parent
               (textblock
                :text "b},{c d}>"
                :startpos 5
                :endpos 13
                :delim
                 (delim
                  :delimlist vx/data/textblock/delimlisttest3)
                :close
                 (delim
                  :name "delimclose"
                  :starttext "}")
                :parent
                 (textblock
                  :text "{a,b},{c d}>"
                  :startpos 2
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}")
                  :close
                   (delim
                    :name "delimclose"
                    :starttext ">")
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13
                    :delim
                     (delim
                      :name "delimbracketangle"
                      :starttext "<"
                      :endtext ">")
                    :parent
                     (textblock
                      :text "<{a,b},{c d}>"
                      :startpos 1
                      :endpos 13))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :startpos 7
  :endpos 7
  :parent
   (textblock
    :text ","
    :startpos 7
    :endpos 7
    :delim
     (copy delimcomma
      :pos 0)
    :parent
     (textblock
      :text "{c d}>"
      :startpos 8
      :endpos 13
      :delim
       (delim
        :delimlist delimlisttest3)
      :close
       (copy delimclose
        :starttext ">")
      :parent
       (textblock
        :text "<{a,b},{c d}>"
        :startpos 1
        :endpos 13
        :delim
         (copy delimbracketangle
          :pos 0)
        :parent
         (textblock
          :text "<{a,b},{c d}>"
          :startpos 1
          :endpos 13)
        :children
         (textblocklist
          (textblock
           :text "{a,b}"
           :startpos 2
           :endpos 6
           :delim
            (copy delimbracketcurly
           :pos 0)
           :children
            (textblocklist
             (textblock
              :text "a"
              :startpos 3
              :endpos 3)
             (textblock
              :text ","
              :startpos 4
              :endpos 4
              :delim
               (copy delimcomma
                :pos 0))
             (textblock
              :text "b"
              :startpos 5
              :endpos 5))))))))
 (textblock<-single-textblock
  (copy delimcomma
   :pos 1)
  (textblock
   :text ",{c d}>"
   :startpos 7
   :endpos 13
   :delim
    (delim
     :delimlist delimlisttest3)
   :close
    (copy delimclose
     :starttext ">")
   :parent
    (textblock
     :text "<{a,b},{c d}>"
     :startpos 1
     :endpos 13
     :delim
      (copy delimbracketangle
       :pos 0)
     :parent
      (textblock
       :text "<{a,b},{c d}>"
       :startpos 1
       :endpos 13)
     :children
      (textblocklist
       (textblock
        :text "{a,b}"
        :startpos 2
        :endpos 6
        :delim
         (copy delimbracketcurly
          :pos 0)
        :children
         (textblocklist
          (textblock
           :text "a"
           :startpos 3
           :endpos 3)
          (textblock
           :text ","
           :startpos 4
           :endpos 4
           :delim
            (copy delimcomma
             :pos 0))
          (textblock
           :text "b"
           :startpos 5
           :endpos 5))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :startpos 7
            :endpos 7
            :parent
             (textblock
              :text ","
              :startpos 7
              :endpos 7
              :delim
               (delim
                :name "delimcomma"
                :starttext ",")
              :parent
               (textblock
                :text "{c d}>"
                :startpos 8
                :endpos 13
                :delim
                 (delim
                  :delimlist vx/data/textblock/delimlisttest3)
                :close
                 (delim
                  :name "delimclose"
                  :starttext ">")
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">")
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13)
                  :children
                   (textblocklist
                    (textblock
                     :text "{a,b}"
                     :startpos 2
                     :endpos 6
                     :delim
                      (delim
                       :name "delimbracketcurly"
                       :starttext "{"
                       :endtext "}")
                     :children
                      (textblocklist
                       (textblock
                        :text "a"
                        :startpos 3
                        :endpos 3)
                       (textblock
                        :text ","
                        :startpos 4
                        :endpos 4
                        :delim
                         (delim
                          :name "delimcomma"
                          :starttext ","))
                       (textblock
                        :text "b"
                        :startpos 5
                        :endpos 5))))))))
          :actual
           (textblock
            :startpos 7
            :endpos 7
            :parent
             (textblock
              :text ","
              :startpos 7
              :endpos 7
              :delim
               (delim
                :name "delimcomma"
                :starttext ",")
              :parent
               (textblock
                :text "{c d}>"
                :startpos 8
                :endpos 13
                :delim
                 (delim
                  :delimlist vx/data/textblock/delimlisttest3)
                :close
                 (delim
                  :name "delimclose"
                  :starttext ">")
                :parent
                 (textblock
                  :text "<{a,b},{c d}>"
                  :startpos 1
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">")
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13)
                  :children
                   (textblocklist
                    (textblock
                     :text "{a,b}"
                     :startpos 2
                     :endpos 6
                     :delim
                      (delim
                       :name "delimbracketcurly"
                       :starttext "{"
                       :endtext "}")
                     :children
                      (textblocklist
                       (textblock
                        :text "a"
                        :startpos 3
                        :endpos 3)
                       (textblock
                        :text ","
                        :startpos 4
                        :endpos 4
                        :delim
                         (delim
                          :name "delimcomma"
                          :starttext ","))
                       (textblock
                        :text "b"
                        :startpos 5
                        :endpos 5))))))))))
       (testdescribe
        :describename
         "(test
 (textblock
  :text "c"
  :startpos 9
  :endpos 9
  :parent
   (textblock
    :text " "
    :startpos 10
    :endpos 10
    :delim
     (copy delimwhitespace
      :pos 0)
    :parent
     (textblock
      :text "d}>"
      :startpos 11
      :endpos 13
      :delim
       (delim
        :delimlist delimlisttest3)
      :close
       (copy delimclose
        :starttext "}")
      :parent
       (textblock
        :text "{c d}>"
        :startpos 8
        :endpos 13
        :delim
         (copy delimbracketcurly
          :delimlist delimlisttest2)
        :close
         (copy delimclose
          :starttext ">")
        :parent
         (textblock
          :text "<{a,b},{c d}>"
          :startpos 1
          :endpos 13
          :delim
           (copy delimbracketangle
            :delimlist delimlisttest1)
          :parent
           (textblock
            :text "<{a,b},{c d}>"
            :startpos 1
            :endpos 13)
          :children
           (textblocklist
            (textblock
             :text "{a,b}"
             :startpos 2
             :endpos 6
             :delim
              (copy delimbracketcurly
               :pos 0)
             :children
              (textblocklist
               (textblock
                :text "a"
                :startpos 3
                :endpos 3)
               (textblock
                :text ","
                :startpos 4
                :endpos 4
                :delim
                 (copy delimcomma
                  :pos 0))
               (textblock
                :text "b"
                :startpos 5
                :endpos 5)))
            (textblock
             :text ","
             :startpos 7
             :endpos 7
             :delim
              (copy delimcomma
               :pos 0))))))))
 (textblock<-single-textblock
  (copy delimwhitespace
   :pos 2)
  (textblock
   :text "c d}>"
   :startpos 9
   :endpos 13
   :delim
    (delim
     :delimlist delimlisttest3)
     :close
      (copy delimclose
       :starttext "}")
     :parent
      (textblock
       :text "{c d}>"
       :startpos 8
       :endpos 13
       :delim
        (copy delimbracketcurly
         :delimlist delimlisttest2)
       :close
        (copy delimclose
         :starttext ">")
       :parent
        (textblock
         :text "<{a,b},{c d}>"
         :startpos 1
         :endpos 13
         :delim
          (copy delimbracketangle
           :delimlist delimlisttest1)
         :parent
          (textblock
           :text "<{a,b},{c d}>"
           :startpos 1
           :endpos 13)
         :children
          (textblocklist
           (textblock
            :text "{a,b}"
            :startpos 2
            :endpos 6
            :delim
             (copy delimbracketcurly
              :pos 0)
            :children
             (textblocklist
              (textblock
               :text "a"
               :startpos 3
               :endpos 3)
              (textblock
               :text ","
               :startpos 4
               :endpos 4
               :delim
                (copy delimcomma
                 :pos 0))
              (textblock
               :text "b"
               :startpos 5
               :endpos 5)))
           (textblock
            :text ","
            :startpos 7
            :endpos 7
            :delim
             (copy delimcomma
              :pos 0))))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "c"
            :startpos 9
            :endpos 9
            :parent
             (textblock
              :text " "
              :startpos 10
              :endpos 10
              :delim
               (delim
                :name "delimwhitespace"
                :starttext ":whitespace")
              :parent
               (textblock
                :text "d}>"
                :startpos 11
                :endpos 13
                :delim
                 (delim
                  :delimlist vx/data/textblock/delimlisttest3)
                :close
                 (delim
                  :name "delimclose"
                  :starttext "}")
                :parent
                 (textblock
                  :text "{c d}>"
                  :startpos 8
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}"
                    :delimlist vx/data/textblock/delimlisttest2)
                  :close
                   (delim
                    :name "delimclose"
                    :starttext ">")
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13
                    :delim
                     (delim
                      :name "delimbracketangle"
                      :starttext "<"
                      :endtext ">"
                      :delimlist vx/data/textblock/delimlisttest1)
                    :parent
                     (textblock
                      :text "<{a,b},{c d}>"
                      :startpos 1
                      :endpos 13)
                    :children
                     (textblocklist
                      (textblock
                       :text "{a,b}"
                       :startpos 2
                       :endpos 6
                       :delim
                        (delim
                         :name "delimbracketcurly"
                         :starttext "{"
                         :endtext "}")
                       :children
                        (textblocklist
                         (textblock
                          :text "a"
                          :startpos 3
                          :endpos 3)
                         (textblock
                          :text ","
                          :startpos 4
                          :endpos 4
                          :delim
                           (delim
                            :name "delimcomma"
                            :starttext ","))
                         (textblock
                          :text "b"
                          :startpos 5
                          :endpos 5)))
                      (textblock
                       :text ","
                       :startpos 7
                       :endpos 7
                       :delim
                        (delim
                         :name "delimcomma"
                         :starttext ","))))))))
          :actual
           (textblock
            :text "c"
            :startpos 9
            :endpos 9
            :parent
             (textblock
              :text " "
              :startpos 10
              :endpos 10
              :delim
               (delim
                :name "delimwhitespace"
                :starttext ":whitespace")
              :parent
               (textblock
                :text "d}>"
                :startpos 11
                :endpos 13
                :delim
                 (delim
                  :delimlist vx/data/textblock/delimlisttest3)
                :close
                 (delim
                  :name "delimclose"
                  :starttext "}")
                :parent
                 (textblock
                  :text "{c d}>"
                  :startpos 8
                  :endpos 13
                  :delim
                   (delim
                    :name "delimbracketcurly"
                    :starttext "{"
                    :endtext "}"
                    :delimlist vx/data/textblock/delimlisttest2)
                  :close
                   (delim
                    :name "delimclose"
                    :starttext ">")
                  :parent
                   (textblock
                    :text "<{a,b},{c d}>"
                    :startpos 1
                    :endpos 13
                    :delim
                     (delim
                      :name "delimbracketangle"
                      :starttext "<"
                      :endtext ">"
                      :delimlist vx/data/textblock/delimlisttest1)
                    :parent
                     (textblock
                      :text "<{a,b},{c d}>"
                      :startpos 1
                      :endpos 13)
                    :children
                     (textblocklist
                      (textblock
                       :text "{a,b}"
                       :startpos 2
                       :endpos 6
                       :delim
                        (delim
                         :name "delimbracketcurly"
                         :starttext "{"
                         :endtext "}")
                       :children
                        (textblocklist
                         (textblock
                          :text "a"
                          :startpos 3
                          :endpos 3)
                         (textblock
                          :text ","
                          :startpos 4
                          :endpos 4
                          :delim
                           (delim
                            :name "delimcomma"
                            :starttext ","))
                         (textblock
                          :text "b"
                          :startpos 5
                          :endpos 5)))
                      (textblock
                       :text ","
                       :startpos 7
                       :endpos 7
                       :delim
                        (delim
                         :name "delimcomma"
                         :starttext ","))))))))))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock<-string-delim"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (textblock
  :text "a"
  :startpos 0
  :endpos 1
  :delim delimcomma)
 (textblock<-string-delim
  "a"
  delimcomma))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "a"
            :endpos 1
            :delim vx/data/textblock/delimcomma)
          :actual
           (textblock
            :text "a"
            :endpos 1
            :delim vx/data/textblock/delimcomma)))))
    (testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblocklist<-textblocklist-remove"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (textblocklist
  (textblock
   :text "+")
  (textblock
   :text "2")
  (textblock
   :text "3"))
 (textblocklist<-textblocklist-remove
  (textblocklist
   (textblock
    :text "+")
   (textblock
    :text " "
    :delim
     (copy delimwhitespace
      :pos 0))
   (textblock
    :text "2")
   (textblock
    :text " "
    :delim
     (copy delimwhitespace
      :pos 0))
   (textblock
    :text "3"))
  delimwhitespace))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblocklist
            (textblock
             :text "+")
            (textblock
             :text "2")
            (textblock
             :text "3"))
          :actual
           (textblocklist
            (textblock
             :text "+")
            (textblock
             :text "2")
            (textblock
             :text "3")))))))
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :delimbracketangle 0
      :delimbracketcurly 0
      :delimbracketsquare 0
      :delimclose 0
      :delimclosing 0
      :delimcomma 0
      :delimcomment 0
      :delimcommentblock 0
      :delimline 0
      :delimlisttest1 0
      :delimlisttest2 0
      :delimlisttest3 0
      :delimnonwhitespace 0
      :delimparen 0
      :delimquote 0
      :delimquoteblock 0
      :delimspace 0
      :delimtest1 0
      :delimtest2 0
      :delimtest3 0
      :delimtext 0
      :delimwhitespace 0)
    :funcmap
     (intmap
      :children<-textblock 0
      :delim-first<-delim-delim 2
      :delim-first<-string-delimlist 1
      :delim-pos<-string-delim 1
      :delimlist-pos<-string-delimlist 1
      :is-close 0
      :is-single 0
      :stringlist<-textblocklist 1
      :text<-textblock 1
      :textblock-addchild<-textblock-find-child 0
      :textblock-delimnotfound 5
      :textblock-findparent<-textblock 0
      :textblock-init 1
      :textblock-parse 1
      :textblock-parse-one 22
      :textblock-parse<-string-delim 0
      :textblock-replace<-textblock-find-replace 0
      :textblock-startleft<-string-delim-offset 1
      :textblock-startright<-string-delim-offset 2
      :textblock<-close-textblock 2
      :textblock<-empty-textblock 0
      :textblock<-open-textblock 3
      :textblock<-single-textblock 3
      :textblock<-string-delim 1
      :textblock<-textblock-delim 0
      :textblocklist<-textblocklist-remove 1)
    :testpkg "vx/data/textblock"
    :typemap
     (intmap
      :delim 0
      :delimlist 1
      :textblock 0
      :textblocklist 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 3
      :tests 1
      :total 26)
    :bigotimenums
     (testcoveragenums
      :pct 3
      :tests 1
      :total 26)
    :constnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 22)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 52
      :total 52)
    :funcnums
     (testcoveragenums
      :pct 65
      :tests 17
      :total 26)
    :testpkg "vx/data/textblock"
    :totalnums
     (testcoveragenums
      :pct 34
      :tests 18
      :total 52)
    :typenums
     (testcoveragenums
      :pct 25
      :tests 1
      :total 4))
  :passfail true
  :testpkg "vx/data/textblock")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :brancharrow-down 0
      :brancharrow-up 0
      :brancharrow-updown 0)
    :testpkg "vx/data/tree"
    :typemap
     (intmap
      :branch 0
      :brancharrow 0
      :branchlist 0
      :leaf 0
      :leaflist 0
      :tree 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3)
    :docnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 9)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "vx/data/tree"
    :totalnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 9)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 6))
  :passfail true
  :testpkg "vx/data/tree")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/data/xml"
     :casename "string-first<-xml"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "text"
 (string-first<-xml
  (xml
   :children
    (xmllist
     (xml
      :text "text")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "text"
          :actual "text"))))
    (testcase
     :passfail true
     :testpkg "vx/data/xml"
     :casename "textblock-xml<-string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (tb/textblock
  :text
   "<doc>
      <tag1>
        <tag2 prop1=\"val1\" prop2=\"val2\" />
      </tag1>
    </doc>"
  :startpos 1
  :endpos 70
  :children
   (tb/textblocklist
    (tb/textblock
     :text "<doc>"
     :startpos 1
     :endpos 5
     :delim
      (copy tb/delimbracketangle
       :pos 0)
     :children
      (tb/textblocklist
       (tb/textblock
        :text "doc"
        :startpos 2
        :endpos 4)))
    (tb/textblock
     :text "
  "
     :startpos 6
     :endpos 8)
    (tb/textblock
     :text "<tag1>"
     :startpos 9
     :endpos 14
     :delim
      (copy tb/delimbracketangle
       :pos 0)
     :children
      (tb/textblocklist
       (tb/textblock
        :text "tag1"
        :startpos 10
        :endpos 13)))
    (tb/textblock
     :text "
    "
     :startpos 15
     :endpos 19)
    (tb/textblock
     :text "<tag2 prop1=\"val1\" prop2=\"val2\" />"
     :startpos 20
     :endpos 53
     :delim
      (copy tb/delimbracketangle
       :pos 0)
     :children
      (tb/textblocklist
       (tb/textblock
        :text "tag2"
        :startpos 21
        :endpos 24)
       (tb/textblock
        :text " "
        :startpos 25
        :endpos 25
        :delim
         (copy tb/delimwhitespace
          :pos 0))
       (textblock
        :text "prop1"
        :startpos 26
        :endpos 30)
       (textblock
        :text "="
        :startpos 31
        :endpos 31
        :delim
         (copy delimxmlequal
          :pos 0))
       (tb/textblock
        :text "\"val1\""
        :startpos 32
        :endpos 37
        :delim
         (copy tb/delimquote
          :pos 0)
        :children
         (tb/textblocklist
          (tb/textblock
           :text "val1"
           :startpos 33
           :endpos 36)))
       (tb/textblock
        :text " "
        :startpos 38
        :endpos 38
        :delim
         (copy tb/delimwhitespace
          :pos 0))
       (tb/textblock
        :text "prop2"
        :startpos 39
        :endpos 43)
       (textblock
        :text "="
        :startpos 44
        :endpos 44
        :delim
         (copy delimxmlequal
          :pos 0))
       (tb/textblock
        :text "\"val2\""
        :startpos 45
        :endpos 50
        :delim
         (copy tb/delimquote
          :pos 0)
        :children
         (tb/textblocklist
          (tb/textblock
           :text "val2"
           :startpos 46
           :endpos 49)))
        (tb/textblock
         :text " "
         :startpos 51
         :endpos 51
         :delim
          (copy tb/delimwhitespace
           :pos 0))
        (tb/textblock
         :text "/"
         :startpos 52
         :endpos 52)))
    (tb/textblock
     :text "
  "
     :startpos 54
     :endpos 56)
    (tb/textblock
     :text "</tag1>"
     :startpos 57
     :endpos 63
     :delim
      (copy tb/delimbracketangle
       :pos 0)
     :children
      (tb/textblocklist
       (tb/textblock
        :text "/tag1"
        :startpos 58
        :endpos 62)))
    (tb/textblock
     :text "
"
     :startpos 64
     :endpos 64)
    (tb/textblock
     :text "</doc>"
     :startpos 65
     :endpos 70
     :delim
      (copy tb/delimbracketangle
       :pos 0)
     :children
      (tb/textblocklist
       (tb/textblock
        :text "/doc"
        :startpos 66
        :endpos 69)))))
 (textblock-xml<-string
  "<doc>
     <tag1>
       <tag2 prop1=\"val1\" prop2=\"val2\" />
     </tag1>
   </doc>"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text
             "<doc>
  <tag1>
    <tag2 prop1="val1" prop2="val2" />
  </tag1>
</doc>"
            :startpos 1
            :endpos 70
            :children
             (textblocklist
              (textblock
               :text "<doc>"
               :startpos 1
               :endpos 5
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "doc"
                  :startpos 2
                  :endpos 4)))
              (textblock
               :text
                "
  "
               :startpos 6
               :endpos 8)
              (textblock
               :text "<tag1>"
               :startpos 9
               :endpos 14
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "tag1"
                  :startpos 10
                  :endpos 13)))
              (textblock
               :text
                "
    "
               :startpos 15
               :endpos 19)
              (textblock
               :text "<tag2 prop1="val1" prop2="val2" />"
               :startpos 20
               :endpos 53
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "tag2"
                  :startpos 21
                  :endpos 24)
                 (textblock
                  :text " "
                  :startpos 25
                  :endpos 25
                  :delim
                   (delim
                    :name "delimwhitespace"
                    :starttext ":whitespace"))
                 (textblock
                  :text "prop1"
                  :startpos 26
                  :endpos 30)
                 (textblock
                  :text "="
                  :startpos 31
                  :endpos 31
                  :delim
                   (delim
                    :name "delimxmlequal"
                    :starttext "="))
                 (textblock
                  :text ""val1""
                  :startpos 32
                  :endpos 37
                  :delim
                   (delim
                    :name "delimquote"
                    :starttext """
                    :endtext """)
                  :children
                   (textblocklist
                    (textblock
                     :text "val1"
                     :startpos 33
                     :endpos 36)))
                 (textblock
                  :text " "
                  :startpos 38
                  :endpos 38
                  :delim
                   (delim
                    :name "delimwhitespace"
                    :starttext ":whitespace"))
                 (textblock
                  :text "prop2"
                  :startpos 39
                  :endpos 43)
                 (textblock
                  :text "="
                  :startpos 44
                  :endpos 44
                  :delim
                   (delim
                    :name "delimxmlequal"
                    :starttext "="))
                 (textblock
                  :text ""val2""
                  :startpos 45
                  :endpos 50
                  :delim
                   (delim
                    :name "delimquote"
                    :starttext """
                    :endtext """)
                  :children
                   (textblocklist
                    (textblock
                     :text "val2"
                     :startpos 46
                     :endpos 49)))
                 (textblock
                  :text " "
                  :startpos 51
                  :endpos 51
                  :delim
                   (delim
                    :name "delimwhitespace"
                    :starttext ":whitespace"))
                 (textblock
                  :text "/"
                  :startpos 52
                  :endpos 52)))
              (textblock
               :text
                "
  "
               :startpos 54
               :endpos 56)
              (textblock
               :text "</tag1>"
               :startpos 57
               :endpos 63
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "/tag1"
                  :startpos 58
                  :endpos 62)))
              (textblock
               :text
                "
"
               :startpos 64
               :endpos 64)
              (textblock
               :text "</doc>"
               :startpos 65
               :endpos 70
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "/doc"
                  :startpos 66
                  :endpos 69)))))
          :actual
           (textblock
            :text
             "<doc>
  <tag1>
    <tag2 prop1="val1" prop2="val2" />
  </tag1>
</doc>"
            :startpos 1
            :endpos 70
            :children
             (textblocklist
              (textblock
               :text "<doc>"
               :startpos 1
               :endpos 5
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "doc"
                  :startpos 2
                  :endpos 4)))
              (textblock
               :text
                "
  "
               :startpos 6
               :endpos 8)
              (textblock
               :text "<tag1>"
               :startpos 9
               :endpos 14
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "tag1"
                  :startpos 10
                  :endpos 13)))
              (textblock
               :text
                "
    "
               :startpos 15
               :endpos 19)
              (textblock
               :text "<tag2 prop1="val1" prop2="val2" />"
               :startpos 20
               :endpos 53
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "tag2"
                  :startpos 21
                  :endpos 24)
                 (textblock
                  :text " "
                  :startpos 25
                  :endpos 25
                  :delim
                   (delim
                    :name "delimwhitespace"
                    :starttext ":whitespace"))
                 (textblock
                  :text "prop1"
                  :startpos 26
                  :endpos 30)
                 (textblock
                  :text "="
                  :startpos 31
                  :endpos 31
                  :delim
                   (delim
                    :name "delimxmlequal"
                    :starttext "="))
                 (textblock
                  :text ""val1""
                  :startpos 32
                  :endpos 37
                  :delim
                   (delim
                    :name "delimquote"
                    :starttext """
                    :endtext """)
                  :children
                   (textblocklist
                    (textblock
                     :text "val1"
                     :startpos 33
                     :endpos 36)))
                 (textblock
                  :text " "
                  :startpos 38
                  :endpos 38
                  :delim
                   (delim
                    :name "delimwhitespace"
                    :starttext ":whitespace"))
                 (textblock
                  :text "prop2"
                  :startpos 39
                  :endpos 43)
                 (textblock
                  :text "="
                  :startpos 44
                  :endpos 44
                  :delim
                   (delim
                    :name "delimxmlequal"
                    :starttext "="))
                 (textblock
                  :text ""val2""
                  :startpos 45
                  :endpos 50
                  :delim
                   (delim
                    :name "delimquote"
                    :starttext """
                    :endtext """)
                  :children
                   (textblocklist
                    (textblock
                     :text "val2"
                     :startpos 46
                     :endpos 49)))
                 (textblock
                  :text " "
                  :startpos 51
                  :endpos 51
                  :delim
                   (delim
                    :name "delimwhitespace"
                    :starttext ":whitespace"))
                 (textblock
                  :text "/"
                  :startpos 52
                  :endpos 52)))
              (textblock
               :text
                "
  "
               :startpos 54
               :endpos 56)
              (textblock
               :text "</tag1>"
               :startpos 57
               :endpos 63
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "/tag1"
                  :startpos 58
                  :endpos 62)))
              (textblock
               :text
                "
"
               :startpos 64
               :endpos 64)
              (textblock
               :text "</doc>"
               :startpos 65
               :endpos 70
               :delim
                (delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (textblocklist
                 (textblock
                  :text "/doc"
                  :startpos 66
                  :endpos 69)))))))))
    (testcase
     :passfail true
     :testpkg "vx/data/xml"
     :casename "xml-angle<-xml-textblock"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (xml
  :tag :notag)
 (xml-angle<-xml-textblock
  (empty xml)
  (empty tb/textblock)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag ":notag")
          :actual
           (xml
            :tag ":notag")))
       (testdescribe
        :describename
         "(test
 (xml
  :tag "doc")
 (xml-angle<-xml-textblock
  (empty xml)
  (tb/textblock
   :text "<doc>"
   :startpos 1
   :endpos 5
   :delim
    (copy tb/delimbracketangle
     :pos 0)
   :children
    (tb/textblocklist
     (tb/textblock
      :text "doc"
      :startpos 2
      :endpos 4)))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "doc")
          :actual
           (xml
            :tag "doc")))
       (testdescribe
        :describename
         "(test
 (xml
  :tag "tag1"
  :children
   (xmllist
    (xml
     :tag "tag2"
     :propmap
      (stringmap
       :prop1 "val1"
       :prop2 "val2"))))
 (xml-angle<-xml-textblock
  (xml
   :tag "tag1")
  (tb/textblock
   :text "<tag2 prop1=\"val1\" prop2=\"val2\" />"
   :startpos 20
   :endpos 53
   :delim
    (copy tb/delimbracketangle
     :pos 0)
   :children
    (tb/textblocklist
     (tb/textblock
      :text "tag2"
      :startpos 21
      :endpos 24)
     (tb/textblock
      :text " "
      :startpos 25
      :endpos 25
      :delim
       (copy tb/delimwhitespace
        :pos 0))
     (tb/textblock
      :text "prop1"
      :startpos 26
      :endpos 30)
     (tb/textblock
      :text "="
      :startpos 31
      :endpos 31
      :delim
       (copy delimxmlequal
        :pos 0))
     (tb/textblock
      :text "\"val1\""
      :startpos 32
      :endpos 37
      :delim
       (copy tb/delimquote
        :pos 0)
      :children
       (tb/textblocklist
        (tb/textblock
         :text "val1"
         :startpos 33
         :endpos 36)))
     (tb/textblock
      :text " "
      :startpos 38
      :endpos 38
      :delim
       (copy tb/delimwhitespace
        :pos 0))
     (tb/textblock
      :text "prop2"
      :startpos 39
      :endpos 43)
     (tb/textblock
      :text "="
      :startpos 44
      :endpos 44
      :delim
       (copy delimxmlequal
        :pos 0))
     (tb/textblock
      :text "\"val2\""
      :startpos 45
      :endpos 50
      :delim
       (copy tb/delimquote
        :pos 0)
      :children
       (tb/textblocklist
        (tb/textblock
         :text "val2"
         :startpos 46
         :endpos 49)))
      (tb/textblock
       :text " "
       :startpos 51
       :endpos 51
       :delim
        (copy tb/delimwhitespace
         :pos 0))
      (tb/textblock
       :text "/"
       :startpos 52
       :endpos 52)))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "tag1"
            :children
             (xmllist
              (xml
               :tag "tag2"
               :propmap
                (stringmap
                 :prop1 "val1"
                 :prop2 "val2"))))
          :actual
           (xml
            :tag "tag1"
            :children
             (xmllist
              (xml
               :tag "tag2"
               :propmap
                (stringmap
                 :prop1 "val1"
                 :prop2 "val2"))))))))
    (testcase
     :passfail true
     :testpkg "vx/data/xml"
     :casename "xml-close<-xml-textblock"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (xml
  :tag "doc")
 (xml-close<-xml-textblock
  (xml
   :tag "doc")
  (tb/textblock
   :text "/")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "doc")
          :actual
           (xml
            :tag "doc")))
       (testdescribe
        :describename
         "(test
 (xml
  :tag "doc")
 (xml-close<-xml-textblock
  (xml
   :tag "doc")
  (tb/textblock
   :text "</doc>")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "doc")
          :actual
           (xml
            :tag "doc")))
       (testdescribe
        :describename
         "(test
 (xml
  :tag "doc"
  (msg
   :severity 2
   :text "Invalid Xml Close tag: /wrong"))
 (xml-close<-xml-textblock
  (xml
   :tag "doc")
  (tb/textblock
   :text "/wrong")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "doc"
            (msgblock
             :msgs
              (msglist
               (msg
                :severity 2
                :text "Invalid Xml Close tag: /wrong"))))
          :actual
           (xml
            :tag "doc"
            (msgblock
             :msgs
              (msglist
               (msg
                :severity 2
                :text "Invalid Xml Close tag: /wrong"))))))
       (testdescribe
        :describename
         "(test
 (xml
  :tag "top"
  :children
   (xmllist
    (xml
     :tag "doc")))
 (xml-close<-xml-textblock
  (xml
   :tag "doc"
   :parent
    (xml
     :tag "top"))
  (tb/textblock
   :text "/")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "top"
            :children
             (xmllist
              (xml
               :tag "doc")))
          :actual
           (xml
            :tag "top"
            :children
             (xmllist
              (xml
               :tag "doc")))))))
    (testcase
     :passfail true
     :testpkg "vx/data/xml"
     :casename "xml-parse<-xml-textblock"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (xml
  :tag "doc")
 (xml-parse<-xml-textblock
  (empty xml)
  (tb/textblock
   :text "<doc>"
   :delim
    (copy tb/delimbracketangle
     :pos 0)
   :children
    (tb/textblocklist
     (tb/textblock
      :text "doc")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "doc")
          :actual
           (xml
            :tag "doc")))
       (testdescribe
        :describename
         "(test
 (xml
  :tag "doc")
 (xml-parse<-xml-textblock
  (xml
   :tag "doc")
  (tb/textblock
   :text "
  "
   :delim
    (copy tb/delimwhitespace
     :pos 0))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "doc")
          :actual
           (xml
            :tag "doc")))
       (testdescribe
        :describename
         "(test
 (xml
  :tag "tag1"
  :parent
   (xml
    :tag "doc"))
 (xml-parse<-xml-textblock
  (xml
   :tag "doc")
  (tb/textblock
   :text "<tag1>"
   :delim
    (copy tb/delimbracketangle
     :pos 0)
   :children
    (tb/textblocklist
     (tb/textblock
      :text "tag1")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "tag1"
            :parent
             (xml
              :tag "doc"))
          :actual
           (xml
            :tag "tag1"
            :parent
             (xml
              :tag "doc"))))
       (testdescribe
        :describename
         "(test
 (xml
  :tag "tag1"
  :children
   (xmllist
    (xml
     :tag "tag2"
     :propmap
      (stringmap
       :prop1 "val1"
       :prop2 "val2")))
  :parent
   (xml
    :tag "doc"))
 (xml-parse<-xml-textblock
  (xml
   :tag "tag1"
   :parent
    (xml
     :tag "doc"))
  (tb/textblock
   :text "<tag2 prop1=\"val1\" prop2=\"val2\" />"
   :delim
    (copy tb/delimbracketangle
     :pos 0)
   :children
    (tb/textblocklist
     (tb/textblock
      :text "tag2")
     (tb/textblock
      :text " "
      :delim
       (copy tb/delimwhitespace
        :pos 0))
     (tb/textblock
      :text "prop1")
     (tb/textblock
      :text "="
      :delim
       (copy delimxmlequal
        :pos 0))
     (tb/textblock
      :text "\"val1\""
      :delim
       (copy tb/delimquote
        :pos 0)
      :children
       (tb/textblocklist
        (tb/textblock
         :text "val1")))
     (tb/textblock
      :text " "
      :delim
       (copy tb/delimwhitespace
        :pos 0))
     (tb/textblock
      :text "prop2")
     (tb/textblock
      :text "="
      :delim
       (copy delimxmlequal
        :pos 0))
     (tb/textblock
      :text "\"val2\""
      :delim
       (copy tb/delimquote
        :pos 0)
      :children
       (tb/textblocklist
        (tb/textblock
         :text "val2")))
      (tb/textblock
       :text " "
       :delim
        (copy tb/delimwhitespace
         :pos 0))
      (tb/textblock
       :text "/")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "tag1"
            :children
             (xmllist
              (xml
               :tag "tag2"
               :propmap
                (stringmap
                 :prop1 "val1"
                 :prop2 "val2")))
            :parent
             (xml
              :tag "doc"))
          :actual
           (xml
            :tag "tag1"
            :children
             (xmllist
              (xml
               :tag "tag2"
               :propmap
                (stringmap
                 :prop1 "val1"
                 :prop2 "val2")))
            :parent
             (xml
              :tag "doc"))))
       (testdescribe
        :describename
         "(test
 (xml
  :tag "doc"
  :children
   (xmllist
    (xml
    :tag "tag1"
    :children
     (xmllist
      (xml
       :tag "tag2"
       :propmap
        (stringmap
         :prop1 "val1"
         :prop2 "val2"))))))
 (xml-parse<-xml-textblock
  (xml
   :tag "tag1"
   :children
    (xmllist
     (xml
      :tag "tag2"
      :propmap
       (stringmap
        :prop1 "val1"
        :prop2 "val2")))
   :parent
    (xml
     :tag "doc"))
  (tb/textblock
   :text "</tag1>"
   :delim
    (copy tb/delimbracketangle
     :pos 0)
   :children
    (tb/textblocklist
     (tb/textblock
      :text "/tag1")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "doc"
            :children
             (xmllist
              (xml
               :tag "tag1"
               :children
                (xmllist
                 (xml
                  :tag "tag2"
                  :propmap
                   (stringmap
                    :prop1 "val1"
                    :prop2 "val2"))))))
          :actual
           (xml
            :tag "doc"
            :children
             (xmllist
              (xml
               :tag "tag1"
               :children
                (xmllist
                 (xml
                  :tag "tag2"
                  :propmap
                   (stringmap
                    :prop1 "val1"
                    :prop2 "val2"))))))))))
    (testcase
     :passfail true
     :testpkg "vx/data/xml"
     :casename "xml-parse<-xml-textblocklist"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (xml
  :tag "doc"
  :children
   (xmllist
    (xml
     :tag "tag1"
     :children
      (xmllist
       (xml
        :tag "tag2"
        :propmap
         (stringmap
          :prop1 "val1"
          :prop2 "val2"))))))
 (xml-parse<-xml-textblocklist
  (empty xml)
  (tb/textblocklist
   (tb/textblock
    :text "<doc>"
    :startpos 1
    :endpos 5
    :delim
     (copy tb/delimbracketangle
      :pos 0)
    :children
     (tb/textblocklist
      (tb/textblock
       :text "doc"
       :startpos 2
       :endpos 4)))
   (tb/textblock
    :text "
  "
    :startpos 6
    :endpos 8
    :delim
     (copy tb/delimwhitespace
      :pos 0))
   (tb/textblock
    :text "<tag1>"
    :startpos 9
    :endpos 14
    :delim
     (copy tb/delimbracketangle
      :pos 0)
    :children
     (tb/textblocklist
      (tb/textblock
       :text "tag1"
       :startpos 10
       :endpos 13)))
   (tb/textblock
    :text "
    "
    :startpos 15
    :endpos 19
    :delim
     (copy tb/delimwhitespace
      :pos 0))
   (tb/textblock
    :text "<tag2 prop1=\"val1\" prop2=\"val2\" />"
    :startpos 20
    :endpos 53
    :delim
     (copy tb/delimbracketangle
      :pos 0)
    :children
     (tb/textblocklist
      (tb/textblock
       :text "tag2"
       :startpos 21
       :endpos 24)
      (tb/textblock
       :text " "
       :startpos 25
       :endpos 25
       :delim
        (copy tb/delimwhitespace
         :pos 0))
      (tb/textblock
       :text "prop1"
       :startpos 26
       :endpos 30)
      (tb/textblock
       :text "="
       :startpos 31
       :endpos 31
       :delim
        (copy delimxmlequal
         :pos 0))
      (tb/textblock
       :text "\"val1\""
       :startpos 32
       :endpos 37
       :delim
        (copy tb/delimquote
         :pos 0)
       :children
        (tb/textblocklist
         (tb/textblock
          :text "val1"
          :startpos 33
          :endpos 36)))
      (tb/textblock
       :text " "
       :startpos 38
       :endpos 38
       :delim
        (copy tb/delimwhitespace
         :pos 0))
      (tb/textblock
       :text "prop2"
       :startpos 39
       :endpos 43)
      (tb/textblock
       :text "="
       :startpos 44
       :endpos 44
       :delim
        (copy delimxmlequal
         :pos 0))
      (tb/textblock
       :text "\"val2\""
       :startpos 45
       :endpos 50
       :delim
        (copy tb/delimquote
         :pos 0)
       :children
        (tb/textblocklist
         (tb/textblock
          :text "val2"
          :startpos 46
          :endpos 49)))
       (tb/textblock
        :text " "
        :startpos 51
        :endpos 51
        :delim
         (copy tb/delimwhitespace
          :pos 0))
       (tb/textblock
        :text "/"
        :startpos 52
        :endpos 52)))
   (tb/textblock
    :text "
  "
    :startpos 54
    :endpos 56
    :delim
     (copy tb/delimwhitespace
      :pos 0))
   (tb/textblock
    :text "</tag1>"
    :startpos 57
    :endpos 63
    :delim
     (copy tb/delimbracketangle
      :pos 0)
    :children
     (tb/textblocklist
      (tb/textblock
       :text "/tag1"
       :startpos 58
       :endpos 62)))
   (tb/textblock
    :text "
"
    :startpos 64
    :endpos 64
    :delim
     (copy tb/delimwhitespace
      :pos 0))
   (tb/textblock
    :text "</doc>"
    :startpos 65
    :endpos 70
    :delim
     (copy tb/delimbracketangle
      :pos 0)
    :children
     (tb/textblocklist
      (tb/textblock
       :text "/doc"
       :startpos 66
       :endpos 69))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "doc"
            :children
             (xmllist
              (xml
               :tag "tag1"
               :children
                (xmllist
                 (xml
                  :tag "tag2"
                  :propmap
                   (stringmap
                    :prop1 "val1"
                    :prop2 "val2"))))))
          :actual
           (xml
            :tag "doc"
            :children
             (xmllist
              (xml
               :tag "tag1"
               :children
                (xmllist
                 (xml
                  :tag "tag2"
                  :propmap
                   (stringmap
                    :prop1 "val1"
                    :prop2 "val2"))))))))))
    (testcase
     :passfail true
     :testpkg "vx/data/xml"
     :casename "xml-properties<-xml-textblocklist"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (xml
  :tag "doc"
  :children
   (xmllist
    (xml
     :tag "tag2"
     :propmap
      (stringmap
       :prop1 "val1"
       :prop2 "val2"))))
 (xml-properties<-xml-textblocklist
  (xml
   :tag :notag
   :parent
    (xml
     :tag "doc"))
  (tb/textblocklist
   (tb/textblock
    :text "tag2")
   (tb/textblock
    :text " "
    :delim
     (copy tb/delimwhitespace
      :pos 0))
   (tb/textblock
    :text "prop1")
   (tb/textblock
    :text "="
    :delim
     (copy delimxmlequal
      :pos 0))
   (tb/textblock
    :text "\"val1\""
    :startpos 32
    :endpos 37
    :delim
     (copy tb/delimquote
      :pos 0)
    :children
     (tb/textblocklist
      (tb/textblock
       :text "val1")))
   (tb/textblock
    :text " "
    :delim
     (copy tb/delimwhitespace
      :pos 0))
   (tb/textblock
    :text "prop2")
   (tb/textblock
    :text "="
    :delim
     (copy delimxmlequal
      :pos 0))
   (tb/textblock
    :text "\"val2\""
    :delim
     (copy tb/delimquote
      :pos 0)
    :children
     (tb/textblocklist
      (tb/textblock
       :text "val2")))
   (tb/textblock
    :text " "
    :delim
     (copy tb/delimwhitespace
      :pos 0))
   (tb/textblock
    :text "/"))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "doc"
            :children
             (xmllist
              (xml
               :tag "tag2"
               :propmap
                (stringmap
                 :prop1 "val1"
                 :prop2 "val2"))))
          :actual
           (xml
            :tag "doc"
            :children
             (xmllist
              (xml
               :tag "tag2"
               :propmap
                (stringmap
                 :prop1 "val1"
                 :prop2 "val2"))))))))
    (testcase
     :passfail true
     :testpkg "vx/data/xml"
     :casename "xml-property<-xml-textblock"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (xml
  :tag "tag1")
 (xml-property<-xml-textblock
  (xml
   :tag ":notag")
  (tb/textblock
   :text "tag1")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "tag1")
          :actual
           (xml
            :tag "tag1")))
       (testdescribe
        :describename
         "(test
 (xml
  :tag "tag1"
  :prop "prop1")
 (xml-property<-xml-textblock
  (xml
   :tag "tag1")
  (tb/textblock
   :text "prop1")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "tag1"
            :prop "prop1")
          :actual
           (xml
            :tag "tag1"
            :prop "prop1")))
       (testdescribe
        :describename
         "(test
 (xml
  :tag "tag1"
  :propmap
   (stringmap
    :prop1 "val1"))
 (xml-property<-xml-textblock
  (xml
   :tag "tag1"
   :prop "prop1")
  (tb/textblock
   :delim
    (copy tb/delimquote
     :pos 0)
   :children
    (tb/textblocklist
     (tb/textblock
      :text "val1")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "tag1"
            :propmap
             (stringmap
              :prop1 "val1"))
          :actual
           (xml
            :tag "tag1"
            :propmap
             (stringmap
              :prop1 "val1"))))))
    (testcase
     :passfail true
     :testpkg "vx/data/xml"
     :casename "xml-text<-xml-textblock"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (xml
  :text "text1")
 (xml-text<-xml-textblock
  (empty xml)
  (tb/textblock
   :text "text1")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :text "text1")
          :actual
           (xml
            :text "text1")))
       (testdescribe
        :describename
         "(test
 (xml
  :tag "doc"
  :children
   (xmllist
    (xml
     :text "text1")))
 (xml-text<-xml-textblock
  (xml
   :tag "doc")
  (tb/textblock
   :text "text1")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "doc"
            :children
             (xmllist
              (xml
               :text "text1")))
          :actual
           (xml
            :tag "doc"
            :children
             (xmllist
              (xml
               :text "text1")))))))
    (testcase
     :passfail true
     :testpkg "vx/data/xml"
     :casename "xml<-textblock"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (xml
  :tag "doc"
  :children
   (xmllist
    (xml
     :tag "tag1"
     :children
      (xmllist
       (xml
        :tag "tag2"
        :propmap
         (stringmap
          :prop1 "val1"
          :prop2 "val2"))))))
 (xml<-textblock
  (tb/textblock
   :text
    "<doc>
       <tag1>
         <tag2 prop1=\"val1\" prop2=\"val2\" />
       </tag1>
     </doc>"
   :startpos 1
   :endpos 70
   :children
    (tb/textblocklist
     (tb/textblock
      :text "<doc>"
      :startpos 1
      :endpos 5
      :delim
       (copy tb/delimbracketangle
        :pos 0)
      :children
       (tb/textblocklist
        (tb/textblock
         :text "doc"
         :startpos 2
         :endpos 4)))
     (tb/textblock
      :text "
  "
      :startpos 6
      :endpos 8
      :delim
       (copy tb/delimwhitespace
        :pos 0))
     (tb/textblock
      :text "<tag1>"
      :startpos 9
      :endpos 14
      :delim
       (copy tb/delimbracketangle
        :pos 0)
      :children
       (tb/textblocklist
        (tb/textblock
         :text "tag1"
         :startpos 10
         :endpos 13)))
     (tb/textblock
      :text "
    "
      :startpos 15
      :endpos 19
      :delim
       (copy tb/delimwhitespace
        :pos 0))
     (tb/textblock
      :text "<tag2 prop1=\"val1\" prop2=\"val2\" />"
      :startpos 20
      :endpos 53
      :delim
       (copy tb/delimbracketangle
        :pos 0)
      :children
       (tb/textblocklist
        (tb/textblock
         :text "tag2"
         :startpos 21
         :endpos 24)
        (tb/textblock
         :text " "
         :startpos 25
         :endpos 25
         :delim
          (copy tb/delimwhitespace
           :pos 0))
        (tb/textblock
         :text "prop1"
         :startpos 26
         :endpos 30)
        (tb/textblock
         :text "="
         :startpos 31
         :endpos 31
         :delim
          (copy delimxmlequal
           :pos 0))
        (tb/textblock
         :text "\"val1\""
         :startpos 32
         :endpos 37
         :delim
          (copy tb/delimquote
           :pos 0)
         :children
          (tb/textblocklist
           (tb/textblock
            :text "val1"
            :startpos 33
            :endpos 36)))
        (tb/textblock
         :text " "
         :startpos 38
         :endpos 38
         :delim
          (copy tb/delimwhitespace
           :pos 0))
        (tb/textblock
         :text "prop2"
         :startpos 39
         :endpos 43)
        (tb/textblock
         :text "="
         :startpos 44
         :endpos 44
         :delim
          (copy delimxmlequal
           :pos 0))
        (tb/textblock
         :text "\"val2\""
         :startpos 45
         :endpos 50
         :delim
          (copy tb/delimquote
           :pos 0)
         :children
          (tb/textblocklist
           (tb/textblock
            :text "val2"
            :startpos 46
            :endpos 49)))
         (tb/textblock
          :text " "
          :startpos 51
          :endpos 51
          :delim
           (copy tb/delimwhitespace
            :pos 0))
         (tb/textblock
          :text "/"
          :startpos 52
          :endpos 52)))
     (tb/textblock
      :text "
  "
      :startpos 54
      :endpos 56
      :delim
       (copy tb/delimwhitespace
        :pos 0))
     (tb/textblock
      :text "</tag1>"
      :startpos 57
      :endpos 63
      :delim
       (copy tb/delimbracketangle
        :pos 0)
      :children
       (tb/textblocklist
        (tb/textblock
         :text "/tag1"
         :startpos 58
         :endpos 62)))
     (tb/textblock
      :text "
"
      :startpos 64
      :endpos 64
      :delim
       (copy tb/delimwhitespace
        :pos 0))
     (tb/textblock
      :text "</doc>"
      :startpos 65
      :endpos 70
      :delim
       (copy tb/delimbracketangle
        :pos 0)
      :children
       (tb/textblocklist
        (tb/textblock
         :text "/doc"
         :startpos 66
         :endpos 69)))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (xml
            :tag "doc"
            :children
             (xmllist
              (xml
               :tag "tag1"
               :children
                (xmllist
                 (xml
                  :tag "tag2"
                  :propmap
                   (stringmap
                    :prop1 "val1"
                    :prop2 "val2"))))))
          :actual
           (xml
            :tag "doc"
            :children
             (xmllist
              (xml
               :tag "tag1"
               :children
                (xmllist
                 (xml
                  :tag "tag2"
                  :propmap
                   (stringmap
                    :prop1 "val1"
                    :prop2 "val2")))))))))))
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :delimxml 0
      :delimxmlcdata 0
      :delimxmlcomment 0
      :delimxmlequal 0)
    :funcmap
     (intmap
      :string-first<-xml 1
      :textblock-xml<-string 1
      :xml-angle<-xml-textblock 3
      :xml-close<-xml-textblock 4
      :xml-parse<-xml-textblock 5
      :xml-parse<-xml-textblocklist 1
      :xml-properties<-xml-textblocklist 1
      :xml-property<-xml-textblock 3
      :xml-read<-file 0
      :xml-text<-xml-textblock 2
      :xml<-file 0
      :xml<-string 0
      :xml<-textblock 1)
    :testpkg "vx/data/xml"
    :typemap
     (intmap
      :xml 0
      :xmllist 0
      :xmlpropmap 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 13)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 13)
    :constnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 4)
    :docnums
     (testcoveragenums
      :pct 65
      :tests 13
      :total 20)
    :funcnums
     (testcoveragenums
      :pct 76
      :tests 10
      :total 13)
    :testpkg "vx/data/xml"
    :totalnums
     (testcoveragenums
      :pct 50
      :tests 10
      :total 20)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3))
  :passfail true
  :testpkg "vx/data/xml")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :event-click 0
      :event-move 0)
    :funcmap
     (intmap
      :any<-from-to 0)
    :testpkg "vx/event"
    :typemap
     (intmap
      :event 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1)
    :constnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 2)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 4
      :total 4)
    :funcnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1)
    :testpkg "vx/event"
    :totalnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 4)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1))
  :passfail true
  :testpkg "vx/event")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "any<-macro"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 5
 (any<-macro : int
  "(+ "
  (- 7 5)
  " 3)"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))))
    (testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "any<-repl"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "HelloWorld"
 (any<-repl
  (repl
   :type string
   :repllist
    (repllist
     (repl :val "Hello")
     (repl :val "World")
    ))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "HelloWorld"
          :actual "HelloWorld"))
       (testdescribe
        :describename
         "(test
 5
 (any<-repl
  (repl
   :type +
   :repllist
    (repllist
     (repl :val 2)
     (repl :val 3)))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))))
    (testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "any<-script"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 5
 (any<-script
  "(+ 2 3)"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))))
    (testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "const<-string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 infinity
 (const<-string
  "infinity"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected infinity
          :actual infinity))
       (testdescribe
        :describename
         "(test
 tb/delimcomma
 (const<-string
  "vx/data/textblock/delimcomma"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected vx/data/textblock/delimcomma
          :actual vx/data/textblock/delimcomma))))
    (testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "repl-empty<-textblock-argmap"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (repl :val 2)
 (repl-empty<-textblock-argmap
  (tb/textblock
   :text "2")
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :val 2)
          :actual
           (repl
            :val 2)))
       (testdescribe
        :describename
         "(test
 (repl :type +)
 (repl-empty<-textblock-argmap
  (tb/textblock
   :text "+")
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :type vx/core/+)
          :actual
           (repl
            :type vx/core/+)))
       (testdescribe
        :describename
         "(test
 (repl :val 2)
 (repl-empty<-textblock-argmap
  (tb/textblock
   :text "1"
   :children
    (tb/textblocklist
     (tb/textblock
      :text "2")))
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :val 2)
          :actual
           (repl
            :val 2)))
       (testdescribe
        :describename
         "(test
 (repl
  (msg<-error "Empty delim cannot have more than one child."))
 (repl-empty<-textblock-argmap
  (tb/textblock
   :text "1"
   :children
    (tb/textblocklist
     (tb/textblock
      :text "2")
     (tb/textblock
      :text "3")))
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            (msgblock
             :msgs
              (msglist
               (msg
                :severity 2
                :text "Empty delim cannot have more than one child."))))
          :actual
           (repl
            (msgblock
             :msgs
              (msglist
               (msg
                :severity 2
                :text "Empty delim cannot have more than one child."))))))))
    (testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "repl-paren<-textblock-argmap"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (repl
  :type vx/core/+
  :repllist
   (repllist
    (repl
     :val 2)
    (repl
     :val 3)))
 (repl-paren<-textblock-argmap
  (tb/textblock
   :text "(+ 2 3)"
   :delim
    (copy delimvxlispparen
     :delimlist
      (empty delimlist))
   :children
    (tb/textblocklist
     (tb/textblock
      :text "+")
     (tb/textblock
      :text " "
      :delim
       (copy tb/delimwhitespace
        :pos 0))
     (tb/textblock
      :text "2")
     (tb/textblock
      :text " "
      :delim
       (copy tb/delimwhitespace
        :pos 0))
     (tb/textblock
      :text "3")))
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :type vx/core/+
            :repllist
             (repllist
              (repl
               :val 2)
              (repl
               :val 3)))
          :actual
           (repl
            :type vx/core/+
            :repllist
             (repllist
              (repl
               :val 2)
              (repl
               :val 3)))))))
    (testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "repl<-macro"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (repl
  :type vx/core/+
  :repllist
   (repllist
    (repl
     :val 2)
    (repl
     :val 3)))
 (repl<-macro
  "(+ "
  (- 7 5)
  " 3)"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :type vx/core/+
            :repllist
             (repllist
              (repl
               :val 2)
              (repl
               :val 3)))
          :actual
           (repl
            :type vx/core/+
            :repllist
             (repllist
              (repl
               :val 2)
              (repl
               :val 3)))))))
    (testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "repl<-script"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (repl
  :val 2)
 (repl<-script
  "2"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :val 2)
          :actual
           (repl
            :val 2)))
       (testdescribe
        :describename
         "(test
 (repl
  :val infinity)
 (repl<-script
  "infinity"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :val infinity)
          :actual
           (repl
            :val infinity)))
       (testdescribe
        :describename
         "(test
 (repl
  :type +)
 (repl<-script
  "+"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :type vx/core/+)
          :actual
           (repl
            :type vx/core/+)))
       (testdescribe
        :describename
         "(test
 (repl
  :type +
  :repllist
   (repllist
    (repl
     :val 2)
    (repl
     :val 3)))
 (repl<-script
  "(+ 2 3)"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :type vx/core/+
            :repllist
             (repllist
              (repl
               :val 2)
              (repl
               :val 3)))
          :actual
           (repl
            :type vx/core/+
            :repllist
             (repllist
              (repl
               :val 2)
              (repl
               :val 3)))))))
    (testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "repl<-string-argmap"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (repl :val "Hello")
 (repl<-string-argmap
  `"Hello"`
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :val "Hello")
          :actual
           (repl
            :val "Hello")))
       (testdescribe
        :describename
         "(test
 (repl
  :val 2)
 (repl<-string-argmap
  "2"
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :val 2)
          :actual
           (repl
            :val 2)))
       (testdescribe
        :describename
         "(test
 (repl :val 2.3)
 (repl<-string-argmap
  "2.3"
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :val 2.3)
          :actual
           (repl
            :val 2.3)))
       (testdescribe
        :describename
         "(test
 (repl
  :val infinity)
 (repl<-string-argmap
  "infinity"
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :val infinity)
          :actual
           (repl
            :val infinity)))
       (testdescribe
        :describename
         "(test
 (repl
  :val tb/delimcomma)
 (repl<-string-argmap
  "vx/data/textblock/delimcomma"
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :val vx/data/textblock/delimcomma)
          :actual
           (repl
            :val vx/data/textblock/delimcomma)))
       (testdescribe
        :describename
         "(test
 (repl :type string)
 (repl<-string-argmap
  "string"
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :type vx/core/string)
          :actual
           (repl
            :type vx/core/string)))
       (testdescribe
        :describename
         "(test
 (repl :type +)
 (repl<-string-argmap
  "+"
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :type vx/core/+)
          :actual
           (repl
            :type vx/core/+)))))
    (testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "repl<-textblock"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (repl :val 2)
 (repl<-textblock
  (tb/textblock
   :text "2")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :val 2)
          :actual
           (repl
            :val 2)))
       (testdescribe
        :describename
         "(test
 (repl :type +)
 (repl<-textblock
  (tb/textblock
   :text "+")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :type vx/core/+)
          :actual
           (repl
            :type vx/core/+)))
       (testdescribe
        :describename
         "(test
 (repl :type +)
 (repl<-textblock
  (tb/textblock
   :text "+")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :type vx/core/+)
          :actual
           (repl
            :type vx/core/+)))
       (testdescribe
        :describename
         "(test
 (repl
  :type +
  :repllist
   (repllist
    (repl :val 2)
    (repl :val 3)))
 (repl<-textblock
  (tb/textblock
   :text "(+ 2 3)"
   :delim
    (copy delimvxlispparen
     :delimlist
      (empty delimlist))
   :children
    (tb/textblocklist
     (tb/textblock
      :text "+")
     (tb/textblock
      :text " "
      :delim
       (copy tb/delimwhitespace
        :pos 0))
     (tb/textblock
      :text "2")
     (tb/textblock
      :text " "
      :delim
       (copy tb/delimwhitespace
        :pos 0))
     (tb/textblock
      :text "3")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :type vx/core/+
            :repllist
             (repllist
              (repl
               :val 2)
              (repl
               :val 3)))
          :actual
           (repl
            :type vx/core/+
            :repllist
             (repllist
              (repl
               :val 2)
              (repl
               :val 3)))))
       (testdescribe
        :describename
         "(test
 (repl
  :type +
  :repllist
   (repllist
    (repl :val 2)
    (repl :val 3)))
 (repl<-textblock
  (tb/textblock
   :text "(+ 2 3)"
   :children
    (tb/textblocklist
     (tb/textblock
      :text "(+ 2 3)"
      :delim
       (copy delimvxlispparen
        :delimlist
         (empty delimlist))
      :children
       (tb/textblocklist
        (tb/textblock
         :text "+")
        (tb/textblock
         :text " "
         :delim
          (copy tb/delimwhitespace
           :pos 0))
        (tb/textblock
         :text "2")
        (tb/textblock
         :text " "
         :delim
          (copy tb/delimwhitespace
           :pos 0))
        (tb/textblock
         :text "3")))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :type vx/core/+
            :repllist
             (repllist
              (repl
               :val 2)
              (repl
               :val 3)))
          :actual
           (repl
            :type vx/core/+
            :repllist
             (repllist
              (repl
               :val 2)
              (repl
               :val 3)))))))
    (testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "repl<-textblock-argmap"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (repl :val 2)
 (repl<-textblock-argmap
  (tb/textblock
   :text "2")
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :val 2)
          :actual
           (repl
            :val 2)))
       (testdescribe
        :describename
         "(test
 (repl :type +)
 (repl<-textblock-argmap
  (tb/textblock
   :text "+")
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :type vx/core/+)
          :actual
           (repl
            :type vx/core/+)))
       (testdescribe
        :describename
         "(test
 (repl
  :type +
  :repllist
   (repllist
    (repl :val 2)
    (repl :val 3)))
 (repl<-textblock-argmap
  (tb/textblock
   :text "(+ 2 3)"
   :delim
    (copy delimvxlispparen
     :delimlist
      (empty delimlist))
   :children
    (tb/textblocklist
     (tb/textblock
      :text "+")
     (tb/textblock
      :text " "
      :delim
       (copy tb/delimwhitespace
        :pos 0))
     (tb/textblock
      :text "2")
     (tb/textblock
      :text " "
      :delim
       (copy tb/delimwhitespace
        :pos 0))
     (tb/textblock
      :text "3")))
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :type vx/core/+
            :repllist
             (repllist
              (repl
               :val 2)
              (repl
               :val 3)))
          :actual
           (repl
            :type vx/core/+
            :repllist
             (repllist
              (repl
               :val 2)
              (repl
               :val 3)))))
       (testdescribe
        :describename
         "(test
 (repl
  :type +
  :repllist
   (repllist
    (repl :val 2)
    (repl :val 3)))
 (repl<-textblock-argmap
  (tb/textblock
   :text "(+ 2 3)"
   :children
    (tb/textblocklist
     (tb/textblock
      :text "(+ 2 3)"
      :delim
       (copy delimvxlispparen
        :delimlist
         (empty delimlist))
      :children
       (tb/textblocklist
        (tb/textblock
         :text "+")
        (tb/textblock
         :text " "
         :delim
          (copy tb/delimwhitespace
           :pos 0))
        (tb/textblock
         :text "2")
        (tb/textblock
         :text " "
         :delim
          (copy tb/delimwhitespace
           :pos 0))
        (tb/textblock
         :text "3")))))
  (empty argmap)))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (repl
            :type vx/core/+
            :repllist
             (repllist
              (repl
               :val 2)
              (repl
               :val 3)))
          :actual
           (repl
            :type vx/core/+
            :repllist
             (repllist
              (repl
               :val 2)
              (repl
               :val 3)))))))
    (testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "textblock<-script"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (tb/textblock
  :text "infinity"
  :startpos 1
  :endpos 8
  :children
   (tb/textblocklist
    (tb/textblock
    :text "infinity"
    :startpos 1
    :endpos 8
    :delim
     (delim
      :name "delimvxlisp"))))
 (textblock<-script
  "infinity"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "infinity"
            :startpos 1
            :endpos 8
            :children
             (textblocklist
              (textblock
               :text "infinity"
               :startpos 1
               :endpos 8
               :delim
                (delim
                 :name "delimvxlisp"))))
          :actual
           (textblock
            :text "infinity"
            :startpos 1
            :endpos 8
            :children
             (textblocklist
              (textblock
               :text "infinity"
               :startpos 1
               :endpos 8
               :delim
                (delim
                 :name "delimvxlisp"))))))
       (testdescribe
        :describename
         "(test
 (tb/textblock
  :text "(+ 2 3)"
  :startpos 1
  :endpos 7
  :children
   (tb/textblocklist
    (tb/textblock
     :text "(+ 2 3)"
     :startpos 1
     :endpos 7
     :delim
      (copy delimvxlispparen
       :delimlist
        (empty delimlist))
     :children
      (tb/textblocklist
       (tb/textblock
        :text "+"
        :startpos 2
        :endpos 2)
       (tb/textblock
        :text " "
        :startpos 3
        :endpos 3
        :delim
         (copy tb/delimwhitespace
          :pos 0))
       (tb/textblock
        :text "2"
        :startpos 4
        :endpos 4)
       (tb/textblock
        :text " "
        :startpos 5
        :endpos 5
        :delim
         (copy tb/delimwhitespace
          :pos 0))
       (tb/textblock
        :text "3"
        :startpos 6
        :endpos 6)))))
 (textblock<-script
  "(+ 2 3)"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (textblock
            :text "(+ 2 3)"
            :startpos 1
            :endpos 7
            :children
             (textblocklist
              (textblock
               :text "(+ 2 3)"
               :startpos 1
               :endpos 7
               :delim
                (delim
                 :name "delimvxlispparen"
                 :starttext "("
                 :endtext ")")
               :children
                (textblocklist
                 (textblock
                  :text "+"
                  :startpos 2
                  :endpos 2)
                 (textblock
                  :text " "
                  :startpos 3
                  :endpos 3
                  :delim
                   (delim
                    :name "delimwhitespace"
                    :starttext ":whitespace"))
                 (textblock
                  :text "2"
                  :startpos 4
                  :endpos 4)
                 (textblock
                  :text " "
                  :startpos 5
                  :endpos 5
                  :delim
                   (delim
                    :name "delimwhitespace"
                    :starttext ":whitespace"))
                 (textblock
                  :text "3"
                  :startpos 6
                  :endpos 6)))))
          :actual
           (textblock
            :text "(+ 2 3)"
            :startpos 1
            :endpos 7
            :children
             (textblocklist
              (textblock
               :text "(+ 2 3)"
               :startpos 1
               :endpos 7
               :delim
                (delim
                 :name "delimvxlispparen"
                 :starttext "("
                 :endtext ")")
               :children
                (textblocklist
                 (textblock
                  :text "+"
                  :startpos 2
                  :endpos 2)
                 (textblock
                  :text " "
                  :startpos 3
                  :endpos 3
                  :delim
                   (delim
                    :name "delimwhitespace"
                    :starttext ":whitespace"))
                 (textblock
                  :text "2"
                  :startpos 4
                  :endpos 4)
                 (textblock
                  :text " "
                  :startpos 5
                  :endpos 5
                  :delim
                   (delim
                    :name "delimwhitespace"
                    :starttext ":whitespace"))
                 (textblock
                  :text "3"
                  :startpos 6
                  :endpos 6)))))))))
    (testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "typefunc<-string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 string
 (typefunc<-string
  "string"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected vx/core/string
          :actual vx/core/string))
       (testdescribe
        :describename
         "(test
 +
 (typefunc<-string
  "+"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected vx/core/+
          :actual vx/core/+)))))
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :delimvxlisp 0
      :delimvxlispbracket 0
      :delimvxlispparen 0)
    :funcmap
     (intmap
      :any-repl<-functype-args 0
      :any<-liblist-string 0
      :any<-macro 1
      :any<-repl 2
      :any<-script 1
      :anylist<-repllist 0
      :argmap<-textblock-argmap 0
      :const<-string 2
      :repl-bracket<-textblock-argmap 0
      :repl-empty<-textblock-argmap 4
      :repl-paren<-textblock-argmap 1
      :repl<-liblist-string 0
      :repl<-macro 1
      :repl<-script 4
      :repl<-string-argmap 7
      :repl<-textblock 5
      :repl<-textblock-argmap 4
      :replarglist<-replarglist-textblock-argmap 0
      :repllist<-textblocklist-argmap 0
      :textblock<-script 2
      :typefunc<-string 2)
    :testpkg "vx/repl"
    :typemap
     (intmap
      :liblist 0
      :repl 0
      :replarglist 0
      :repllist 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 21)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 21)
    :constnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 28
      :total 28)
    :funcnums
     (testcoveragenums
      :pct 61
      :tests 13
      :total 21)
    :testpkg "vx/repl"
    :totalnums
     (testcoveragenums
      :pct 46
      :tests 13
      :total 28)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 4))
  :passfail true
  :testpkg "vx/repl")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/sample"
     :casename "myconst"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 myconst
 myconst)"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4))))
    (testcase
     :passfail true
     :testpkg "vx/sample"
     :casename "myfunc"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 5 (myfunc 1))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5)))))
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :myconst 1)
    :funcmap
     (intmap
      :main 0
      :myfunc 1)
    :testpkg "vx/sample"
    :typemap
     (intmap
      :mytype 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 2)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 2)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 1
      :total 1)
    :docnums
     (testcoveragenums
      :pct 50
      :tests 2
      :total 4)
    :funcnums
     (testcoveragenums
      :pct 50
      :tests 1
      :total 2)
    :testpkg "vx/sample"
    :totalnums
     (testcoveragenums
      :pct 50
      :tests 2
      :total 4)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1))
  :passfail true
  :testpkg "vx/sample")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :funcmap
     (intmap
      :change 0
      :register 0)
    :testpkg "vx/state"
    :typemap
     (intmap
      :value-map 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 2)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 2)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 33
      :tests 1
      :total 3)
    :funcnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 2)
    :testpkg "vx/state"
    :totalnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1))
  :passfail true
  :testpkg "vx/state")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/test"
     :casename "file-test"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (boolean-exists<-file
  (file
   :name "testsuite.vxlisp"
   :path "src/test/resources")))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/test"
     :casename "file-testhtml"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (boolean-exists<-file
  (file
   :name "testsuite.html"
   :path "src/test/resources")))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/test"
     :casename "file-testnode"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (boolean-exists<-file
  (file
   :name "testsuitenode.vxlisp"
   :path "src/test/resources")))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true)))))
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :stylesheet-test 0)
    :funcmap
     (intmap
      :context-test 0
      :div<-testcaselist 0
      :div<-testpackage 0
      :div<-testpackagelist 0
      :divchildlist<-testpackagelist 0
      :file-test 1
      :file-testhtml 1
      :file-testnode 1
      :html<-divtest 0
      :p<-passfail 0
      :p<-testcoveragenums 0
      :resolve-testcase 0
      :resolve-testcaselist 0
      :resolve-testdescribe 0
      :resolve-testdescribelist 0
      :resolve-testpackage 0
      :resolve-testpackagelist 0
      :resolve-testresult 0
      :security-test 0
      :test 0
      :test_1 0
      :test-false 0
      :test-false_1 0
      :test-gt 0
      :test-gt_1 0
      :test-ne 0
      :test-ne_1 0
      :test-string 0
      :test-string_1 0
      :test-true 0
      :test-true_1 0
      :tr<-testdescribe-casename 0
      :trlist<-testcase 0
      :trlist<-testcaselist 0)
    :testpkg "vx/test"
    :typemap
     (intmap
      :testcase 0
      :testcaselist 0
      :testcoveragedetail 0
      :testcoveragenums 0
      :testcoveragesummary 0
      :testdescribe 0
      :testdescribelist 0
      :testpackage 0
      :testpackagelist 0
      :testresult 0
      :testresultlist 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 34)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 34)
    :constnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1)
    :docnums
     (testcoveragenums
      :pct 93
      :tests 43
      :total 46)
    :funcnums
     (testcoveragenums
      :pct 10
      :tests 3
      :total 28)
    :testpkg "vx/test"
    :totalnums
     (testcoveragenums
      :pct 7
      :tests 3
      :total 40)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 11))
  :passfail true
  :testpkg "vx/test")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/translate"
     :casename "translate"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "!NotFound!"
 (translate "!NotFound!"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "!NotFound!"
          :actual "!NotFound!"))))
    (testcase
     :passfail true
     :testpkg "vx/translate"
     :casename "translate_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "Repl Type Not Found"
 (translate
  (msg
   :path "vx/repl/repl/repl<-string-argmap"
   :code "repltypenotfound")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "Repl Type Not Found"
          :actual "Repl Type Not Found"))))
    (testcase
     :passfail true
     :testpkg "vx/translate"
     :casename "translate<-translation-string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "Hola"
 (translate<-translation-string
  (translation
   :wordmap
    (stringmap
     "Hello" "Hola"))
  "Hello"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "Hola"
          :actual "Hola")))))
  :coveragedetail
   (testcoveragedetail
    :funcmap
     (intmap
      :session<-session-name 0
      :session<-session-translation 0
      :session<-session-translationmap-name 0
      :translate 1
      :translate_1 1
      :translate<-translation-string 1
      :translate<-translationmap-name-string 0
      :translation-load-session 0
      :translation<-context 0
      :translation<-session-name 0
      :translationmap<-translations 0)
    :testpkg "vx/translate")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 11)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 11)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 11
      :total 11)
    :funcnums
     (testcoveragenums
      :pct 30
      :tests 3
      :total 10)
    :testpkg "vx/translate"
    :totalnums
     (testcoveragenums
      :pct 30
      :tests 3
      :total 10)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/translate")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/translation/all"
     :casename "translationmap-all"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "Hola"
 (trn/translate<-translationmap-name-string
  (translationmap-all)
  "es"
  "Hello"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "Hola"
          :actual "Hola")))))
  :coveragedetail
   (testcoveragedetail
    :funcmap
     (intmap
      :context-all 0
      :translationmap-all 1)
    :testpkg "vx/translation/all")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 2)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 2)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 2
      :total 2)
    :funcnums
     (testcoveragenums
      :pct 50
      :tests 1
      :total 2)
    :testpkg "vx/translation/all"
    :totalnums
     (testcoveragenums
      :pct 50
      :tests 1
      :total 2)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/translation/all")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/translation/en"
     :casename "translation-en"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "Hello"
 (trn/translate<-translation-string
  (translation-en)
  "Hello"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "Hello"
          :actual "Hello")))))
  :coveragedetail
   (testcoveragedetail
    :funcmap
     (intmap
      :context-en 0
      :context-test 0
      :securitydata-test 0
      :translation-en 1
      :words 0)
    :testpkg "vx/translation/en")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 5)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 5)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 5
      :total 5)
    :funcnums
     (testcoveragenums
      :pct 20
      :tests 1
      :total 5)
    :testpkg "vx/translation/en"
    :totalnums
     (testcoveragenums
      :pct 20
      :tests 1
      :total 5)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/translation/en")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/translation/es"
     :casename "translation-es"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "Hola"
 (trn/translate<-translation-string
  (translation-es)
  "Hello"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "Hola"
          :actual "Hola")))))
  :coveragedetail
   (testcoveragedetail
    :funcmap
     (intmap
      :translation-es 1
      :words 0)
    :testpkg "vx/translation/es")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 2)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 2)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 2
      :total 2)
    :funcnums
     (testcoveragenums
      :pct 50
      :tests 1
      :total 2)
    :testpkg "vx/translation/es"
    :totalnums
     (testcoveragenums
      :pct 50
      :tests 1
      :total 2)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/translation/es")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "boolean<-string-ends"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (boolean<-string-ends
  "abcd"
  "cd"))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "boolean<-string-starts"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (boolean<-string-starts
  "abcd"
  "ab"))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "int<-string-find"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 3
 (int<-string-find
  "abcdcdg"
  "cd"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "int<-string-findkeyword"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 3
 (int<-string-findkeyword
  "ab	cdefg"
  ":whitespace"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3))
       (testdescribe
        :describename
         "(test
 5
 (int<-string-findkeyword
  " 	
ab"
  ":nonwhitespace"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "int<-string-findlast"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 5
 (int<-string-findlast
  "abcdcdg"
  "cd"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "is-string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (is-string ""))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-true
 (is-string "a"))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-false
 (is-string 5))"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))
       (testdescribe
        :describename
         "(test-false
 (is-string (list)))"
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "is-type"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (is-type false boolean))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-true
 (is-type "a" string))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-true
 (is-type 5.5 number))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-true
 (is-type 4 int))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "is-type<-any-typelist"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (is-type<-any-typelist
  false
  (typelist int boolean)))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-true
 (is-type<-any-typelist
  "a"
  (typelist number string)))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-true
 (is-type<-any-typelist
  5.5
  (typelist string number)))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (testdescribe
        :describename
         "(test-true
 (is-type<-any-typelist
  4
  (typelist string int)))"
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "length<-string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 4
 (length<-string "abcd"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4))
       (testdescribe
        :describename
         "(test
 0
 (length<-string ""))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string-lowercase"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "abc"
 (string-lowercase
  "AbC"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "abc"
          :actual "abc"))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string-outdent"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "ab"
 (string-outdent
  "ab"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "ab"
          :actual "ab"))
       (testdescribe
        :describename
         "(test
 "a
b"
 (string-outdent
  "
 a
 b"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           "a
b"
          :actual
           "a
b"))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string-trim"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "ab"
 (string-trim
  " 	
ab
	 "))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "ab"
          :actual "ab"))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string-uppercase"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "ABC"
 (string-uppercase
  "aBc"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "ABC"
          :actual "ABC"))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-int"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "4"
 (string<-int 4))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "4"
          :actual "4"))
       (testdescribe
        :describename
         "(test
 "51"
 (string<-int 51))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "51"
          :actual "51"))
       (testdescribe
        :describename
         "(test
 "notanumber"
 (string<-int notanumber))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "notanumber"
          :actual "notanumber"))
       (testdescribe
        :describename
         "(test
 "infinity"
 (string<-int infinity))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "infinity"
          :actual "infinity"))
       (testdescribe
        :describename
         "(test
 "neginfinity"
 (string<-int neginfinity))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "neginfinity"
          :actual "neginfinity"))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-string-end"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "abc"
 (string<-string-end
  "abcd"
  3))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "abc"
          :actual "abc"))
       (testdescribe
        :describename
         "(test
 "ab"
 (string<-string-end
  "abcd"
  2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "ab"
          :actual "ab"))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-string-start"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "abcd"
 (string<-string-start
  "abcd"
  1))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "abcd"
          :actual "abcd"))
       (testdescribe
        :describename
         "(test
 "bcd"
 (string<-string-start
  "abcd"
  2))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "bcd"
          :actual "bcd"))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-string-start-end"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "abc"
 (string<-string-start-end
  "abcd"
  1
  3))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "abc"
          :actual "abc"))
       (testdescribe
        :describename
         "(test
 "bc"
 (string<-string-start-end
  "abcd"
  2
  3))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "bc"
          :actual "bc"))
       (testdescribe
        :describename
         "(test
 ""
 (string<-string-start-end
  "abcd"
  5
  6))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true))
       (testdescribe
        :describename
         "(test
 "bcd"
 (string<-string-start-end
  "abcd"
  2
  5))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "bcd"
          :actual "bcd"))
       (testdescribe
        :describename
         "(test
 "bc"
 (string<-string-start-end
  "abcd"
  2
  -1))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "bc"
          :actual "bc"))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-stringlist-join"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "a$b$c"
 (string<-stringlist-join
  (stringlist "a" "b" "c")
  "$"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "a$b$c"
          :actual "a$b$c"))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "stringlist<-string-split"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringlist "a" "b" "c")
 (stringlist<-string-split
  "a$b$c"
  "$"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a"
            "b"
            "c")
          :actual
           (stringlist
            "a"
            "b"
            "c"))))))
  :coveragedetail
   (testcoveragedetail
    :funcmap
     (intmap
      :allowtypenames<-type 0
      :allowtypes<-type 0
      :any<-int 0
      :boolean<-string-ends 1
      :boolean<-string-starts 1
      :int<-string-find 1
      :int<-string-findkeyword 2
      :int<-string-findlast 1
      :is-boolean 0
      :is-decimal 0
      :is-none 0
      :is-string 4
      :is-type 4
      :is-type<-any-typelist 4
      :length<-string 2
      :string-lowercase 1
      :string-outdent 2
      :string-trim 1
      :string-uppercase 1
      :string<-int 5
      :string<-string-end 2
      :string<-string-start 2
      :string<-string-start-end 5
      :string<-stringlist-join 1
      :stringlist<-string-split 1
      :traitnames<-any 0
      :traits<-any 0
      :traits<-typedef 0)
    :testpkg "vx/type")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 28)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 28)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 82
      :tests 23
      :total 28)
    :funcnums
     (testcoveragenums
      :pct 67
      :tests 19
      :total 28)
    :testpkg "vx/type"
    :totalnums
     (testcoveragenums
      :pct 67
      :tests 19
      :total 28)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/type")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-body-indent"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "<body></body>"
 (string<-body-indent (body) 0))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "<body></body>"
          :actual "<body></body>"))
       (testdescribe
        :describename
         "(test
 "<body>
  <div></div>
</body>"
 (string<-body-indent (body (div)) 0))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           "<body>
  <div></div>
</body>"
          :actual
           "<body>
  <div></div>
</body>"))))
    (testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-div-indent"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "<div></div>"
 (string<-div-indent (div) 0))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "<div></div>"
          :actual "<div></div>"))
       (testdescribe
        :describename
         "(test
 "<div id=\"myid\"></div>"
 (string<-div-indent
  (div :id "myid") 0))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "<div id="myid"></div>"
          :actual "<div id="myid"></div>"))))
    (testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-head-indent"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "<head></head>"
 (string<-head-indent (head) 0))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "<head></head>"
          :actual "<head></head>"))))
    (testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-html"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "<!DOCTYPE html>
<html>
  <head></head>
  <body></body>
  <footer></footer>
</html>"
 (string<-html
  (html :head (head) :body (body))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           "<!DOCTYPE html>
<html>
  <head></head>
  <body></body>
  <footer></footer>
</html>"
          :actual
           "<!DOCTYPE html>
<html>
  <head></head>
  <body></body>
  <footer></footer>
</html>"))))
    (testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-meta-indent"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "<meta charset=\"utf-8\" />"
 (string<-meta-indent (meta :charset "utf-8") 0))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "<meta charset="utf-8" />"
          :actual "<meta charset="utf-8" />"))))
    (testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-p-indent"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "<p>data</p>"
 (string<-p-indent (p :text "data") 0))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "<p>data</p>"
          :actual "<p>data</p>"))
       (testdescribe
        :describename
         "(test
 "<p id=\"myid\">data</p>"
 (string<-p-indent
  (p :id "myid" :text "data") 0))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "<p id="myid">data</p>"
          :actual "<p id="myid">data</p>")))))
  :coveragedetail
   (testcoveragedetail
    :funcmap
     (intmap
      :htmlstring<-string 0
      :string-indent 0
      :string<-body-indent 2
      :string<-details-indent 0
      :string<-div-indent 2
      :string<-footer-indent 0
      :string<-h1-indent 0
      :string<-h2-indent 0
      :string<-h3-indent 0
      :string<-head-indent 1
      :string<-html 1
      :string<-indent 0
      :string<-meta-indent 1
      :string<-node-indent 0
      :string<-nodelist-indent 0
      :string<-nodelist-tag-prop-indent 0
      :string<-p-indent 2
      :string<-propname-val 0
      :string<-propstyle 0
      :string<-style-indent 0
      :string<-stylelist-indent 0
      :string<-stylepropmap-indent 0
      :string<-stylesheet-indent 0
      :string<-table-indent 0
      :string<-tbody-indent 0
      :string<-td-indent 0
      :string<-thead-indent 0
      :string<-title-indent 0
      :string<-tr-indent 0
      :string<-uri 0
      :style<-stylesheet-name 0
      :stylemap<-stylelist 0
      :stylemap<-stylesheet 0
      :styles<-stylesheet 0
      :stylesheet-loadmap 0
      :uri<-string 0)
    :testpkg "vx/web/html"
    :typemap
     (intmap
      :body 0
      :details 0
      :div 0
      :divchild 0
      :divchildlist 0
      :divlist 0
      :footer 0
      :h1 0
      :h2 0
      :h3 0
      :head 0
      :headchild 0
      :headchildlist 0
      :html 0
      :meta 0
      :node 0
      :nodelist 0
      :p 0
      :propmap 0
      :style 0
      :stylelist 0
      :stylemap 0
      :stylesheet 0
      :table 0
      :tbody 0
      :td 0
      :tdlist 0
      :thead 0
      :title 0
      :tr 0
      :trlist 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 36)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 36)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 98
      :tests 66
      :total 67)
    :funcnums
     (testcoveragenums
      :pct 16
      :tests 6
      :total 36)
    :testpkg "vx/web/html"
    :totalnums
     (testcoveragenums
      :pct 8
      :tests 6
      :total 67)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 31))
  :passfail true
  :testpkg "vx/web/html")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :funcmap
     (intmap
      :boolean-write<-id-htmltext 0
      :boolean-write<-stylesheet 0
      :string<-id 0)
    :testpkg "vx/web/htmldoc")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 3
      :total 3)
    :funcnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3)
    :testpkg "vx/web/htmldoc"
    :totalnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/web/htmldoc")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :funcmap
     (intmap
      :csv<-httpget 0
      :json<-httpget 0
      :response<-httpget 0
      :text<-httpget 0
      :text<-response 0
      :textblock<-httpget 0
      :textblock<-response 0
      :xml<-httpget 0)
    :testpkg "vx/web/http"
    :typemap
     (intmap
      :response 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 8)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 8)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 88
      :tests 8
      :total 9)
    :funcnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 8)
    :testpkg "vx/web/http"
    :totalnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 9)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1))
  :passfail true
  :testpkg "vx/web/http")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :testpkg "nx/crypto/cryptosheet")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "nx/crypto/cryptosheet"
    :totalnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "nx/crypto/cryptosheet")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :funcmap
     (intmap
      :context-nx 0
      :main-nx 0
      :security-nx 0)
    :testpkg "nx/tactics/apptactics")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 3
      :total 3)
    :funcnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3)
    :testpkg "nx/tactics/apptactics"
    :totalnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "nx/tactics/apptactics")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :rank-10 0
      :rank-2 0
      :rank-3 0
      :rank-4 0
      :rank-5 0
      :rank-6 0
      :rank-7 0
      :rank-8 0
      :rank-9 0
      :rank-ace 0
      :rank-jack 0
      :rank-joker 0
      :rank-king 0
      :rank-queen 0
      :role-aoe 0
      :role-bosskiller 0
      :role-buffer 0
      :role-crowdcontrol 0
      :role-distracter 0
      :role-healer 0
      :role-sniper 0
      :role-tank 0
      :role-trapper 0
      :role-utility 0
      :stat-beast 0
      :stat-body 0
      :stat-mind 0
      :stat-shadow 0
      :stat-speed 0
      :stat-will 0
      :suit-club 0
      :suit-diamond 0
      :suit-heart 0
      :suit-spade 0)
    :funcmap
     (intmap
      :rating<-mass 0)
    :testpkg "nx/tactics/base"
    :typemap
     (intmap
      :ability 0
      :abilitymap 0
      :book 0
      :bookmap 0
      :card 0
      :cardlist 0
      :cardmap 0
      :chapter 0
      :chapterlist 0
      :chaptermap 0
      :damage 0
      :damagelist 0
      :damagemap 0
      :deck 0
      :deckmap 0
      :goal 0
      :item 0
      :itemmap 0
      :location 0
      :locationmap 0
      :mind 0
      :modifier 0
      :playingcard 0
      :power 0
      :powermap 0
      :rank 0
      :rating 0
      :role 0
      :rolemap 0
      :rule 0
      :rulemap 0
      :scenario 0
      :scenariomap 0
      :section 0
      :sectionmap 0
      :skill 0
      :skillmap 0
      :specialty 0
      :specialtymap 0
      :stat 0
      :suit 0
      :suitmap 0
      :threat 0
      :unit 0
      :unitability 0
      :unitabilitymap 0
      :unititem 0
      :unititemmap 0
      :unitmap 0
      :unitpower 0
      :unitpowermap 0
      :unitskill 0
      :unitskillmap 0
      :unitspecialty 0
      :unitspecialtymap 0
      :unitweakness 0
      :unitweaknessmap 0
      :weakness 0
      :weaknessmap 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1)
    :constnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 34)
    :docnums
     (testcoveragenums
      :pct 5
      :tests 5
      :total 94)
    :funcnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1)
    :testpkg "nx/tactics/base"
    :totalnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 94)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 59))
  :passfail true
  :testpkg "nx/tactics/base")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :funcmap
     (intmap
      :bk 0)
    :testpkg "nx/tactics/books/age_of_steam")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1)
    :funcnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1)
    :testpkg "nx/tactics/books/age_of_steam"
    :totalnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "nx/tactics/books/age_of_steam")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "ability<-ability-stringmap"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/ability
  :name "name"
  :image "image")
 (ability<-ability-stringmap
  (empty base/ability)
  (stringmap
   :name "name"
   :image "image")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (ability
            :name "name"
            :image "image")
          :actual
           (ability
            :name "name"
            :image "image")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "ability<-ability-xmlchild"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/ability
  :titles "titles")
 (ability<-ability-xmlchild
  (empty base/ability)
  (xml/xml
   :tag "titles"
   :children
    (xml/xmllist
     (xml/xml
      :text "titles")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (ability
            :titles "titles")
          :actual
           (ability
            :titles "titles")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "ability<-xml"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/ability
  :name "name"
  :image "image"
  :titles "titles"
  :reference "reference")
 (ability<-xml
  (xml/xml
   :tag "ability"
   :propmap
    (stringmap
     :name "name"
     :image "image")
   :children
    (xml/xmllist
     (xml/xml
      :tag "titles"
      :children
       (xml/xmllist
        (xml/xml
         :text "titles")))
     (xml/xml
      :tag "reference"
      :children
       (xml/xmllist
        (xml/xml
         :text "reference")))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (ability
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles")
          :actual
           (ability
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "book<-book-key-value"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/book
  :name "nm")
 (book<-book-key-value
  (empty base/book)
  "name"
  "nm"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (book
            :name "nm")
          :actual
           (book
            :name "nm")))
       (testdescribe
        :describename
         "(test
 (base/book
  :name "image")
 (book<-book-key-value
  (empty base/book)
  "name"
  "image"))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (book
            :name "image")
          :actual
           (book
            :name "image")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "book<-book-stringmap"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/book
  :name "name"
  :image "image")
 (book<-book-stringmap
  (empty base/book)
  (stringmap
   :name "name"
   :image "image")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (book
            :name "name"
            :image "image")
          :actual
           (book
            :name "name"
            :image "image")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "book<-book-xml"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/book
  :name "name1")
 (book<-book-xml
  (empty base/book)
  (xml/xml
   :tag "doc"
   :propmap
    (stringmap
     :name "name1"))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (book
            :name "name1")
          :actual
           (book
            :name "name1")))
       (testdescribe
        :describename
         "(test
 (empty base/book)
 (book<-book-xml
  (empty base/book)
  (xml/xml
   :tag "?xml")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true))
       (testdescribe
        :describename
         "(test
 (base/book
  :name "name1"
  (msgblock
   (msg
    :code ":duplicatetagfound"
    :detail
     (anymap
      :type nx/tactics/base/book
      :tag "doc")
      :severity 2)))
 (book<-book-xml
  (base/book
   :name "name1")
  (xml/xml
   :tag "doc")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (book
            :name "name1"
            (msgblock
             :msgs
              (msglist
               (msg
                :code ":duplicatetagfound"
                :detail
                 (anymap
                  :type nx/tactics/base/book
                  :tag "doc")
                :severity 2))))
          :actual
           (book
            :name "name1"
            (msgblock
             :msgs
              (msglist
               (msg
                :code ":duplicatetagfound"
                :detail
                 (anymap
                  :type nx/tactics/base/book
                  :tag "doc")
                :severity 2))))))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "book<-book-xmlchapter"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/book
  :chaptermap
   (base/chaptermap
    :chapter1
     (base/chapter
      :name "chapter1")))
 (book<-book-xmlchapter
  (empty base/book)
  (xml/xml
   :tag "chapter"
   :propmap
    (stringmap
     :name "chapter1"))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (book
            :chaptermap
             (chaptermap
              :chapter1
               (chapter
                :name "chapter1")))
          :actual
           (book
            :chaptermap
             (chaptermap
              :chapter1
               (chapter
                :name "chapter1")))))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "book<-book-xmlchild"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/book
  :titles "titles")
 (book<-book-xmlchild
  (empty base/book)
  (xml/xml
   :tag "titles"
   :children
    (xml/xmllist
     (xml/xml
      :text "titles")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (book
            :titles "titles")
          :actual
           (book
            :titles "titles")))
       (testdescribe
        :describename
         "(test
 (base/book
  :chaptermap
   (base/chaptermap
    :chapter1
     (base/chapter
      :name "chapter1")))
 (book<-book-xmlchild
  (empty base/book)
  (xml/xml
   :tag "chapter"
   :propmap
    (stringmap
     :name "chapter1"))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (book
            :chaptermap
             (chaptermap
              :chapter1
               (chapter
                :name "chapter1")))
          :actual
           (book
            :chaptermap
             (chaptermap
              :chapter1
               (chapter
                :name "chapter1")))))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "book<-xml"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/book
  :name "name1")
 (book<-xml
  (xml/xml
   :children
    (xml/xmllist
     (xml/xml
      :tag "?xml")
     (xml/xml
      :tag "doc"
      :propmap
       (stringmap
        :name "name1"))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (book
            :name "name1")
          :actual
           (book
            :name "name1")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "book<-xmldoc"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/book
  :name "name1"
  :image "image1"
  :titles "titles1"
  :reference "reference1"
  :chaptermap
   (base/chaptermap
    :chapter1
     (base/chapter
      :name "chapter1")))
 (book<-xmldoc
  (xml/xml
   :tag "doc"
   :propmap
    (stringmap
     :name "name1"
     :image "image1")
   :children
    (xml/xmllist
     (xml/xml
      :tag "titles"
      :children
       (xml/xmllist
        (xml/xml
         :text "titles1")))
     (xml/xml
      :tag "reference"
      :children
       (xml/xmllist
        (xml/xml
         :text "reference1")))
     (xml/xml
      :tag "chapter"
      :propmap
       (stringmap
        :name "chapter1"))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (book
            :name "name1"
            :image "image1"
            :reference "reference1"
            :titles "titles1"
            :chaptermap
             (chaptermap
              :chapter1
               (chapter
                :name "chapter1")))
          :actual
           (book
            :name "name1"
            :image "image1"
            :reference "reference1"
            :titles "titles1"
            :chaptermap
             (chaptermap
              :chapter1
               (chapter
                :name "chapter1")))))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "book<-xmllist"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/book
  :name "name1")
 (book<-xmllist
  (xml/xmllist
   (xml/xml
    :tag "?xml")
   (xml/xml
    :tag "doc"
    :propmap
     (stringmap
      :name "name1")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (book
            :name "name1")
          :actual
           (book
            :name "name1")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "chapter<-chapter-stringmap"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/chapter
  :name "name"
  :image "image")
 (chapter<-chapter-stringmap
  (empty base/chapter)
  (stringmap
   :name "name"
   :image "image")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (chapter
            :name "name"
            :image "image")
          :actual
           (chapter
            :name "name"
            :image "image")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "chapter<-chapter-xmlchild"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/chapter
  :titles "titles")
 (chapter<-chapter-xmlchild
  (empty base/chapter)
  (xml/xml
   :tag "titles"
   :children
    (xml/xmllist
     (xml/xml
      :text "titles")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (chapter
            :titles "titles")
          :actual
           (chapter
            :titles "titles")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "chapter<-xml"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/chapter
  :name "name"
  :image "image"
  :titles "titles"
  :reference "reference"
  :sectionmap
   (base/sectionmap
    :section1
     (base/section
      :name "section1")))
 (chapter<-xml
  (xml/xml
   :tag "chapter"
   :propmap
    (stringmap
     :name "name"
     :image "image")
   :children
    (xml/xmllist
     (xml/xml
      :tag "titles"
      :children
       (xml/xmllist
        (xml/xml
         :text "titles")))
     (xml/xml
      :tag "reference"
      :children
       (xml/xmllist
        (xml/xml
         :text "reference")))
     (xml/xml
      :tag "section"
      :propmap
       (stringmap
        :name "section1"))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (chapter
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles"
            :sectionmap
             (sectionmap
              :section1
               (section
                :name "section1")))
          :actual
           (chapter
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles"
            :sectionmap
             (sectionmap
              :section1
               (section
                :name "section1")))))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "power<-power-stringmap"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/power
  :name "name"
  :image "image")
 (power<-power-stringmap
  (empty base/power)
  (stringmap
   :name "name"
   :image "image")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (power
            :name "name"
            :image "image")
          :actual
           (power
            :name "name"
            :image "image")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "power<-power-xmlchild"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/power
  :titles "titles")
 (power<-power-xmlchild
  (empty base/power)
  (xml/xml
   :tag "titles"
   :children
    (xml/xmllist
     (xml/xml
      :text "titles")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (power
            :titles "titles")
          :actual
           (power
            :titles "titles")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "power<-xml"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/power
  :name "name"
  :image "image"
  :titles "titles"
  :reference "reference"
  :abilitymap
   (base/abilitymap
    :ability1
     (base/ability
      :name "ability1"))
  :specialtymap
   (base/specialtymap
    :specialty1
     (base/specialty
      :name "specialty1")))
 (power<-xml
  (xml/xml
   :tag "power"
   :propmap
    (stringmap
     :name "name"
     :image "image")
   :children
    (xml/xmllist
     (xml/xml
      :tag "titles"
      :children
       (xml/xmllist
        (xml/xml
         :text "titles")))
     (xml/xml
      :tag "reference"
      :children
       (xml/xmllist
        (xml/xml
         :text "reference")))
     (xml/xml
      :tag "ability"
      :propmap
       (stringmap
        :name "ability1"))
     (xml/xml
      :tag "specialty"
      :propmap
       (stringmap
        :name "specialty1"))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (power
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles"
            :abilitymap
             (abilitymap
              :ability1
               (ability
                :name "ability1"))
            :specialtymap
             (specialtymap
              :specialty1
               (specialty
                :name "specialty1")))
          :actual
           (power
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles"
            :abilitymap
             (abilitymap
              :ability1
               (ability
                :name "ability1"))
            :specialtymap
             (specialtymap
              :specialty1
               (specialty
                :name "specialty1")))))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "rule<-rule-stringmap"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/rule
  :name  "name"
  :image "image")
 (rule<-rule-stringmap
  (empty base/rule)
  (stringmap
   :name  "name"
   :image "image")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (rule
            :name "name"
            :image "image")
          :actual
           (rule
            :name "name"
            :image "image")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "rule<-rule-xmlchild"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/rule
  :titles "titles")
 (rule<-rule-xmlchild
  (empty base/rule)
  (xml/xml
   :tag "titles"
   :children
    (xml/xmllist
     (xml/xml
      :text "titles")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (rule
            :titles "titles")
          :actual
           (rule
            :titles "titles")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "scenario<-xml"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/scenario
  :name "name"
  :image "image"
  :titles "titles"
  :reference "reference")
 (scenario<-xml
  (xml/xml
   :tag "scenario"
   :propmap
    (stringmap
     :name "name"
     :image "image")
   :children
    (xml/xmllist
     (xml/xml
      :tag "titles"
      :children
       (xml/xmllist
        (xml/xml
         :text "titles")))
     (xml/xml
      :tag "reference"
      :children
       (xml/xmllist
        (xml/xml
         :text "reference")))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (scenario
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles")
          :actual
           (scenario
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "section<-xml"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/section
  :name "name"
  :image "image"
  :titles "titles"
  :reference "reference"
  :powermap
   (base/powermap
    :power1
     (base/power
      :name "power1"))
  :scenariomap
   (base/scenariomap
    :scenario1
     (base/scenario
      :name "scenario1"))
  :sectionmap
   (base/sectionmap
    :section1
     (base/section
      :name "section1"))
  :skillmap
   (base/skillmap
    :skill1
     (base/skill
      :name "skill1")))
 (section<-xml
  (xml/xml
   :tag "section"
   :propmap
    (stringmap
     :name "name"
     :image "image")
   :children
    (xml/xmllist
     (xml/xml
      :tag "titles"
      :children
       (xml/xmllist
        (xml/xml
         :text "titles")))
     (xml/xml
      :tag "reference"
      :children
       (xml/xmllist
        (xml/xml
         :text "reference")))
     (xml/xml
      :tag "power"
      :propmap
       (stringmap
        :name "power1"))
     (xml/xml
      :tag "scenario"
      :propmap
       (stringmap
        :name "scenario1"))
     (xml/xml
      :tag "section"
      :propmap
       (stringmap
        :name "section1"))
     (xml/xml
      :tag "skill"
      :propmap
       (stringmap
        :name "skill1"))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (section
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles"
            :powermap
             (powermap
              :power1
               (power
                :name "power1"))
            :scenariomap
             (scenariomap
              :scenario1
               (scenario
                :name "scenario1"))
            :sectionmap
             (sectionmap
              :section1
               (section
                :name "section1"))
            :skillmap
             (skillmap
              :skill1
               (skill
                :name "skill1")))
          :actual
           (section
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles"
            :powermap
             (powermap
              :power1
               (power
                :name "power1"))
            :scenariomap
             (scenariomap
              :scenario1
               (scenario
                :name "scenario1"))
            :sectionmap
             (sectionmap
              :section1
               (section
                :name "section1"))
            :skillmap
             (skillmap
              :skill1
               (skill
                :name "skill1")))))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "skill<-skill-xmlchild"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/skill
  :titles "titles")
 (skill<-skill-xmlchild
  (empty base/skill)
  (xml/xml
   :tag "titles"
   :children
    (xml/xmllist
     (xml/xml
      :text "titles")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (skill
            :titles "titles")
          :actual
           (skill
            :titles "titles")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "skill<-xml"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/skill
  :name "name"
  :image "image"
  :titles "titles"
  :reference "reference"
  :abilitymap
   (base/abilitymap
    :ability1
     (base/ability
      :name "ability1"))
  :specialtymap
   (base/specialtymap
    :specialty1
     (base/specialty
      :name "specialty1")))
 (skill<-xml
  (xml/xml
   :tag "skill"
   :propmap
    (stringmap
     :name "name"
     :image "image")
   :children
    (xml/xmllist
     (xml/xml
      :tag "titles"
      :children
       (xml/xmllist
        (xml/xml
         :text "titles")))
     (xml/xml
      :tag "reference"
      :children
       (xml/xmllist
        (xml/xml
         :text "reference")))
     (xml/xml
      :tag "ability"
      :propmap
       (stringmap
        :name "ability1"))
     (xml/xml
      :tag "specialty"
      :propmap
       (stringmap
        :name "specialty1"))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (skill
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles"
            :abilitymap
             (abilitymap
              :ability1
               (ability
                :name "ability1"))
            :specialtymap
             (specialtymap
              :specialty1
               (specialty
                :name "specialty1")))
          :actual
           (skill
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles"
            :abilitymap
             (abilitymap
              :ability1
               (ability
                :name "ability1"))
            :specialtymap
             (specialtymap
              :specialty1
               (specialty
                :name "specialty1")))))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "specialty<-specialty-stringmap"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/specialty
  :name "name"
  :image "image")
 (specialty<-specialty-stringmap
  (empty base/specialty)
  (stringmap
   :name "name"
   :image "image")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (specialty
            :name "name"
            :image "image")
          :actual
           (specialty
            :name "name"
            :image "image")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "specialty<-specialty-xmlchild"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/specialty
  :titles "titles")
 (specialty<-specialty-xmlchild
  (empty base/specialty)
  (xml/xml
   :tag "titles"
   :children
    (xml/xmllist
     (xml/xml
      :text "titles")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (specialty
            :titles "titles")
          :actual
           (specialty
            :titles "titles")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "specialty<-xml"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/specialty
  :name "name"
  :image "image"
  :titles "titles"
  :reference "reference")
 (specialty<-xml
  (xml/xml
   :tag "specialty"
   :propmap
    (stringmap
     :name "name"
     :image "image")
   :children
    (xml/xmllist
     (xml/xml
      :tag "titles"
      :children
       (xml/xmllist
        (xml/xml
         :text "titles")))
     (xml/xml
      :tag "reference"
      :children
       (xml/xmllist
        (xml/xml
         :text "reference")))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (specialty
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles")
          :actual
           (specialty
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "unit<-unit-stringmap"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/unit
  :name "name"
  :image "image")
 (unit<-unit-stringmap
  (empty base/unit)
  (stringmap
   :name "name"
   :image "image")))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (unit
            :name "name"
            :image "image")
          :actual
           (unit
            :name "name"
            :image "image")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "unit<-unit-xmlchild"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/unit
  :titles "titles")
 (unit<-unit-xmlchild
  (empty base/unit)
  (xml/xml
   :tag "titles"
   :children
    (xml/xmllist
     (xml/xml
      :text "titles")))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (unit
            :titles "titles")
          :actual
           (unit
            :titles "titles")))))
    (testcase
     :passfail true
     :testpkg "nx/tactics/books/bookloader"
     :casename "unit<-xml"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (base/unit
  :name "name"
  :image "image"
  :titles "titles"
  :reference "reference"
  :unitskillmap
   (base/unitskillmap
    "skill1" (base/unitskill
              :name "skill1")))
 (unit<-xml
  (xml/xml
   :tag "unit"
   :propmap
    (stringmap
     :name "name"
     :image "image")
   :children
    (xml/xmllist
     (xml/xml
      :tag "titles"
      :children
       (xml/xmllist
        (xml/xml
         :text "titles")))
     (xml/xml
      :tag "reference"
      :children
       (xml/xmllist
        (xml/xml
         :text "reference")))
     (xml/xml
      :tag "skill"
      :propmap
       (stringmap
        :name "skill1"))))))"
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (unit
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles"
            :unitskillmap
             (unitskillmap
              :skill1
               (unitskill
                :name "skill1")))
          :actual
           (unit
            :name "name"
            :image "image"
            :reference "reference"
            :titles "titles"
            :unitskillmap
             (unitskillmap
              :skill1
               (unitskill
                :name "skill1"))))))))
  :coveragedetail
   (testcoveragedetail
    :funcmap
     (intmap
      :ability<-ability-key-value 0
      :ability<-ability-stringmap 1
      :ability<-ability-xmlchild 1
      :ability<-xml 1
      :book-read<-bookname 0
      :book<-book-key-value 2
      :book<-book-stringmap 1
      :book<-book-xml 3
      :book<-book-xmlchapter 1
      :book<-book-xmlchild 2
      :book<-xml 1
      :book<-xmldoc 1
      :book<-xmllist 1
      :boolean-write<-book 0
      :boolean-write<-booknames 0
      :chapter<-chapter-key-value 0
      :chapter<-chapter-stringmap 1
      :chapter<-chapter-xmlchild 1
      :chapter<-chapter-xmlsection 0
      :chapter<-xml 1
      :file-read<-bookname 0
      :file-write<-book 0
      :modifier<-xml 0
      :power<-power-key-value 0
      :power<-power-stringmap 1
      :power<-power-xmlability 0
      :power<-power-xmlchild 1
      :power<-power-xmlspecialty 0
      :power<-xml 1
      :rule<-rule-key-value 0
      :rule<-rule-stringmap 1
      :rule<-rule-xmlchild 1
      :rule<-xml 0
      :scenario<-scenario-key-value 0
      :scenario<-scenario-stringmap 0
      :scenario<-scenario-xmlchild 0
      :scenario<-xml 1
      :section<-section-key-value 0
      :section<-section-stringmap 0
      :section<-section-xmlchild 0
      :section<-section-xmlpower 0
      :section<-section-xmlrule 0
      :section<-section-xmlscenario 0
      :section<-section-xmlsection 0
      :section<-section-xmlskill 0
      :section<-section-xmlunit 0
      :section<-xml 1
      :skill<-skill-key-value 0
      :skill<-skill-stringmap 0
      :skill<-skill-xmlability 0
      :skill<-skill-xmlchild 1
      :skill<-skill-xmlspecialty 0
      :skill<-xml 1
      :specialty<-specialty-key-value 0
      :specialty<-specialty-stringmap 1
      :specialty<-specialty-xmlchild 1
      :specialty<-xml 1
      :string-read<-bookname 0
      :string-vxlisp<-book 0
      :string-writename<-book 0
      :unit<-unit-key-value 0
      :unit<-unit-stringmap 1
      :unit<-unit-xmlchild 1
      :unit<-unit-xmlpower 0
      :unit<-unit-xmlskill 0
      :unit<-unit-xmlweakness 0
      :unit<-xml 1
      :unitpower<-xml 0
      :unitskill<-unitskill-key-value 0
      :unitskill<-unitskill-stringmap 0
      :unitskill<-unitskill-xmlchild 0
      :unitskill<-xml 0
      :unitweakness<-xml 0
      :weakness<-xml 0
      :xml-read<-bookname 0)
    :testpkg "nx/tactics/books/bookloader")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 75)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 75)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 92
      :tests 69
      :total 75)
    :funcnums
     (testcoveragenums
      :pct 38
      :tests 29
      :total 75)
    :testpkg "nx/tactics/books/bookloader"
    :totalnums
     (testcoveragenums
      :pct 38
      :tests 29
      :total 75)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "nx/tactics/books/bookloader")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :scenario-murin-a0 0
      :scenario-murin-a1 0
      :scenario-murin-a2 0)
    :testpkg "nx/tactics/books/gettingstarted")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3)
    :docnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "nx/tactics/books/gettingstarted"
    :totalnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 3)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "nx/tactics/books/gettingstarted")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :breakdown 0
      :duress 0
      :fatigue 0
      :irrationaldeck 0
      :stagger 0
      :stress 0
      :trauma 0
      :unwillingdeck 0
      :wound-ca 0
      :wound-da 0
      :wound-ha 0
      :wound-j1 0
      :wound-j2 0
      :wound-s10 0
      :wound-s2 0
      :wound-s3 0
      :wound-s4 0
      :wound-s5 0
      :wound-s6 0
      :wound-s7 0
      :wound-s8 0
      :wound-s9 0
      :wound-sa 0
      :wound-sj 0
      :wound-sk 0
      :wound-sq 0
      :wounddeck 0)
    :testpkg "nx/tactics/damage"
    :typemap
     (intmap
      :wound 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 27)
    :docnums
     (testcoveragenums
      :pct 35
      :tests 10
      :total 28)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "nx/tactics/damage"
    :totalnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 28)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 1))
  :passfail true
  :testpkg "nx/tactics/damage")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :testpkg "vx/ui/appui")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "vx/ui/appui"
    :totalnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/ui/appui")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :testpkg "vx/ui/background")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "vx/ui/background"
    :totalnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/ui/background")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :testpkg "vx/ui/element"
    :typemap
     (intmap
      :element 0
      :orientation 0
      :point 0
      :pointlist 0
      :style 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 5)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "vx/ui/element"
    :totalnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 5)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 5))
  :passfail true
  :testpkg "vx/ui/element")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :testpkg "vx/ui/flow")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "vx/ui/flow"
    :totalnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/ui/flow")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :testpkg "vx/ui/image")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "vx/ui/image"
    :totalnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/ui/image")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :testpkg "vx/ui/navigation")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "vx/ui/navigation"
    :totalnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/ui/navigation")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :testpkg "vx/ui/scrollbar")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "vx/ui/scrollbar"
    :totalnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/ui/scrollbar")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :testpkg "vx/ui/text")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "vx/ui/text"
    :totalnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/ui/text")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :testpkg "vx/ui/textentry")
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :funcnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :testpkg "vx/ui/textentry"
    :totalnums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0)
    :typenums
     (testcoveragenums
      :pct 100
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/ui/textentry")
 (testpackage
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :layout-app 0
      :layout-background 0
      :layout-navigation 0
      :layout-split-horizontal 0
      :layout-split-vertical 0)
    :funcmap
     (intmap
      :any-render<-ui 0
      :anymap-render<-uimap 0)
    :testpkg "vx/ui/ui"
    :typemap
     (intmap
      :layout 0
      :ui 0
      :uimap 0
      :uistyle 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 2)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 2)
    :constnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 5)
    :docnums
     (testcoveragenums
      :pct 36
      :tests 4
      :total 11)
    :funcnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 2)
    :testpkg "vx/ui/ui"
    :totalnums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 11)
    :typenums
     (testcoveragenums
      :pct 0
      :tests 0
      :total 4))
  :passfail true
  :testpkg "vx/ui/ui"))