'strict mode'

import vx_core from "../../../vx/core.js"
import nx_tactics_base from "../../../nx/tactics/base.js"


export default class nx_tactics_decks_power {

  /**
   * @function powermap_tactics
   * Returns the base powermap
   * @param  {tactics} tactics
   * @return {powermap}
   */
  static t_powermap_tactics = {
    vx_type: vx_core.t_type
  }
  static e_powermap_tactics = {
    vx_type: nx_tactics_decks_power.t_powermap_tactics
  }

  // (func powermap-tactics)
  static f_powermap_tactics(tactics) {
    let output = nx_tactics_base.e_powermap
    output = nx_tactics_base.f_powermap_from_powerlist(
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Aeromancy",
        ":summary",
        "* Aero is the magical version of Air.\n* Aero effects can be sustained without a source, but they can also be canceled by counter-magic.\n* Aero reacts with Pyro to produce the [Wildfire] effect.\n* Aero reacts with Cryo to produce the [Chill] effect.\n* Aero reacts with Hydro to produce the [Fog] effect.\n* Aero reacts with Electro to produce the [Ionized] effect.\n* Aero reacts with Geo to produce the [Weightess] effect.",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Air Bubble")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Alchemy",
        ":summary",
        "* Alchemy is the art of creating acids, dusts, philter, and potions.\n* Benefits: Alchemical substances may be prepared ahead of time, used by others, and sold for profit. Their signature talent is the creation of the Philosopher's Stone that transmutes lead into gold. Because their talents benefit others, Alchemists are in high demand.\n* Penalties: Alchemical substances MUST be prepared ahead of time and require exotic ingredients. Their preparation normally requires the use of a laboratory and special equipment (See Equipment / Alchemical Devices).",
        ":titles",
        "Alchemist, Apothecary, Brewer, Chemist, Concocter, Drug Merchant, Libationist, Potioner, Snake Oil Salesman, Witcher",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Animate Colossus",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Animate Colossus"),
          "Animate Homunculus",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Animate Homunculus"),
          "Animate Statue",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Animate Statue", ":reference", "* Terra Cotta Warriors\n* Kali - The Golden Voyage of Sinbad"),
          "Ashes to Ashes",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ashes to Ashes", ":summary", "* Force a substance to age as if hundreds of years had passed.  Stone wears to powder, wood turns to ashes, metal corrodes, colors fade."),
          "Exract Rare Earths",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Exract Rare Earths", ":summary", "* Rare Earths are the most important of all alchemical ingredients because they are the catalysts that unleash the innate powers of other ingredients.\n* To those without Alchemical skill, they are indistinguishable from normal soil or sand.  An Alchemist, however, may tell the difference and may extract [Hits] drams of Rare Earths from any soil in an hour."),
          "Forge Orichalcum",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Forge Orichalcum", ":summary", "* See Equipment / Metals / Orichalcum"),
          "Forge Rebis",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Forge Rebis", ":summary", "* The Rebis (from the Latin res bina, meaning dual or double matter) is the end product of the alchemical magnum opus or great work.\n* After one has gone through the stages of putrefaction and purification, separating opposing qualities, those qualities are united once more in what is sometimes described as the divine hermaphrodite, a reconciliation of spirit and matter, a being of both male and female qualities as indicated by the male and female head within a single body. The sun and moon correspond to the male and female halves, just as the Red King and White Queen are similarly associated."),
          ":Imbue",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Imbue"),
          "Magnum Opus",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Magnum Opus", ":summary", "* The process of working with the prima materia to create the philosopher's stone. It has been used to describe personal and spiritual transmutation.\n* Prima Materia - The ubiquitous starting material required for the magnum opus. It is the primitive formless base of all matter similar to chaos, the quintessence or aether.\n* Process philosophy - An approach to philosophy that identifies processes, changes, or shifting relationships as the only true elements of the ordinary, everyday real world. It treats other real elements (examples: enduring physical objects, thoughts) as abstractions from, or dependents on, processes.\n* Stages of the Magnum Opus\n** Nigredo - The blackening or melanosis means putrefaction or decomposition. After gathering the Prima Materia, the material and the Alchemist must undergo putrefactio. The material is processed until it turns completely black. This is by far the longest and most difficult stage. It is often known as the 'dark night of the soul.' We are being asked to let go of all within us and outside of us that is not in full alignment with the truth of who we are. This is a truth as it exists on a soul level, far beyond the ego and its limited ideas or illusions about who we 'should' be. It is made far more difficult by the resistance and defenses we put up against it. Many of us will resist for years, remaining unwilling to accept that our lives, as we know them, are over. Few of us are quick to grasp the fact that there is new life waiting for us if we would only let go of the limited vision of existence we usually try so desperately to cling to. It is only when we become willing to surrender that the alchemical process truly begins. Only when we are willing to die do we have the chance to one day be reborn.\n** Albedo - The whitening or leucosis is the perfect purification. The material is further processed removing all blackness until only pure white remains. Then it is said that life has conquered death, that the king has been revived. When one has purified his awareness of Self, during meditation, by eliminating thoughts, or otherwise, then at a certain point, light appears. The light that appears is also metaphoric for an absolute clear, pure awareness of Self. In that state one is in a very fixed position, that is, very stable, very much in the here and now, in total clarity of Self. In Whiteness, the material has attained a degree of Fixedness that fire cannot destroy.\n** Rubedo - The reddening, purpling, or iosis. When the White stone or the White Elixir has been made, it needs to purified further, sublimated, until the material becomes totally Fixed and is completely stable. Then we have the Red Sulfur, the red stone, the Red Elixir, the Stone of the Wise. When the divine light has emerged during meditation, one needs to make it last. this demands a continued effort of holding one's attention to this pure awareness, not only for the length of the meditation session, but also during every day life. At a certain point the pure awareness of one's divine self will be permanent.", ":titles", "The Great Work"),
          "Prepare Alchemical Substance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Prepare Alchemical Substance", ":summary", "* Each substance requires a separate ability to be taken.\n* See Equipment / Alchemical Substances"),
          "Prepare Medicine",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Prepare Medicine", ":summary", "* Each medicine requires a separate ability to be taken.\n* See Equipment / Medicines"),
          "Prepare Powder",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Prepare Powder", ":summary", "* Each powder requires a separate ability to be taken.\n* See Equipment / Powders"),
          "Transmute State",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Transmute State", ":reference", "* Supposedly, the ancient Egyptians could create ice from water by placing water out under the stars.", ":summary", "* Force a substance to make a minor state change (e.g. Liquids become solids, soft substances turn to liquid, hard substances become soft, water evaporates, ice melts.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Anima",
        ":titles",
        "Animal Mastery, Beast Lord, Beast Master",
        ":summary",
        "* Animal Friendship and Command\n* Restrictions - Must not harm animals.",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Animal Magnetism",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Animal Magnetism", ":summary", "* [Power]: [Anima]"),
          "Animal Ward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Animal Ward", ":summary", "* [Ward] - Defends against animals.\n* [Power]: [Anima]"),
          "Banish Vermin",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Banish Vermin", ":summary", "* [Power]: [Anima]"),
          "Beast Lore",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Beast Lore", ":summary", "* [Power]: [Anima]"),
          "Beast Tongue",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Beast Tongue", ":summary", "* [Tongue] - Speak with Animal\n* [Power]: [Anima]"),
          "Bird's Eye",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Bird's Eye", ":summary", "* Have a bird spy for you.\n* [Power]: [Anima]"),
          "Call of the Wild",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Call of the Wild", ":summary", "* [Action]: Make an emotional plea for aid to any [Beast]s or [Animal]s within [Range].\n* [Power]: [Anima]\nNote that creatures will only help if it serves their own interests, and they will act indepentently according to their intelligence and nature."),
          "Calm the Beast",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Calm the Beast", ":summary", "* [Power]: [Anima]"),
          "Commune with Animals",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Commune with Animals", ":summary", "* [Action]: Sense if animals in [Range] notice anything significant. The higher the [Success], the more subtle information received.\n* [Power]: [Anima]"),
          "Control Beast",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Control Beast", ":summary", "* [Power]: [Anima]"),
          "Purge Venom",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Purge Venom", ":summary", "* By sucking on a bite, the user may rapidly remove a creature's venom from a wound.\n* [Action]: Remove 1 Poison Counter for each success.\n* [Power]: [Anima]"),
          "Creeping Doom",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Creeping Doom", ":summary", "* [Power]: [Anima]"),
          "Giant Animal",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Giant Animal", ":summary", "* [Power]: [Anima]"),
          ":Infestation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Infestation", ":summary", "* [Power]: [Anima]"),
          "Insect Swarm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Insect Swarm", ":summary", "* Distracts targets and transfers up to 3 conditions from you to the target.\n* [Power]: [Anima]"),
          "Locate Animal",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Locate Animal", ":summary", "* [Power]: [Anima]"),
          "Nature of the Beast",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Nature of the Beast", ":summary", "* [Power]: [Anima]"),
          "Natural Order",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Natural Order", ":summary", "* [Power]: [Anima]"),
          "Scent of the Wild",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Scent of the Wild", ":summary", "* [Action]: Cover the unnatural and threatening scent of creatures and gear in range. Natural creatures will treat them as if they were large herbivores.\n* [Power]: [Anima]"),
          "Shrink Animal",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Shrink Animal", ":summary", "* [Power]: [Anima]"),
          "Speak with Animals",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Speak with Animals", ":summary", "* [Power]: [Anima]"),
          "Survival of the Fittest",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Survival of the Fittest", ":titles", "Natural Selection", ":summary", "* [Power]: [Anima]")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Artifice",
        ":summary",
        "* Synergy with Mechanics",
        ":titles",
        "Artificer, Engineer, Inventor, Inventress, Machinist, Mechanic",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Construct Automaton",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Construct Automaton", ":reference", "* Minaton - Sinbad and the Eye of the Tiger", ":summary", "* Purpose - When constructing an Automaton, it must be given one or more purposes. These are similar to skills, for example: Farming, Construction, Medicine, Melee, Ranged Combat, Strength, etc. The purpose must be trained by an expert in the field and an extended roll determines the level of the Skill. Once the level is determined, specialties and abilities may be chosen equal to the level."),
          "Construct Balloon",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Construct Balloon"),
          "Construct Device",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Construct Device"),
          "Construct Flying Machine",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Construct Flying Machine"),
          "Construct Machina",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Construct Machina"),
          ":Firepower",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Firepower", ":summary", "* Temporarily increase the damage done by a mechanical weapon."),
          "Fulfill your Purpose",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fulfill your Purpose", ":reference", "* Bomb, this is Lt. Doolittle. You are NOT to detonate in the bomb bay. I repeat, you are NOT to detonate in the bomb bay! - Dark Star", ":summary", "* Machines want nothing more than to fulfill their designed purpose, so it is simple to convince them to perform this purpose, even when it is not supposed to."),
          "Ghost in the Shell",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ghost in the Shell"),
          "Imbued Nails",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Imbued Nails", ":summary", "* Empower nails to produce massive splitting damage when struck."),
          ":Invention",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Invention"),
          ":Haywire",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Haywire"),
          ":Malfunction",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Malfunction"),
          "Override Machine",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Override Machine"),
          "Speak with Machines",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Speak with Machines")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Astrology",
        ":summary",
        "* Astrology is the study of the [Stars] and the [Astral Realm]\n* Planetary days: Each day of the year is related to one of the planets, the moon and the sun. Energies differ in accordance with the position of the planets.\n* Lunar cycle: The cycle of the visible phase of the moon. This is a very powerful time for ritual ceremonies to be preformed.",
        ":titles",
        "Astrologer, Astromancer, Celestial Magic, Stargazer",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Aim of Sagittarius",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Aim of Sagittarius", ":summary", "* [Action]: Target gains [Synergy] for the next ranged [Attack]."),
          "Astral Projection",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Astral Projection", ":image", "Units/Magic/AstralProjection.jpg", ":summary", "* [Action]: Body fall unconscious with Spirit enters the [Spirit Realm].  The Spirit may travel as long as it wants, but if no one tends to the Body, it will die of dehydration in 3 days.\n* [Death]: At the moment of death, Spirit may permanently enter the [Spirit Realm]."),
          "Astral Sight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Astral Sight"),
          "Astral Ward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Astral Ward"),
          "Balance of Libra",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Balance of Libra", ":summary", "* [Action]: Place the Balance of Libra card on this unit. At any time you may discard the Balance of Libra card to cause a unit that has done damage to you to immediately suffer the same amount of damage."),
          "Calm of Cancer",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Calm of Cancer", ":summary", "* [Action]: Targets ignore all [Mind] penalties for the duration of this ability."),
          "Celestial Convergence",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Celestial Convergence"),
          "Chariot of the Sun",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Chariot of the Sun", ":summary", "* [Extended Action]: At dawn, if the sun is visible, summon a blazing chariot with horses of flame that can carry the user and up to level passengers high into the sky all day. At sunset, the chariot lands anywhere the user chooses where the sun is visible."),
          "Charm of Virgo",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Charm of Virgo"),
          "Cleansing of Aquarius",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cleansing of Aquarius", ":reference", "* Aquarius is not a water sign. It's an air sign. The mix up often comes about from Aquarius' overarching symbol, the water-bearer.", ":summary", "* [Action]: Remove X [Poison], [Disease], or [Corruption] cards from the target."),
          "Courage of Leo",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Courage of Leo", ":summary", "* [Action]: Remove X [Retreat] tokens from all target in range."),
          ":Daybreak",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Daybreak", ":summary", "* Banishes fatigue in diurnal (daytime) creatures.\n* Causes noturnal creatures to fall asleep."),
          "Déjà Vu",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Déjà Vu", ":summary", "* You have seen this situation before and are not surprised by it.\n* [Action]: The next time you are [Suprised], ignore all penalties for [Surprise]."),
          "Depth of Pisces",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Depth of Pisces", ":summary", "* [Extended Action]: Gain [Synergy] on the next [Search], [Research], or [Investigation] [Action]."),
          "Determination of Aries",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Determination of Aries", ":summary", "* [Action]: Target ignores all movement penalties (including terrain) for the duration of this effect."),
          "Duality of Gemini",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Duality of Gemini", ":summary", "* [Action]: Take on a different personality with different mannerisms. This can be the basis for a very convincing disguise."),
          ":Eclipse",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Eclipse", ":summary", "* [Extended Action]: Predict where, when, and the intensity of the next solar or lunar eclipse. The eclipse is very impressive to others and is almost always tied to important mystical events.\n* Both the Solar Eclipse and Lunar Eclipse (Blood Moon) provide the following benefits or penalties: +2 [Astrology], +2 [Black Magic]. +1 [Sorcery], -1 [Thergy], -1 [Nature Magic]"),
          "Eye of Jupiter",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Eye of Jupiter"),
          "Full Moon",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Full Moon"),
          "Hand of Fate",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hand of Fate"),
          "Hide from the Stars",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hide from the Stars", ":summary", "* Protects from the divinations of others."),
          "Meteor Shower",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Meteor Shower", ":summary", "* [Extended Action]: Call meteors", ":titles", "Starfall"),
          "Moon Bridge",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Moon Bridge", ":summary", "* Opens a bridge to the Ethereal version of the Moon."),
          "New Moon",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "New Moon"),
          "Ring of Saturn",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ring of Saturn"),
          "Secrets of Scorpio",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Secrets of Scorpio", ":summary", "* [Extended Action]: Learn a secret about a subject."),
          "Star of Ill Omen",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Star of Ill Omen"),
          ":Stargazing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Stargazing"),
          ":Starsight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Starsight", ":summary", "* See clearly at night while under the stars."),
          "Steadiness of Capricorn",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Steadiness of Capricorn", ":summary", "* [Action]: Target gains [Synergy] for the next physical, non-attack [Action]."),
          ":Sunlight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sunlight", ":summary", "* [Action]: Cause a light the unit holds to become bright sunlight. The light produces warmth like a campfire and will cause damage to creatures harmed by sunlight."),
          "Waning Moon",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Waning Moon"),
          "Waxing Moon",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Waxing Moon"),
          "Will of Taurus",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Will of Taurus", ":summary", "* [Action]: Targets ignore all attack penalties for the duration of this ability."),
          "Written in the Stars",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Written in the Stars", ":summary", "* [Action]: Foresee a random event that will happen in [Time] level.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Blessing",
        ":summary",
        "* Divine power surrounds the petitioner and those deemed allies.\n* [Focus]: +1 [Defense]",
        ":stat",
        "Will",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Bless Object", "Blessing against Cold", "Blessing against Electricity", "Blessing against Fire", "Blessing against Melee", "Blessing against Projectiles"),
        ":specialtymap",
        nx_tactics_base.f_specialtymap_from_tactics_keys(tactics, "Enhance Blessing")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Bloodcraft",
        ":summary",
        "* Each use of Blood Magic requires a blood sacrifice. The user immediately suffers one [Blood Loss], or if a captured sacrifice is available, the user may instead use the blood of the sacrifice.\n* Blood magic is a favorite of Vampires who can recover from [Blood Loss] quickly.",
        ":titles",
        "Blood Magic, Blood Brother, Blood Mage, Blood Witch, Sanguineous, Vampire",
        ":stat",
        "Shadow",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Blood Bath",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blood Bath", ":summary", "* Bathe in the blood of of the young and healthy. Gain [Vampiric Blood] (even if not a [Vampire]) equal to the number of victims drained up to [Blood Magic]."),
          "Blood Bind",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blood Bind"),
          "Blood Blade",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blood Blade", ":summary", "* Create a sword, knife, or axe from blood. Blood Weapons always cause [Bleeding]."),
          "Blood Borne",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blood Borne", ":summary", "* Target: [Bleeding]. Apply [Sickness] to a [Bleeding] target."),
          "Blood Brother",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blood Brother"),
          "Blood Feud",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blood Feud"),
          "Blood Lust",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blood Lust", ":summary", "* Action: +1 [Attack] and +1 [Damage], take -1 [Body]", ":titles", "Blood Rage"),
          "Blood Oath",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blood Oath"),
          "Blood Spear",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blood Spear", ":summary", "* Create a spear or javelin from blood. Blood Weapons always cause [Bleeding]."),
          "Blood Whip",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blood Whip", ":summary", "* Create a whip or rope from blood. Blood Weapons always cause [Bleeding]."),
          "Boil Blood",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Boil Blood", ":summary", "* Touch, Fire Attack, Criticals are only Damage."),
          "Call for Blood",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Call for Blood"),
          ":Hecatomb",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hecatomb", ":reference", "* In ancient Greece or Rome, a great public sacrifice, originally of a hundred oxen.\n* An extensive loss of life for some cause."),
          ":Lifeblood",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Lifeblood", ":summary", "* Use Blood to heal yourself.\n* [Action]: Take a [Blood Loss]. Change 1 [Critical Damage] to a normal [Damage] or change 1 [Damage] to a [Blood Loss]."),
          "Out for Blood",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Out for Blood")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Chaos",
        ":reference",
        "* Do what thou wilt shall be the whole of the Law. - Alesiter Crowley, Book of the Law\n* The Butterfly Effect - Any 'seemingly' insignificant event in the universe has the potential to trigger a chain reaction that will change the whole system.\n* Do I really look like a plan? ... I just...do things. The mob has plans. The cops have plans. Gordon's got plans. They're schemers, schemers trying to control their little worlds. I'm not a schemer. I try to show the schemers how pathetic their attempts to control things really are. ... I just do what I do best, I took your little plan and turned it on itself. Look at what happened to this city with a few drums of gas and a couple of bullets. ... Introduce a little anarchy. Upset the established order and everything becomes chaos. I'm an agent of chaos. - Joker, The Dark Knight",
        ":summary",
        "* Belief is a tool that can be applied at will rather than unconsciously.\n* Trying unusual, and often bizarre beliefs is in itself an experience worth having\n* Flexibility of belief is a form of power\n* Be outside of all categories - world views, theories, beliefs, opinions, habits and even personalities are tools that may be chosen arbitrarily in order to understand or manipulate the world one sees and creates around oneself.\n* Be tolerant - whatever one might disagree over is merely an opinion, and hence interchangeable, anyway.\n* Chaos magic is unique among magical traditions in that it does not attribute significance to any particular symbol or deity.",
        ":titles",
        "Chaos Lord, Discordian, Logros Master, Lord of Chaos",
        ":stat",
        "Shadow",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Anarchy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Anarchy"),
          ":Bedlam",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Bedlam"),
          ":Breakdown",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Breakdown", ":summary", "* Causes machinery to fail.  The more complex the device the more dramatic the failure."),
          ":Deconstruct",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Deconstruct", ":reference", "* People and planets and stars will become...dust...and the dust will become atoms...and the atoms will become...nothing. - Davros, Doctor Who", ":summary", "* Break apart an object into simpler pieces. Each successive use breaks down an object further. E.g. Wheel -> Tire -> Rubber -> Chemicals -> Atoms -> Particles"),
          "Manipulate Luck",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Manipulate Luck"),
          ":Pandemonium",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Pandemonium"),
          "Sea of Chaos",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sea of Chaos"),
          "Shroud of Uncertainty",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Shroud of Uncertainty"),
          "Tendrils of Chaos",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tendrils of Chaos"),
          "Wild Ride",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wild Ride", ":summary", "* Allow the whims of fate to carry you to a destination of their choosing."),
          ":Unravelling",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Unravelling", ":summary", "* Knots untie, locks unfasten, etc."),
          "Winds of Change",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Winds of Change")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Chronomancy",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Delay",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Delay"),
          ":Predestined",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Predestined", ":reference", "Y: Why do you even bother playing games? If you know how turns out? T:I only know what will happen because it will happen. Y:So you control everything. T:I control nothing... T:Here. This mirror reflects one second into the future... I could set the mirror two minutes into the future, or an hour. Do you want to know how this ends, and drive yourself crazy trying to avoid the inevitable? - Tiangong and Yi Xing, Honor of Kings, Secret Level Island in the Sun"),
          "Ravages of Time",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ravages of Time", ":summary", "* A target appears older than it is."),
          "Recover Lost Time",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Recover Lost Time", ":summary", "* Restore a target to a younger state. Reverses [Ravages of Time]."),
          "Reverse Time",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Reverse Time", ":reference", "* If I could turn back time... - Cher"),
          "Rewind Time",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Rewind Time"),
          "Slow Time",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Slow Time"),
          "Temporal Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Temporal Vision"),
          "Tempus Fugit",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tempus Fugit", ":summary", "* Speeds time in an area", ":titles", "Time Flies"),
          "Time Corridor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Time Corridor"),
          "Time Heals All Wounds",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Time Heals All Wounds", ":summary", "* After healing the physical effects of a wound, the ability can remove the mental scars by actually removing the wounds from the past. The level of the ability determines the number of years in the past from which the wound is erased. If the entire history is erased the wound will have never occurred and no one will remember it except the caster. The person's life history is rewritten without the wound. This can result in significant changes if the wound was debilitating. The power of this ability ensures that any changes will never be worse than the current situation."),
          "Time Sight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Time Sight"),
          "Time Shift",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Time Shift"),
          "Time Slip",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Time Slip"),
          "Time Stop",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Time Stop", ":titles", "Time Freeze"),
          "Time Walk",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Time Walk"),
          "Wall of Time",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wall of Time"),
          "Warp Time",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Warp Time", ":reference", "* Let's do the Time Warp again... - The Rocky Horror Picture Show", ":titles", "Time Warp")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Conjuration",
        ":summary",
        "* Conjuration is the art of creating things directly from the imagination. Conjured items are relatively fragile and erode quickly with use, but otherwise will last indefinitely. An item is perfectly visualized and then drawn into reality from the Astral Realm. Conjuration is similar to [Illusion], but its creations are real though they are rarely permanent.\n* Action: Check Skill vs. the Value of the item to create. If successful, the item can be used a number of times equal to the result before disintegrating. If the user has a specialty with an item, that specialty may be applied to the check.\n* Benefits - Conjuration is the natural ability of the Astral Realm and Dream Realm. All abilities are +1 in these Realms.\n* Limitations - Creation magic is exceedingly difficult with only relatively minor creations possible. The process of Conjuration is different from natural things, so all Conjured things have some imperfection or mark that distinquishes itself from a natural thing.\n* Concidental - Conjuring in ways that appear like the object was already there is [Coincidental Magic]. E.g. Drawing an illusionary sword from a real scabbard.",
        ":titles",
        "Conjurer, Creation, Creator, Manifestation",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Conjure Weapon",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Conjure Weapon", ":summary", "* Conjure a weapon out of thin air.\n* [Limited]: By the user's skill in the weapon created.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Conviction",
        ":reference",
        "* Being religious is a form of conceit. the faith in which I was brought up assured me that I was better than other people; I was 'saved,' they were 'damned'... Our hymns were loaded with arrogance - self-congratulation... With a touch more confidence and a liberal helping of ignorance, I would have been a famous evangelist... A confidence man knows he's lying; that limits his scope. But a successful shaman believes what he says - and belief is contagious; there is no limit to his scope. - Jubal, Stranger in a Strange Land",
        ":titles",
        "Crusader, Faithful, Fanatic, Grand Inquisitor, Inquisitor, Paladin, Zealot",
        ":stat",
        "Will",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Crusade",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Crusade", ":titles", "Jihad"),
          ":Defiance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Defiance"),
          ":Demonize",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Demonize"),
          ":Devotion",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Devotion"),
          "Do or Die",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Do or Die"),
          "Eternal Vigilance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Eternal Vigilance"),
          "Faith Sustains Me",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Faith Sustains Me", ":summary", "* May fast as long as skill roll exceeds number of weeks of fasting."),
          ":Fanaticism",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fanaticism"),
          "Holy Armor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Holy Armor"),
          "Holy Shield",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Holy Shield"),
          "Holy Strength",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Holy Strength"),
          ":Persecute",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Persecute"),
          ":Rapture",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Rapture"),
          "Righteous Fury",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Righteous Fury"),
          ":Righteousness",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Righteousness"),
          ":Sacrifice",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sacrifice"),
          ":Smite",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Smite", ":summary", "* [Action]: Imbue weapon and body with the strength of your Conviction.\n* [Melee] or [Close Combat] vs. [Undead], [Devil] or [Demon]: use Conviction instead of weapon to determine damage."),
          "Singular Will",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Singular Will", ":summary", "* Gain +1 to Defense when fighting in single combat with no other combatants around."),
          "Soul Blast",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Soul Blast"),
          ":Tithing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tithing", ":summary", "* Pay 10% of your income to your superior and gain 10% of the income of your followers. This income must be completely spent on the faith."),
          ":Zeal",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Zeal")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Corruption",
        ":reference",
        "* How do we begin to covet? We begin by coveting what we see every day. - The Silence of the Lambs\n* Deadite: I'll swallow your soul! Ash: Come get some. - Ash, Army of Darkness\n* There is nothin' fair in this world... No... There is nothin' safe in this world... And there's nothin' sure in this world... And there's nothin' pure in this world... Look for something left in this world... Start again! - Billy Idol, White Wedding",
        ":titles",
        "Blight Caster, Contaminator, Corrupter, Defiler, Filth, Plague Bearer, Plague Lord, Plague Walker, Sin, Sin Lord, Scourge, Tainted",
        ":stat",
        "Shadow",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Balefire",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Balefire"),
          "Befoul",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Befoul"),
          "Blight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blight", ":summary", "* Damage plant life in an area."),
          "Contaminate",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Contaminate"),
          "Corrode",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Corrode"),
          "Corrupt",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Corrupt"),
          "Decay",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Decay"),
          ":Defile",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Defile"),
          "Despoil",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Despoil"),
          "Deteriorate",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Deteriorate", ":summary", "* Magnify any existing negative tokens."),
          "Epidemic",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Epidemic", ":summary", "Copies all conditions from target to all targets in the area around the target."),
          "Eye of Corruption",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Eye of Corruption"),
          "Fester",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Fester"),
          "Miasma",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Miasma"),
          "Pestilence",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Pestilence"),
          "Plague",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Plague"),
          "Plague Carrier",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Plague Carrier", ":titles", "Plague Bearer, Typhoid Mary", ":summary", "* This ability inflicts a contagious disease on a subject while also providing some immunity to the victim.\n* The subject then spreads the disease to others."),
          "Plague Strike",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Plague Strike", ":summary", "* Add [Disease] Criticals to a normal attack."),
          "Pollute",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Pollute", ":summary", "* Add Poison or Disease to any fluid or food."),
          "Putrefy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Putrefy"),
          "Putrid Explosion",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Putrid Explosion"),
          "Rot",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Rot"),
          "Ruin",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ruin", ":summary", "* Cause a structure to age and take structural damage.", ":titles", "Raze"),
          "Sicken",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sicken"),
          "Tainted Land",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tainted Land"),
          "Wither",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wither", ":titles", "Shrivelling")
        )
      ),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Cryomancy", ":summary", "* Cryo is the magical version of Cold.\n* Cryo effects can be sustained without a source, but they can also be canceled by counter-magic.\n* Cryo reacts with Pyro to produce the [Melt] effect.\n* Cryo reacts with Geo to produce the [Brittle] effect.\n* Cryo reacts with Hydro to produce the [Freeze] effect.\n* Cryo reacts with Electro to produce the [Superconduct] effect.\n* Cryo reacts with Aero to produce the [Chill] effect."),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Cultivation",
        ":titles",
        "Chi Powers, Combat Focus, Ki Powers",
        ":reference",
        "* What you call tao. It's a power everyone possesses innately, but mastering it allows one to achieve superhuman abilities... But you must be careful how you use it. Tao is life itself. Use too much, and you'll exhaust more than just your stamina... In the worst case, overuse likely leads to death. - Shion-dono, Hell's Paradise",
        ":stat",
        "Will",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Blind Fighting",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Blind Fighting"),
          "Death Touch",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Death Touch", ":titles", "Dim Mak", ":reference", "Five Point Palm Exploding Heart Technique - Kill Bill", ":summary", "* [Power]: [Cultivation]\n* The fighter strikes vulnerable pressure points, disrupting the opponent's chi flow causing intense pain or death. The effect has no outward effect, but the victim will know something is wrong. Eventually, the victim recovers or dies suddenly from the stress.\n* [Power]: [Cultivation]-2\n* [Requires]: [Strong]\n* [Damage]: [Stun] only\n* [Crits]: [Poison]\n0 Move\n-1 Defense"),
          "Empty Force",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Empty Force", ":summary", "* The fighter projects a strike across empty space. The fighter may strike at any range, but if he does not score at least 1 Criticals for each space of Range, the ability fails.\n* [Power]: [Cultivation]\n-2 Initiative\n-2 Move\n-1 Damage\nCritical - [Range]", ":titles", "Distant Death, Kongjin"),
          "Feather Walk",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Feather Walk", ":summary", "* [Power]: [Cultivation]\n* Reduces body weight while active.  This increases the effects of [Retreat] and leaping while decreasing falling speed and damage.\n* If [Skill] greater than or equal to [Body], then unit may walk on any substance that would suspend a feather.", ":titles", "Feather Fall, Walk on Water"),
          "Feign Death",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Feign Death", ":summary", "* [Power]: [Cultivation]"),
          "Hold Breath",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hold Breath", ":summary", "* [Power]: [Cultivation]"),
          "Spirit Healing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Spirit Healing", ":titles", "Chi Kung Healing", ":summary", "* [Power]: [Cultivation]"),
          "Team Combo",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Team Combo", ":reference", "Fastball Special - Colossus and Wolverine, X-men", ":summary", "* [Power]: [Cultivation]\n* Like a [Combo], the Team Combo chains attacks together. The Team Combo however is performed by different members of a team with the identical Team Combo. Any team member may perform each step of the combo with each subsequent attack allowed to reroll 1 die. The combo ends if any attack misses, any member attacks twice in a row, or if a turn passes with no attack attempt. Any combat abilities may be strung together as a Team Combo (even abilities that only others in the team possess). Each combo must be chosen when this ability is gained and must be taken again for each separate combo."),
          "Walk on Fire",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Walk on Fire", ":summary", "* [Power]: [Cultivation]"),
          "Zen No Mind",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Zen No Mind", ":titles", "Mushin", ":reference", "The mind must always be in the state of 'flowing,' for when it stops anywhere that means the flow is interrupted...In the case of the swordsman, it means death.  When the swordsman stands against his opponent, he is not to think of the opponent, nor of himself, nor of his enemy's sword movements. ... When he strikes, it is not the man but the sword in the hand of the man's subconscious that strikes. - Zen Master Takuan Soho", ":summary", "* [Power]: [Cultivation]\n* A mind not fixed or occupied by thought or emotion and thus open to everything.\n* Mushin is achieved when a fighter feels no anger, fear or ego during combat, so the fighter is totally free to act and react towards an opponent without hesitation. At this point, a person relies not on what they think should be the next move, but what is felt intuitively.\n* A martial artist would likely have to train for many years to be capable of mushin. This allows time for combinations of movements and exchanges of techniques to be practiced repetitively many thousands of times, until they can be performed spontaneously, without conscious thought.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Curses",
        ":reference",
        "* Synchronicity is a phenomenon where people interpret two seemingly unrelated experiences as being meaningfully intertwined.",
        ":summary",
        "* Fetishism is using a symbol to represent the thing you want to affect with your magic. Whatever you do to the symbol, you do to the target. The object and the thing it represents are 'in sympathy'; they are aligned. Sympathetic magic is a useful idea because often, your target is something non-physical, or something you can’t otherwise interact with directly. You could banish negative thoughts directly, but it’s easier to tie them to something physical by writing them down and then burning the paper. As the paper burns, so does the negativity. Correspondences are related to this. For example, different-colored candles represent different desires (like green for money, red for love, black for banishment, etc.) and as the candle burns down, your spell is cast. Wearing different stones or crystals can attract luck or success to you.   \n* Cursed Energy - Cursed energy is born from negative emotions such as grief and anger. These negative feelings are common in human society so almost everyone possesses cursed energy. Cursed Energy can be controlled and focused to perform various magical feats.\n* Cursed Spirit - Cursed Spirits are apparitions manifested entirely from cursed energy. Even their bodies are composed of cursed energy, making cursed spirits invisible to non-sorcerers. The emission of cursed energy from humans collects like sediment until a cursed spirit is born from the collective negative energy. Cursed Spirits born with strong feelings directed toward a certain aspect are especially strong. The stronger humanity's fear and anger is directed at cursing a certain aspect of the world, like natural disasters, the more powerful Curse Spirits spawned from those negative sentiments will be.\n* Law of Similarity - Like produces like. An effect resembles its cause.\n* Law of Contact/Contagion - Things which have once been in contact with each other continue to act on each other at a distance.",
        ":titles",
        "Correspondence, Fetishism, Hexer, Shintoist, Soulcraft, Sympathy, Sympathetic Magic, Synchonicity, Voodoo, Witch man, Witchdoctor",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Black Vise",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Black Vise", ":summary", "* Target must use a special [Ability] each [Turn] or take a [Stun]."),
          "Breath of Life",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Breath of Life", ":summary", "* Create an [Animated] creature.", ":titles", "Cursed Corpse"),
          "Cursed Sight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cursed Sight", ":summary", "* Curses and Cursed Spirits are normally invisibile, but this ability allows them to be seen."),
          "Cursed Tool",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cursed Tool"),
          "Cursed Weapon",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cursed Weapon", ":summary", "* Cursed Item - Items can also be infused with Curse Energy including such as cursed tools, cursed objects, and cursed corpses."),
          "Dominant Possession",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dominant Possession", ":summary", "* After defeating a target in mental combat, the user possesses the body of the target. The user keeps his Mind and Will stats and uses the target's Body.", ":titles", "Skinriding"),
          ":Effigy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Effigy", ":reference", "Poppet, Voodoo Doll", ":summary", "* Create a figure representing the target. The target can be a being, a vehicle, a building, etc. The figure can be a doll, a wax figurine, an Origami, a sculpture, a drawing, or any other image created by hand by the caster. In addition, the Effigy must have some item linking it to the target. This can be a possession, a hair, a body part, etc. The more significant the better.\n* Spells may then be cast upon the figure as if the figure was at 4 spaces range regardless of actual distance or line of sight. This ability can create any number of effects, but it cannot actually cause physical damage. All Body damage becomes [Stun] if the target cannot take anymore [Stun], the excess is ignored.\n* The ability level of any Spells cast are [Limited] by the skill with which the Effigy is created and the significance of the item linked to the Effigy.", ":titles", "Straw Man"),
          "Fetish",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fetish", ":summary", "* A fetish is a small object that can be used to bind a spirit. The item must be unique and may be found or created.\n* [Action]: If you killed an extradimensional creatures last turn, you may capture the spirit of that creature in the Fetish.\n* [Action]: Release the spirit in the fetish to perform one task that turn. The spirit must perform the task if it is able though it does so under duress and may twist the intentions or deceive the user. Regardless of outcome, the spirit is released and will disappear."),
          "Figurine",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Figurine", ":summary", "* A miniature of a small creature grows into a full size version."),
          "Iron Maiden",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Iron Maiden", ":summary", "* Target takes 1 Stun Token for each point of combat damage it inflicts.", ":titles", "Thorns"),
          ":Juju",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Juju", ":summary", "* The most horrific of fetishes, the shrunken head permanently holds the spirit of the slain person in an undead limbo. A shrunken head may only be created immediately after the user directly slays a person. After that a gruesome series of rituals over the next week mummifies the head and binds the spirit to the head.\n* [Action]: Once per day, for 1 hour, the user may speak to the head and the head will telepathically respond. The head is effectively a prisoner of the user, and the user may interrogate or torment the head as he sees fit. The head cannot remain silent, but it does not have to be helpful or truthful.", ":titles", "Shrunken Head, Tsantsa"),
          "Life-like Art",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Life-like Art"),
          "Life-like Tattoo",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Life-like Tattoo"),
          "Living Tool",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Living Tool", ":summary", "* Animates a small tool which makes the next skill easier.\n* [Requires]: A simple tool with no moving parts.\n* [Action]: On the next action the tool may be used at [+1 Skill]."),
          "Living Weapon",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Living Weapon", ":summary", "* Animates a melee weapon which makes the next attack easier.\n* [Requires]: A melee weapon with no moving parts.\n* [Action]: On the next action the weapon may be used at [+1 Skill]."),
          "Miniature",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Miniature", ":summary", "* A miniature of a simple item grows into a full size version."),
          "Puppeteer",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Puppeteer", ":summary", "* When this unit acts the target unit must perform the same actions."),
          "Rack",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Rack", ":summary", "* Each time Target uses a special [Ability] it takes a [Stun]."),
          "Serendipity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Serendipity"),
          "Spirit Bottle",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Spirit Bottle", ":summary", "* Create a bottle, mirror, or vase that captures and holds the Spirit of a being. If the being's body dies, the spirit continues to exist in the bottle. The spirit may mentally communicate with anyone touching the bottle."),
          "Spirit Link",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Spirit Link", ":summary", "* Create a bond with target. Each time it does damage to a target, remove 1 white token from yourself."),
          "Subtle Possession",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Subtle Possession", ":summary", "* The user's spirit secretly enters the body of the target. The user acts as a manipulative inner voice to the target."),
          "Swap Sensations",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Swap Sensations"),
          "Sympathetic Bond",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sympathetic Bond", ":summary", "* [Action]: Bond with a willing unit.\n* [Action]: Transmit an emotion to a bonded unit."),
          "True Name",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "True Name", ":summary", "* If the user knows the True Name of his subject, he gains +1 [Synchonicity] against that subject.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Darkness",
        ":reference",
        "* The blackness gathers about, so thick, so clinging, so penetrating, so oppressive, that all other darkness that I have ever conceived would be like bright light beside it. - Aleister Crowley, Magick Without Tears\n* When the shadows are devoured by even darker shadows, the curtain pulls back and reveals a world without light! - Dark Signers, Yugioh 5Ds\n* To go in the dark with a light is to know the light. To know the dark, go dark. Go without sight and find that the dark, too, blooms and sings, and is traveled by dark feet and dark wings. - Wendell Berry, To Know the Dark",
        ":titles",
        "Dark Lord, Dark Magician, Dark Master, Dread Knight, Lord of Night, Shadow Caster, Shadow Knight, Shadow Lord, Shadow Mage, Shadow Master, Shadow Rider, Shadow Walker, Shadow Warrior",
        ":stat",
        "Shadow",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Cast Shadows",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cast Shadows", ":summary", "* Animate shadows. Like [Illusions], they have full power but are destroyed on any hit."),
          "Circle of Darkness",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Circle of Darkness"),
          "Cloak of Shadows",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cloak of Shadows", ":summary", "* Increase Stealth", ":titles", "Shroud of Night"),
          "Darkest Hour",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Darkest Hour", ":titles", "Witching Hour"),
          "Eye of Shadow",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Eye of Shadow", ":summary", "* See perfectly in any form of darkness.", ":titles", "Dark Sight, Night Vision"),
          "Heart of Darkness",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Heart of Darkness"),
          "Nightfall",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Nightfall"),
          "Oubliette",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Oubliette"),
          "Shadow Step",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Shadow Step"),
          "Shadow Strike",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Shadow Strike"),
          "Tendrils of Night",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tendrils of Night"),
          "Wall of Darkness",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wall of Darkness")
        )
      ),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Demonic", ":titles", "Demon, Demon Soul, Yoki, Yoma", ":reference", "* Claymore\n* Ghost Rider\n* Prototype\n* Yoki - 妖気, or 'demon essence' (the first character means demon, and second character is the same as the Chinese word commonly known as chi).", ":summary", "* Demon Soul is when a user has been partially or completely possessed by a demonic entity.\n* Demon Soul allows the user a number of physical advantages including regeneration and natural weaponry, however each use of an ability at full strength (higher than level - 2) risks increasing the Beast inside until it eventually dominates the user's Spirit.", ":stat", "Beast"),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Divination",
        ":reference",
        "* Casting: In various methods of divination, stones, cards, sticks and other objects are cast onto the ground or a special cloth so that an insight into the life patterns can be revealed.\n* Querent: In divination and ritual, the querent is the asker of questions.\n* Scrying: This is the area of divining by gazing into a reflecting surface.",
        ":summary",
        "* Divination is the practice of discovering the unknown.  It can foresee the future, find hidden things, uncover lost lore, and reveal deception.\n* Practitioners may see the many roads to the future and may choose the path that favors themselves and hinders their foes.\n* Fortune telling is more interested in predicting future events.  Rather, divination tends to be more about discovering information.\n* It is an accepted truism within magick that divination is imperfect.",
        ":titles",
        "Augur, Diviner, Fortune Teller, Oracle, Prophet, Seer, Soothsayer, Visionary",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "All Seeing Eye",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "All Seeing Eye", ":reference", "The Eye of  Providence"),
          "Augury",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Augury"),
          "Cartomancy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cartomancy", ":summary", "* The art of reading the future through playing cards or tarot cards."),
          "Clairaudience",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Clairaudience"),
          "Clairvoyance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Clairvoyance"),
          "Dowsing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dowsing", ":summary", "* Through the use of a divining rod the user may detect desired items hidden underground below them."),
          "Fortune Telling",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fortune Telling", ":summary", "* [Deploy]: Roll vs. target Spirit. If you succeed, you receive +1 on all actions against him this encounter.\n* Casting - In various methods of divination, bones, stones, cards, sticks and other objects are cast onto the ground or a special cloth so that an insight into the life patterns can be revealed.\n* Bibliomancy - Reading random passages from a book, such as Liber Legis or the I Ching.\n* Tea Leaves\n* Tarot"),
          "Hallmark",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hallmark", ":summary", "* Analyze a magical effect to learn information about its caster."),
          "Kismet",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Kismet"),
          "Mirror of Truth",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mirror of Truth", ":summary", "* Enchant a reflective surface to show the true nature of the reflected scene. This reveals illusions, hidden things, and can even reveal the nature of those concealing terrible secrets."),
          ":Portent",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Portent", ":summary", "* Determine if a chosen course of action will tend to be beneficial to the user or not. How it might be beneficial is not known.", ":titles", "Omen"),
          ":Postcognition",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Postcognition"),
          ":Precognition",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Precognition"),
          ":Prediction",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Prediction"),
          ":Premonition",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Premonition"),
          ":Prophesy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Prophesy"),
          ":Providence",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Providence", ":summary", "* [Action]: Divine a time and place nearby that will be beneficial if the user goes there. The roll result is not known by the user, and the success determines the benefit."),
          ":Revelation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Revelation"),
          ":Foresight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Foresight", ":summary", "* Foresight is a passive form of extra-sensory perception whereby a person spontaneously perceives information, in the form of vision, about future events before they happen.  It is distinguished from [Precognition] in that it is passive."),
          "Twist of Fate",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Twist of Fate"),
          ":Visions",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Visions"),
          ":Wyrding",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wyrding")
        ),
        ":specialtymap",
        nx_tactics_base.f_specialtymap_from_tactics_keys(tactics, "Hepatomancy", "Numerology", "Osteomancy", "Rune Casting", "Scrying", "Tasseomancy")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Dreaming",
        ":reference",
        "* I don't believe it.  That is why you fail.  Luke and Yoda - Empire Strikes Back",
        ":summary",
        "* This is the magical art of the [Fae].\n* Every child has a sense of wonder that comes with being new to the world. Adults must, of necessity, murder that special innocence in order to grow up.\n* When humanity turned its collective back on Dreaming, a terrible scourge of disbelief and negation smote the world. Hope, trust, and imagination were replaced with reason, pessimism, and scrutiny. By dismissing hope and faith, humanity avoids being hurt by its failure. Shutting out mystery and dreams anesthetizes fear, but deadens beauty as well and leads to apathy, callosuness, and close-mindedness. Though Banality is a mindless force, it is feared by the [Fae] more than any monster or villain. It is an enemy unlike anything the [Fae] have ever encountered, and they are largely helpless in its grasp.\n* Dreaming is never the same, so any Dreaming effect must be a uniquely crafted idea or it will automatically fail.",
        ":titles",
        "Glamour",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "As if in a Dream", "Concoct Dream Essence", "Create Chimera", "Down the Rabbit Hole", "Dreamcatching", "Dreamreading", "Dreamriding", "Dreamquest", "Dream Effectively", "Dream Riding", "Dream Sight", "Dream Speak", "Dream Weaving", "Epiphany", "Eyes of a Child", "Fond Memories", "Imaginary Friend", "Living Nightmare", "Nightmare Essence", "Pillow Fort", "Rapture", "Ravaging", "Reverie", "Seeming", "Shattered Dreams", "Wall of Wonders")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Electromancy",
        ":reference",
        "* Lightning is eternal, the world is but shadow. - Raiden Shogun, the Electro Archon, Genshin Impact",
        ":summary",
        "* Electro is the magical version of Electricity.\n* Electro effects can be sustained without a source, but they can also be canceled by counter-magic.\n* Electro reacts with Pyro to produce the [Overload] effect.\n* Electro reacts with Cryo to produce the [Superconduct] effect.\n* Electro reacts with Hydro to produce the [Electrocharged] effect.\n* Electro reacts with Geo to produce the [Grounded] effect.\n* Electro reacts with Aero to produce the [Ionized] effect.\n* Electric Elementalist personalities are influenced by their link to Electricity.\n* Energetic, Explosive, Dynamic, Animated, Spark of Life, High Strung\n* Symbol - Yellow Lightning",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Absorb Electricity", "Arc Lightning", "Ball Lightning", "Body Electric", "Call Lightning", "Control Lightning", "Electromagnetic Pulse", "Lightning Charge", "Lightning Lash", "Lightning Pillar", "Lightning Warp", "Resist: Electricity")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Enchantment",
        ":summary",
        "* Enchantment/Witchcraft focuses on enchantments that alter the fate of the target.\n* The deities of Witchcraft are embodiments of a life-force manifest in nature. The Goddess and God are seen as complementary polarities and this balance is seen in nature. They are sometimes symbolised as the Sun and Moon, and from her lunar associations the Goddess becomes a Triple Goddess with aspects of Maiden, Mother, and Crone. Some hold the Goddess to be pre-eminent, since she contains and conceives all. The God is the spark of life and inspiration within her, simultaneously her lover and her child.",
        ":titles",
        "Beguiler, Enchanter, Enchantress, Entrancer, Warlock, Witch, Witchcraft, Witchdoctor",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Barren Loins",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Barren Loins"),
          "Charm",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Charm"),
          "Craft Incense",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Craft Incense"),
          "Craft Perfume",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Craft Perfume"),
          "Death Ward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Death Ward", ":summary", "* Provides increased defense against undead beings."),
          "Evil Eye",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Evil Eye", ":summary", "* Reduces Spirit"),
          "Fertile Loins",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fertile Loins", ":summary", "* Next intercourse will have doubled chance to conceive a child, if possible."),
          ":Haste",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Haste", ":summary", "* [Effect]: +1 Move\n* [Target]: [Area]\n* [Duration]: [Hits]"),
          "Inscribe Rune",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Inscribe Rune", ":summary", "* Allows the permanent addition of magical properties to an item."),
          "Inscribe Sigil",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Inscribe Sigil", ":summary", "* Allows the temporary addition of magical properties to an item, portal, or area."),
          ":Malediction",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Malediction", ":summary", "* The opposite of [Charm]. Malediction increases the severity of negative effects.\n* [Action]: Roll vs. Spirit and add a Black [Curse] Token for each [Hit]."),
          "Magic Ward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Magic Ward", ":summary", "* Provides increased defense against magical creatures."),
          "Mental Ward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mental Ward", ":summary", "* Provides increased defense against mental attacks."),
          "Metal Ward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Metal Ward", ":summary", "* Provides increased defense against predominately metal weapons."),
          "Nature Ward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Nature Ward", ":summary", "* Provides increased defense against Animals, and weather."),
          ":Palsy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Palsy", ":summary", "* Reduces Move"),
          ":Pox",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Pox", ":summary", "* Reduces Social Skills"),
          "Rule of Three",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Rule of Three", ":reference", "* Ever mind the Rule of Three, three times what thou givest returns to thee, this lesson well, thou must learn, thee only gets what thou dost earn.", ":summary", "* Whatever energy a person puts out into the world, be it positive or negative, will be returned to that person three times."),
          ":Safekeep",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Safekeep", ":summary", "* [Action]: Enchant an item to prevent loss or theft. Any effect that would remove, loose, or damage the item must roll vs. Safekeep or fail in addition to any other checks."),
          ":Slow",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Slow", ":summary", "* [Effect]: -1 Move\n* [Target]: [Area]\n* [Duration]: [Hits]"),
          "Spirit Ward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Spirit Ward", ":summary", "* Provides increased defense against spirit beings and attack against [Will]."),
          "Stone Ward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Stone Ward", ":summary", "* Provides increased defense against predominately stone weapons."),
          ":Weaken",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Weaken", ":summary", "* Reduces Body"),
          "Wood Ward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wood Ward", ":summary", "* Provides increased defense against predominately wooden weapons.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Fleshcraft",
        ":summary",
        "* This mastery of the flesh defies traditional life and death. Body parts may be removed, reattched, molded to create abominations or fiendish beauty.\n* Stats may be rearranged depending on the success roll. Only magical healing will repair.",
        ":titles",
        "Flesh Molder, Sadist",
        ":stat",
        "Shadow",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Body Sculpting",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Body Sculpting", ":reference", "* Oh you'll live, probably. - Crimson Aristocrat, Runeterra", ":summary", "* Stats may be rearranged depending on the success roll. Only magical healing will repair."),
          "Flesh Molding",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Flesh Molding", ":summary", "* Body can be scuplted like clay. This is a very powerful but impercise ability. It can be further refined with [Body Scuplting]."),
          "Grafting",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Grafting", ":reference", "Frankenstein's Monster", ":summary", "* Separate living organs from their host and graft them to another."),
          "Hybridize",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hybridize", ":summary", "* Create new lifeforms by growing hybridized cells."),
          "Pain",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Pain", ":reference", "* And to think, I hesitated... - Hellraiser II\n* Oh, Kirsty.  So eager to play, so reluctant to admit it. - Pinhead, Hellraiser II\n* I guess I'm always hoping that you'll end this reign.   But it's my destiny to be the king of pain - The Police, King of Pain")
        )
      ),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Geomancy", ":summary", "* Geo is the magical version of Earth.\n* Geo effects can be sustained without a source, but they can also be canceled by counter-magic.\n* Geo reacts with Pyro to produce the [Overheat] effect.\n* Geo reacts with Cryo to produce the [Brittle] effect.\n* Geo reacts with Hydro to produce the [Quagmire] effect.\n* Geo reacts with Electro to produce the [Grounded] effect.\n* Geo reacts with Aero to produce the [Weightess] effect."),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Herbalism", ":titles", "Herbalist", ":summary", "The ability to harvest medicinal and magical herbs."),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Hydromancy", ":summary", "* Hydro is the magical version of Water.\n* Hydro effects can be sustained without a source, but they can also be canceled by counter-magic.\n* Hydro reacts with Pyro to produce the [Vaporize] effect.\n* Hydro reacts with Cryo to produce the [Freeze] effect.\n* Hydro reacts with Geo to produce the [Quagmire] effect.\n* Hydro reacts with Electro to produce the [Electrocharged] effect.\n* Hydro reacts with Aero to produce the [Fog] effect."),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Invocation",
        ":reference",
        "* And he shall separate them one from another, as a shepherd divideth his sheep from the goats. And he shall set the sheep on his right, but the goats on his left. - Matthew 25: 32-33\n* Many cultures have regarded left-handedness as evil. Words such as sinister, which in Latin means both left and unlucky. Consequently, the left hand has often symbolized the rejection of traditional religion.\n* The word 'right' derives from the Hebrew term 'yamin' from the Old Testament, meaning 'stronger'. In Hebrew, the term for 'left' is 'smowl', meaning 'dark'.\n* It is possible that this division also derives from the practice of using the left hand for purposes of personal hygiene after defecation in some cultures, rendering the left hand 'unclean'.",
        ":summary",
        "* Calling or summoning a spirit, demon, god or other supernatural agent for assistance.\n* Right Hand Path - Elevates spirituality, the strict observance of moral codes, and the worship of deities. The goal is to attain proximity to divinity, or integration with divinity.\n* Left Hand Path - Conversely, Left Hand Path values the advancement and preservation of the self, glorification of more temporal and terrestrial goals, and personal power rather than ephemeral spiritual attainments. Rather than valuing proximity to the divine, followers of Left-Hand Path belief systems seek to become divinities in their own right.",
        ":titles",
        "Cabalist, Cleric, Diabolist, Evoker, Exorcist, Invoker, Minister, Priest, Ritualist",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Angelic Chorus",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Angelic Chorus", ":titles", "Divine Chorus"),
          ":Armageddon",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Armageddon", ":titles", "Cataclysm"),
          ":Aspecting",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Aspecting", ":summary", "The practitioner manifests a particular aspect of a goddess or god (whether in speech, appearanve, behaviour or thought)."),
          ":Avatar",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Avatar", ":summary", "The practitioner becomes a version of the goddess or god."),
          "Burnt Offering",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Burnt Offering"),
          "Dark Ritual",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dark Ritual"),
          "Divine Intervention",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Divine Intervention"),
          "Divine Favor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Divine Favor"),
          ":Drought",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Drought"),
          ":Geis",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Geis", ":titles", "Geas"),
          ":Flood",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Flood"),
          "Heaven's Gate",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Heaven's Gate", ":titles", "Divine Gate, Hell's Gate"),
          ":Incarnation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Incarnation"),
          "Plague of Beetles",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Plague of Beetles", ":summary", "* Flesh eating beetles burrow from the ground and sweep over the area like a carpet."),
          "Plague of Locusts",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Plague of Locusts", ":summary", "* A swarm of locusts descends on the area. They devour all food, clog intakes, short out equipment, and terrify people."),
          "Plague of Sores",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Plague of Sores", ":summary", "* A horrific disease descends on the area. Victims appear horrific and without treatment will be permanently scarred. Naturally, the disease is highly contagious."),
          "Rain of Frogs",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Rain of Frogs", ":summary", "* A torrent of frogs fall from the sky, splattering on any hard surfaces.  Fragile exposed items of all sorts are destroyed."),
          ":Worship",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Worship", ":summary", "* Must choose a 'higher being' to worship.  Each higher being provides a bonus to a single specific ability."),
          ":Tribute",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tribute"),
          ":Sacrifice",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sacrifice"),
          "Wrath of God",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wrath of God")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Life",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Aneurysm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Aneurysm"),
          "Cure Disease",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cure Disease"),
          "Heal Major Wound",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Heal Major Wound"),
          "Heal Minor Wound",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Heal Minor Wound"),
          "Heal Scars",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Heal Scars"),
          "Heart Attack",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Heart Attack"),
          "Poison Backlash",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Poison Backlash", ":summary", "* [Action]: Touch a unit with a [Poison] ability.  The target is affected as if the ability was used against itself at full strength."),
          ":Regenerate",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Regenerate"),
          ":Replenish",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Replenish"),
          ":Resurrect",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resurrect", ":summary", "* The ability to truly bring the dead back to life is one of the most desired and difficult of all abilities. The ritual is long and complicated with a high chance of failure.  Only one of the same race as the deceased has sufficient self understanding to succeed at all.  The caster must also get at least 10 [Successes] and/or [Criticals] or the ritual fails.  Each subsequent attempt to raise the same target requires 1 additional success."),
          ":Simulacrum",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Simulacrum", ":summary", "* Grow a physical copy of a living creature. It possesses no mind or spirit unless given one through other means.", ":titles", "Clone"),
          ":Succor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Succor", ":summary", "* Relieves pain\n* Can ignore the negative effects of all tokens while this is in effect.", ":titles", "Comfort"),
          ":Transference",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Transference")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Naturalism",
        ":summary",
        "* Restrictions - Must not harm plants.",
        ":titles",
        "Botomancy, Druid, Hierophant, Nature Master",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Animate Plant",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Animate Plant"),
          "Awaken Tree",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Awaken Tree", ":summary", "* Awakens a tree and permanently gives it consciousness.  Some say that all trees were once awake."),
          "Back to Nature",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Back to Nature", ":summary", "* Dead wood or hide rapid decays."),
          "Banish Weeds",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Banish Weeds"),
          "Barkskin",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Barkskin"),
          "Binding Vines",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Binding Vines"),
          "Call the Creep",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Call the Creep"),
          "Call the Trees",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Call the Trees"),
          "Choking Fungus",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Choking Fungus", ":summary", "* Fungus spontaneously grows in the area and releases spores that cause uncontrollable coughing to anyone who breathes without a fine filter in the area."),
          "Commune with Nature",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Commune with Nature"),
          "Drink from the Earth",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Drink from the Earth"),
          "Fertile Crops",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fertile Crops"),
          "Food from the Sun",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Food from the Sun"),
          "Force of Nature",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Force of Nature"),
          "Heal Nature",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Heal Nature"),
          "Knock on Wood",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Knock on Wood", ":summary", "* Touch Wood and Remove a Token and place it on the Wood."),
          "Locate Plant",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Locate Plant"),
          "Nature Sight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Nature Sight"),
          "Nature Walk",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Nature Walk", ":reference", "Merlin, Excalibur", ":summary", "* Travel at exceptional speed through forests while appearing to walk calmly appearing and reappearing at greater distances.\n* [Continuous]: Ignore [Success] movement penalties in [Forest], [Jungle], [Swamp] and other overgrown terrain. Additionally, [Success] is applied as a penalty for anything attempting to [Track] you."),
          ":Overgroth",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Overgroth"),
          "Plant Lore",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Plant Lore"),
          "Plant Mastery",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Plant Mastery"),
          "Plant Tongue",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Plant Tongue", ":summary", "* Speak with Plant"),
          "Plant Ward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Plant Ward", ":summary", "* Defends against Plants"),
          ":Purification",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Purification"),
          ":Root",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Root"),
          "Tree Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tree Form"),
          "Wall of Thorns",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wall of Thorns", ":summary", "* [Wall]\n* May only be cast on [Forest].\n* The wall gains double Terrain Penalty."),
          "Warp Wood",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Warp Wood")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Necromancy",
        ":reference",
        "* Necromancy is the communication with the spirits of the dead sometimes via a ouija board, on which messages are spelled out and interpreted.",
        ":titles",
        "Black Savant, Bone Caster, Grave Robber, Necromancer, Necrosavant",
        ":stat",
        "Shadow",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Bone Harvest",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Bone Harvest"),
          "Brush with Death",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Brush with Death"),
          "Call the Dead",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Call the Dead", ":reference", "* Bring out your dead! - Monty Python and the Holy Grail", ":summary", "* Attract undead creatures to your location."),
          "Command the Dead",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Command the Dead"),
          "Corpse Explosion",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Corpse Explosion"),
          "Dance of the Dead",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dance of the Dead", ":summary", "* Force a dead spirit to perform a task for you."),
          "Dead Eye",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dead Eye", ":reference", "The Sixth Sense", ":summary", "* The Necromancer's eyes become white with cataracts obscuring the real world while seeing through the [Shroud] into the [Underworld]. The Necromancer can see and speak with the dead in the [Shadowlands].  The dead, however, are generally not fond of being used by Necromancers."),
          "Dead Man Walking",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dead Man Walking", ":summary", "* The Necromancer becomes corpselike and is treated as [Undead] by other [Undead]."),
          "Dead Men Tell No Tales",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dead Men Tell No Tales", ":summary", "* Speak to a corpse. This is more difficult the longer they are dead and often does not work."),
          "Deathgrip",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Deathgrip"),
          "Death's Door",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Death's Door"),
          "Drain Life",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Drain Life"),
          "Draining Strike",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Draining Strike", ":summary", "* While this ability is active, gain 1 Health when the user deals at least 1 [Health] damage with a [Close Combat] [Strike]."),
          "Embalming",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Embalming", ":summary", "* By preparing a corpse both phyically and magically, the body can avoid most negative effects of decay.\n* Embalmed undead created through Reanimation can last indefinitely."),
          "Ghost Wind",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ghost Wind", ":summary", "* Summon terrifying spirits that cause fear in an area."),
          "Hand of Glory",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hand of Glory", ":summary", "* The Hand of Glory is the dried and pickled hand of a man who has been hanged, often specified as being the left (Latin: sinister) hand, or, if the man were hanged for murder, the hand that 'did the deed.'\n* Old European beliefs attribute great powers to a Hand of Glory combined with a candle made from fat from the corpse of the same malefactor who died on the gallows. The candle so made, lighted, and placed (as if in a candlestick) in the Hand of Glory, would have rendered motionless all persons to whom it was presented."),
          "Harrowing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Harrowing"),
          "Living Death",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Living Death", ":summary", "* Temporarily turns the caster into a [Lich]."),
          "Manifestation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Manifestation", ":summary", "* Allows a dead spirit to temporarily interact with the living world."),
          "Moment of Death",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Moment of Death", ":summary", "* Touch a corpse and view its death."),
          "Mummification",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mummification", ":summary", "* A complex ritual to turn the target into a [Mummy] or [Lich].  A perfectly created undead appears like a completely normal living being (though it is no longer alive).  Flaws is the casting make the being more monstrous."),
          "Necropotence",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Necropotence", ":summary", "* Reduce your own health to increase another magical effect."),
          "Necroscope",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Necroscope"),
          "Prolong Life",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Prolong Life"),
          "Reanimation",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Reanimation"),
          "Rigor Mortis",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Rigor Mortis"),
          "Seance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Seance", ":summary", "* Draw ghosts to you and allow them to speak through you."),
          "Sever Soul",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sever Soul", ":summary", "* [Requires]: Target whose spirit has left its body.\n* [Action]: Cut the connection between the spirit and its body.  The spirit may become lost, and the body falls into a coma. The soulless body is now an attractive target for possession."),
          "Undeath",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Undeath", ":summary", "* Similar to [Resurrect], this ritual allows a being to permanently transform a [Living] being into an [Undying] one.\n* This can be used to create [Zombie] and [Skeletons] servants or create indepenent undead like [Ghouls] and [Vampires].")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Papercraft",
        ":titles",
        "Ofuda",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Art Imitates Life",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Art Imitates Life"),
          "Binding Paper",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Binding Paper"),
          "Binding Symbol",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Binding Symbol"),
          "Giant Kite",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Giant Kite"),
          "House of Cards",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "House of Cards"),
          "Paper Airplane",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paper Airplane"),
          "Paper Crane",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paper Crane"),
          "Paper Darts",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paper Darts"),
          "Paper Doll",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paper Doll"),
          "Paper Dragon",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paper Dragon"),
          "Paper Flurry",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paper Flurry"),
          "Paper Mache",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paper Mache"),
          "Paper Plane",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paper Plane"),
          "Paper Shuriken",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paper Shuriken"),
          "Paper Snowflake",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paper Snowflake"),
          "Paper Tiger",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paper Tiger"),
          "Pinwheel",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Pinwheel")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Primus",
        ":titles",
        "Arch Demon, Arch Fiend, Celestials, Deity, Demigod, Divine Power, Galactus, Godling, Godly, Godlike, Greater Deity, Lesser Deity, Planeswalker, Power Cosmic, Prime, Primal, Supreme Deity",
        ":reference",
        "* It might take the suffering or worship of 10,000 souls to produce a grain of Divinity...but a single grain is beyond all the power of this world.",
        ":summary",
        "* The ability to absorb the worship of others. Level determines the amount of Primus that can be held at once.\n* Primus energy is the most fundamental energy in existence. It is, at once, physical, mental, and spiritual. As the fundamental energy of the cosmos, those that wield it have a special connection to reality and can gain control over certain aspects of reality.\n* Though Primus is not innately more powerful than other forces, it makes other abilities a great deal more effective.",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Channel Worship",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Channel Worship", ":reference", "A god cannot survive as a memory. - Apollo, Star Trek - Who Mourns for Adonais?", ":summary", "* With this ability, the user may use the worship directed toward him, to recover [Primal]."),
          "Create Artifact",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Create Artifact", ":summary", "* [Requires]: Spend a [Primal]\n* [Action]: Create [Skill] worth of artifacts of any sort desired. These are free to maintain on any Plane the user created. They require an additional [Primal] per day when up to [Skill] Artifacts are on any other Plane."),
          "Create Servitors",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Create Servitors", ":summary", "* [Requires]: Spend a [Primal]\n* [Action]: Create [Skill] worth of creatures of any sort desired. These are free to maintain on any Plane the user created. They require an additional [Primal] per day when up to [Skill] Servitors are on any other Plane. Such Servitors are usually fanatically loyal, though some users do not inspire loyalty."),
          "Primal Grace",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Grace", ":summary", "* [Requires]: Spend a [Primus]\n* [Free]: The current non-combat action cannot fail. The minimum success is 1 Critical."),
          "Planescaping",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Planescaping", ":summary", "* [Requires]: Spend a [Primal]\n* [Action]: Create a small Plane (pocket dimension) in the [Etherial Realm] that lasts up to [Level] days. This Plane has a radius of [Skill] x 100 miles.\n* [Action]: Sustain a previously created Plane for an additional [Level] days.\n* [Action]: Make a single alteration to a previously create Plane. This alteration may be anything that the user chooses, has a radius of [Skill] miles, and is permanent."),
          "Primal Accuracy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Accuracy", ":summary", "* [Requires]: Spend a [Primal]\n* [Free]: The current [Attack] ignores target [Evade]. It may also be targetted to affect only one type of material."),
          "Primal Armor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Armor", ":summary", "* [Requires]: Spend a [Primus]\n* [Free]: For this turn, gain [Armor] equal to [Skill] vs. any type of attack including [Primal Strike]."),
          "Primal Avatar",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Avatar"),
          "Primal Awe",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Awe"),
          "Primal Blessing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Blessing", ":summary", "* Action: Transfer any amount of [Primus] to the target."),
          "Primal Defense",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Defense", ":summary", "* [Requires]: Spend a [Primus]\n* [Free]: For this turn, gain [Defense] equal to [Skill] vs. any type of attack including [Primal Accuracy]."),
          "Primal Embodiment",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Embodiment", ":summary", "* [Requires]: Spend a [Primus]\n* [Action]: For the next [Skill] turns, the user may use any ability through any willing target."),
          "Primal Immortality",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Immortality", ":summary", "* [Passive]: User does not age, does not require food, water or air.  User is immune to disease, gases, non-acidic poisons."),
          "Primal Immunity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Immunity", ":summary", "* [Requires]: Spend a [Primal]\n* [Free]: Enable survival in any environment for the next [Skill] days."),
          "Primal Reach",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Reach", ":summary", "* [Requires]: Spend a [Primal]\n* [Free]: Another ability has unlimited [Range] with no penalty for distance. This can even apply to [Melee] and [Close Combat]."),
          "Primal Regeneration",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Regeneration", ":summary", "* [Requires]: Spend a [Primal]\n* [Action]: Immediately remove [Skill] damage tokens of any kind."),
          "Primal Reincarnation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Reincarnation", ":summary", "* [Requires]: Spend a [Primal]\n* [Action]: Return from the dead in a new form."),
          "Primal Resurrection",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Resurrection", ":reference", "* Hmm, my heroic last stands never seem to stick. - Jax, Runeterra", ":summary", "* [Requires]: Spend all [Primal]\n* [Action]: Return from the dead."),
          "Primal Sense",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Sense", ":summary", "* [Action]: Detect any being with [Primal] or [Primal] used within the area within the last [Skill] days."),
          "Primal Strength",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Strength", ":summary", "* [Requires]: Spend a [Primal]\n* [Free]: Perform any feat of strength."),
          "Primal Strike",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Strike", ":summary", "* [Requires]: Spend a [Primal]\n* [Free]: The current [Attack] ignores target [Armor]."),
          "Primal Transfer",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Transfer", ":summary", "* [Requires]: Spend a [Primal]\n* [Action]: Target gains a [Primal]."),
          "Primal Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Vision", ":summary", "* [Requires]: Spend a [Primal]\n* [Action]: View any area that is known or the area that a known person occupies."),
          "Soul Binding",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Soul Binding", ":summary", "* Capture a soul that has become separated from its body. This soul can be willing or unwilling.  It can then be bound to a body or other form on a Plane created by the user."),
          "Sphere of Control",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sphere of Control", ":summary", "* Sphere of control is an idea, activity, or philosophy with which the user is strongly associated.\n* Developing a Sphere of Control is difficult, but allows the user to have far reaching powers whenever the Sphere is present. This benefits both the user and his followers.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Protection",
        ":titles",
        "Abjuration",
        ":summary",
        "* Protective Magic. They create barriers, negate abilities, harm trespassers, or banish those who do not belong. It includes Barriers and Wards.",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Banishment",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Banishment", ":summary", "* [Action]: Return any [Outsider] to its original realm. This ability may only be attempted on a particular being once per month."),
          "Binding",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Binding", ":summary", "* Any subject successfully summoned is attuned to the caster and is subject to a binding. The caster may bind immediately or parley first and use the binding as a threat.\n* [Requires]: The caster must describe the subject's past in detail and name his/her demands. If the description is in error or the demand cannot be completed, the Binding automatically fails.\n* [Action]: If successful, the caster will know the subject is bound and it will perform the demand to the letter, but the subject is unwilling and will seek to defeat the caster's wishes through semantics or in passive/agressive ways."),
          "Binding Contract",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Binding Contract", ":summary", "* Like [Binding], any subject successfully summoned is attuned to the caster and is subject to a binding. The caster may parley and use the binding to enforce an agreement.\n* [Requires]: The caster must name his/her demands and offer compensation to the subject. They may then negotiate for as long as desired.\n* [Action]: If the subject refuses to bargain, the caster may still cast or threaten a [Binding]. If the subject agrees to the bargain, the subject and the caster are automatically bound to the terms of the bargain, and both must fulfill their commitments or be immediately subject to a [Summoning] and automatically successful forced [Binding] (even if neither party has these abilities)."),
          "Containment Jar",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Containment Jar", ":reference", "* Evil Containment Wave - Dragon Ball", ":summary", "* A summoned being may be captured in a special container that permanently imprisons the creature.\n* The being in the jar can telepathically communicate with anyone touching the jar. If the jar is broken, the being is immediately freed. The being may bargain for its freedom, and if it does so, it must fulfill its bargain.\n* Imprisonment in a jar can be used as a threat or the caster may simply imprison the being to be used later.", ":titles", "Souljar"),
          "Create Elder Sign",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Create Elder Sign"),
          ":Pentagram",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Pentagram", ":summary", "* A Triangle enclosed in a circle. A double triangle will form a Pentagram.\n* The five points represent the four elements with the spirit presiding at the top. The triangles form a doorway.\n* Time allowing, it is usually meticulously inscribed and used with a [Protective Circle].\n* It serves to contain any being (and its minions) summoned by the caster.\n* It provides defense equal to the success roll versus any being (and its minions) summoned by the caster. This defense applies to ALL attempts to act across the Pentagram. If an attack exceeds the defense of the Pentagram, the defense reduces by one.", ":titles", "Binding Circle, Devil's Door, Thaumaturgic Triangle"),
          "Protective Circle",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Protective Circle", ":summary", "* A protective barrier inscribed on the ground to protect the caster from summoned beings (usually his own).\n* A typical size for a circle is nine feet in diameter, though the size can vary depending on the purpose of the circle.\n* Some practitioners choose to mark the physical boundary of their circle, either before or prior to the actual casting. This can be done using a cord, a chalk line, a line drawn in the soil, or small objects such as stones.\n* Some practitioners mark the four cardinal points with candles, either white, or of colors representative of the elements:\n** North: green for the element of Earth\n** East: yellow for the element of Air\n** South: red for the element of Fire\n** West: blue for the element of Water\n* Cutting a door - The barrier is fragile and sensitive to things passing through it. Leaving or passing through the circle often weakens or dispels the barrier. This is referred to as 'breaking the circle'. Practitioners should not leave the circle unless absolutely necessary. In order to leave a circle and keep it intact, a door must be cut in the energy of the circle. Using the athame, a doorway is cut in the circle, at which point anything may pass through without harming the circle. This opening must be closed afterwards by reconnecting the lines of the circle.", ":titles", "Circle of Protection, Protective Circle"),
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Guards and Wards")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Purity",
        ":reference",
        "* Snow White",
        ":summary",
        "* Aura\n* All Purity skills are at -1 for each level of [Shadow]. Ironically, the [Beast] is natural and therefore is not impure.\n\nThere are said to be 'Four Affirmations' of the spirit:\n* Tradition and the family - The family is seen as the main mechanism by which traditions are reserved.  Their main celebrations relate to birth and marriage.\n* Love of nature - Nature is sacred; to be in contact with nature is to be close to the sacred spirits.  Natural objects are worshipped as containing sacred spirits. Killing living beings should be done with reverence for taking a life to continue one's own, and should be kept to a minimum.\n* Physical cleanliness - Take baths, wash hands, and rinse mouths often.\n* Festivals - Any festival dedicated to the Spirits, of which there are many each year.",
        ":titles",
        "Asceticism, Angel, Banisher, Brother, Buddist, Exorcist, Father, Friar, Hearth Mage, Monk, Mother Superior, Nun, Paladin, Penitent, Purifier, Purity, Shintoist, Sister",
        ":stat",
        "Will",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Absolution",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Absolution", ":summary", "* A ritual of cleansing of sin. Absolution can be a difficult journey depending on the person and the sins. To be absolved, one must fully express, accept and atone for one's sins, only then may absolution be found.", ":titles", "Atonement"),
          "Arrow of Purity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Arrow of Purity", ":reference", "* Kakome, Inuyasha\n* Mirana, DOTA", ":summary", "* An arrow or other projectile can be enhanced to destroy corruption.\n* +1 Attack and +1 Damage vs. [Corrupted] or [Chaotic]"),
          "Blaze of Glory",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blaze of Glory"),
          "Calm Animal",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Calm Animal"),
          "Chime of Purity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Chime of Purity", ":summary", "* The user sounds a bell or chime, and its piercingly pure tones are unbearable to otherworldly beings."),
          ":Cleaning",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cleaning", ":summary", "* By simply rubbing any dirty surface with a wet cloth, the material immediately becomes cleaner regardless of the contamination. All harmful contaminents are cleaned off as well."),
          ":Cleanse",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cleanse", ":summary", "* Those who believe see a silvery shower wash over the target and cleaning away [Disease] or [Poison] like dirt.\n* Reduces [Poison] and [Disease] damage rolls by the skill level."),
          ":Exorcism",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Exorcism", ":summary", "* Banish a spirit that is possessing a person, item, or location."),
          ":Halo",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Halo", ":summary", "* Magnificient halo of light appears behind the user's head.  Observers are awed by the sight.\n* [Action] - +1 on Social abiliites.", ":titles", "Godshead"),
          ":Introspection",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Introspection"),
          ":Pacifism",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Pacifism"),
          ":Penance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Penance"),
          ":Purify",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Purify", ":summary", "* Contamination including filth, [Disease], [Poison], or [Raditation] may be cleansed in a small area."),
          ":Purge",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Purge"),
          ":Sanctuary",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sanctuary", ":summary", "* From the user's perspective, it is like being on stage. While chanting, a spotlight seems to come upon the user, all other lights dim, and enemies cease to notice the user's presence."),
          "Sense Corruption",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sense Corruption"),
          ":Serenity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Serenity"),
          "Throw Salt",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Throw Salt"),
          "True Sight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "True Sight"),
          "Vow of Chastity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vow of Chastity", ":titles", "Celibacy"),
          "Vow of Obedience",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vow of Obedience", ":reference", "To dream the impossible dream\nTo fight the unbeatable foe\nTo bear with unbearable sorrow\nAnd to run where the brave dare not go\n\nTo right the unrightable wrong\nAnd to love pure and chaste from afar\nTo try when your arms are too weary\nTo reach the unreachable star\n\nThis is my quest\nTo follow that star\nNo matter how hopeless\nNo matter how far\n\nTo fight for the right\nWithout question or pause\nTo be willing to march, march into Hell\nFor that heavenly cause\n\nAnd I know if I'll only be true\nTo this glorious quest\nThat my heart will lie peaceful and calm\nWhen I'm laid to my rest - Don Quixote, The Impossible Dream", ":summary", "* The vow of obedience is a commitment to truly follow the direction of ones beliefs regardless of obstacles or consequences knowing that whatever the outcome, it was always the true, right outcome."),
          "Vow of Poverty",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vow of Poverty"),
          "Vow of Silence",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vow of Silence"),
          "Ward Undead",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ward Undead")
        )
      ),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Pyromancy", ":summary", "* Pyro is the magical version of Earth.\n* Pyro effects can be sustained without a source, but they can also be canceled by counter-magic.\n* Pyro reacts with Geo to produce the [Overheat] effect.\n* Pyro reacts with Cryo to produce the [Melt] effect.\n* Pyro reacts with Hydro to produce the [Vaporize] effect.\n* Pyro reacts with Electro to produce the [Overload] effect.\n* Pyro reacts with Aero to produce the [Wildfire] ability."),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Radiant",
        ":titles",
        "Bright, Light, Lightbringer",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Blinding Light",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blinding Light"),
          "Blinding Wall",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blinding Wall", ":titles", "Wall of Light"),
          ":Daybreak",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Daybreak", ":summary", "* Gain +1 [Light] Skill for the first hour after the crack of dawn."),
          "Command Light",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Command Light", ":summary", "* Redirect a [Light] ability to a new target."),
          ":Moonbeam",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Moonbeam"),
          "Purifying Light",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Purifying Light", ":summary", "* Glowing rays of light appear to emanate from any light the user possesses. Vermin, undead, demons, devils, or any user of [Corruption] will be damaged by the light as if it were [Fire]. All pure beings struck by the rays may remove a [Stun] Token.", ":titles", "Divine Light, Holy Light"),
          "Summon Radiance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Summon Radiance"),
          ":Sunbeam",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sunbeam"),
          "Swords of Revealing Light",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Swords of Revealing Light", ":summary", "* Blazing rays of light shine around the user, revealing hidden or disguised things.\n* [Action]: Any hidden or disguised thing directly in front of the user, reduces its chance to stay concealed by the [Successes].")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Shamanism",
        ":titles",
        "Shaman, Spirit Caller, Witch Doctor",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Call Spirits", "Control Spirit", "Reincarnation", "Second Sight", "Spirit Guide", "Spiritual Affinity", "Totem", "Vision Quest")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Sorcery",
        ":reference",
        "* This is forbidden. This is a summoning. I cannot speak this!... There is no light here. You came to the darkness for knowledge... And all the knowledge you seek is here. Surrender. Speak the words. Call her home. By three thay come. By three thy way opens. By the blood of the willing. We call thee home. Hail, daughter of hatred. Hail, Lilith. - Diablo IV",
        ":titles",
        "Hell Knight, Sorcerer, Sorceress, Sorceress Queen, Summoner",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Daedalus Gateway", "Dimension Door", "Dimensional Gateway", "Gateway", "Soul Pact", "Summon Demon", "Summon Devil", "Summon Familiar", "Summon Item")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Thaumaturgy",
        ":summary",
        "* The interface between Magic and Science. Mathematics, Biology, Geology and Chemistry are studied to manifest amazing creations.\n* Thaumaturgy can create permanent artificial life.\n* Thaumaturgy favors crytals and gemstones for power supplies.",
        ":titles",
        "The Art Mathematical, Wonder Working",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Create Homunculus",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Create Homunculus"),
          "Prepare Lightning in a Bottle",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Prepare Lightning in a Bottle", ":summary", "* Create [Lightning in a Bottle].")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Wizardry",
        ":summary",
        "* Conventional Wizardry believes that everything in the universe holds massive energy potential waiting to be unleashed.\n* Wizardry is the study of Magic itself. As such it is a sort of meta-Magic, focused on altering magical energies.",
        ":titles",
        "Archmagi, Magi, Wizard",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Analyze Magic",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Analyze Magic", ":summary", "* Gain understanding of a magical item or effect."),
          ":Counterspell",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Counterspell", ":summary", "* [Interrupt]: Roll a defense roll against a magical ability. If the defense succeeds, the ability has no effect."),
          ":Dampen",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dampen", ":summary", "* Magic can easily be reduced since magic already has a tentative hold on reality."),
          ":Dispel",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dispel", ":summary", "* Attack a placed magical ability.  Each hit weakens its abilities."),
          ":Fork",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fork", ":summary", "* Duplicate an allied caster's magical ability. The other caster fully controls both abilities but may not aim both at the same target."),
          ":Magnify",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Magnify", ":summary", "* Magnify draws from the potential energy in all things to increase the power in an existing force.\n* Note: Magic cannot be magnified. Magic only simulates reality and has no hidden reserves to tap.\n!Examples\n* An arrow can hit with devastating force.\n* A bird's weight can be increased so it falls.\n* A fire can be enhanced into an inferno while not burning fuel faster or producing additional smoke. The fuel has near infinite reserves to draw upon."),
          "Mana Burn",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mana Burn"),
          "Mana Leak",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mana Leak"),
          "Mana Shield",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mana Shield", ":summary", "* Forms an transparent crytal shell in front of the caster, but if they moves, the shield will drop.\n* [Defend]: Protected with level Armor from all [Physical] [Damage]."),
          "Mirror Shield",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mirror Shield", ":summary", "* Forms an transparent crytal shell in front of the caster, but if they moves, the shield will drop.\n* [Defend]: If defender was targetted by an [Energy] attack lower than level, the Attacker also suffers the attack.\n* Wall that reflects attacks back to its source."),
          "Mirror Wall",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mirror Wall", ":summary", "* Wall that reflects [Energy] attacks lower than level back to their source. Any attack higher than level will destoy the Wall."),
          "Paradigm Shift",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paradigm Shift", ":summary", "* Change one rule of nature for a moment."),
          "Power Sink",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Power Sink"),
          "Power Surge",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Power Surge"),
          ":Redirect",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Redirect", ":summary", "* [Reaction]: Redirect an Energy or Physical Ranged attack that has a single target to another target."),
          ":Stasis",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Stasis", ":summary", "* Place an equal number of White Stasis Tokens on yourself and your target."),
          "White Noise",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "White Noise", ":summary", "Sounds are garbled preventing eavesdropping"),
          "Wizard Armor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wizard Armor", ":summary", "* Defense against Energy that creates [Feedback]."),
          "Wizard Lock",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wizard Lock", ":summary", "* Wizard Lock alters an existing magical effect by freezing it in place. It becomes permanent until dispelled, but it no longer has an active effect. In this way a wall of fire would be a permanent wall that does not move or produce heat. This is often used to make a seal last indefinitely.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Acidic",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Acid Bite",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Acid Bite"),
          "Acid Blood",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Acid Blood", ":reference", "Gestates in a human host and has concentrated acid for blood - Aliens"),
          "Acid Spray",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Acid Spray"),
          "Acid Spit",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Acid Spit"),
          "Acid Sting",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Acid Sting")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Adaptation",
        ":summary",
        "Ability to survive in hostile environments. Higher power levels ignore the effects of increasingly hostile environments.",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Adapt to Cold",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to Cold"),
          "Adapt to Desert",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to Desert"),
          "Adapt to Electricity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to Electricity"),
          "Adapt to Fire",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to Fire"),
          "Adapt to Fresh Water",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to Fresh Water"),
          "Adapt to Heat",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to Heat"),
          "Adapt to High Altitude",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to High Altitude"),
          "Adapt to High Gravity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to High Gravity"),
          "Adapt to High Pressure",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to High Pressure"),
          "Adapt to Low Gravity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to Low Gravity"),
          "Adapt to Low Pressure",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to Low Pressure"),
          "Adapt to Micro Impact",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to Micro Impact", ":summary", "* Can endure the impact of very small, high velocity particles like micro meterorites and small caliber bullets."),
          "Adapt to Radiation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to Radiation"),
          "Adapt to Salt Water",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to Salt Water"),
          "Adapt to Vacuum",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to Vacuum"),
          "Adapt to Zero Gravity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to Zero Gravity"),
          "Adapt to Zero Pressure",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adapt to Zero Pressure")
        )
      ),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Agility", ":stat", "Body"),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Altered Skin",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Slippery Skin",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Slippery Skin"),
          "Toxic Skin",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Toxic Skin")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Air",
        ":reference",
        "* But still the clever north wind was not satisfied. It spoke to Vianne of towns yet to be visited, friends in need yet to be discovered, battles yet to be fought... - Chocolat\n* You're really going to trust me ... My mind is like the wind on the waves. It could change in an instant. - Kazuha, Genshin Impact",
        ":summary",
        "* Air is the element of freedom. Air elementalists remain distant from worldly concerns. They are always in continous motion, moving from place to place and never putting down roots.\n* Symbol - White Swirling Wind\n* Personality - Airy, Flighty, Emphemeral, Ethereal, Gossamer",
        ":titles",
        "Aeromancer. Storm Lord, Storm Shaman, Weather Witch, Wind Rider, Wind Walker",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Acid Cloud",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Acid Cloud", ":summary", "* Creates a cloud of acid.\n* [Damage Type]: [Corrosive]"),
          "Acid Rain",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Acid Rain", ":summary", "* Calls acid rain from an existing cloud.\n* [Damage Type]: [Corrosive]"),
          "Air Bubble",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Air Bubble"),
          "Air Breathing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Air Breathing", ":summary", "* Can breath in any kind of air without ill effect including poison gases."),
          "Alter Temperature",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Alter Temperature"),
          "Alter Weather",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Alter Weather"),
          "Call Hailstorm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Call Hailstorm"),
          "Call Hurricane",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Call Hurricane", ":summary", "* Buildup", ":titles", "Divine Wind"),
          "Call Storm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Call Storm", ":summary", "* Calls a storm cloud."),
          "Carried on the Wind",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Carried on the Wind", ":summary", "* By focusing, the user can detect small things carried on the wind. Smoke, pollen, poison, unusual smells, ash, dust, faint sounds, etc. may be detected with uncanny ability. Higher levels detect more distanct and faint things."),
          "Control Storm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Control Storm"),
          "Clean Air",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Clean Air"),
          "Choking Cloud",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Choking Cloud"),
          "Control Winds",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Control Winds", ":summary", "* Effect: Raise or lower Wind strength."),
          "Downdraft",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Downdraft"),
          "Eye of the Storm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Eye of the Storm", ":summary", "* [Action]: Create an eye in the storm that reduces [Wind Intensity] in 1 space radius for each Hit.\n* [Continue]: Reroll wind reduction and radius increases by 2 up to Level radius.\n* [Discontinue]: Wind returns to normal at same rate it was reduced."),
          "Fan the Flames",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fan the Flames"),
          "Fog Bank",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fog Bank"),
          "Smother",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Smother"),
          "Spindrift",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Spindrift", ":summary", "* Wind generates a thick mist above any body of water."),
          "Suffocate",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Suffocate"),
          "Summon Cloud",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Summon Cloud", ":summary", "* Summons a large living cloud in moisture rich air. This can obscure vision."),
          "Summon Djinn",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Summon Djinn"),
          "Summon Gust",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Summon Gust", ":summary", "* Summons a small living wind on items that may be blown in the breeze. Air elementals love nothing more than pushing things around."),
          "Summon Slyph",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Summon Slyph"),
          "Swirl",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Swirl"),
          "Temperature Control",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Temperature Control", ":summary", "* Effect: Raise or lower Temperature, Humidity."),
          "Tempest",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tempest"),
          "Tempest in a Teapot",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tempest in a Teapot", ":summary", "* Hits have no effect.  Criticals change Weather Intensity."),
          "Thunderstorm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Thunderstorm"),
          "Voices Carry",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Voices Carry", ":summary", "Listen to conversation within line of sight."),
          "Weather Sight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Weather Sight", ":summary", "* Analyze and predict weather"),
          "Wind Lash",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wind Lash", ":titles", "Wind Whip"),
          "Whirlwind",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Whirlwind", ":titles", "Cyclone, Tornado"),
          "Whispering Winds",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Whispering Winds", ":summary", "* [Power]: [Air] or [Aero]\n* Speak to others (one way) over long distances."),
          "Wind Blade",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wind Blade", ":summary", "* Create an ephemeral Sword created from thin air. It acts as a normal sword except that it does [Knockback] instead of [Bleeding]."),
          "Wind Blast",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wind Blast", ":reference", "* Where the two winds meet, there I will see the Wind Scar - Inuyasha"),
          "Wind Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wind Form", ":summary", "* [Requires]: Stand in a breeze.\n* [Action]: Gain attributes of Wind as well as [Wind Walk] for the turn.\n* [Continue]: May make [Strike] and [Grab] Wind Close Combat attacks at Level."),
          "Wind Slash",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wind Slash"),
          "Wind Walk",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wind Walk"),
          "Wind Wall",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wind Wall", ":summary", "* Wall that deflects missles and strikes aerial units."),
          "Updraft",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Updraft", ":summary", "* [Action]: Apply [Wind] in a radius around user, lift enemies off the ground with Level weight, and hurl them down, if they strike a surface they take Level damage .")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Animalism",
        ":titles",
        "Shapeshifter",
        ":reference",
        "Beast Boy, Teen Titans",
        ":summary",
        "* Gain the powers of an animal",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Adhesive Grip",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adhesive Grip"),
          "Aspect of Wolf",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Aspect of Wolf", ":reference", "Everquest"),
          "Bat Sight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Bat Sight"),
          "Bear Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Bear Form"),
          "Bear Strength",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Bear Strength"),
          "Cat Feet",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cat Feet", ":summary", "* Reduce damage from falls"),
          "Chameleon Skin",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Chameleon Skin"),
          "Extra Limbs",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Extra Limbs"),
          "Fish Eye",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fish Eye"),
          "Fish Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fish Form"),
          "Gills",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Gills"),
          "Hawk Eye",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hawk Eye", ":titles", "Eagle Eye"),
          "Hawk Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hawk Form"),
          "Puff Up",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Puff Up", ":summary", "* Increase your size to be more intimidating."),
          "Quills",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Quills"),
          "Rat Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Rat Form"),
          "Snake Bite",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Snake Bite"),
          "Snake Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Snake Form"),
          "Spider Climb",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Spider Climb"),
          "Spines",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Spines"),
          "Tendrils",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tendrils"),
          "Wings",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wings"),
          "Wolf Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wolf Form"),
          "Wolf Scent",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wolf Scent")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Appearance",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Alter Appearance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Alter Appearance"),
          "Another Face in the Crowd",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Another Face in the Crowd"),
          "Chameleon Skin",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Chameleon Skin"),
          "Doppleganger",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Doppleganger", ":summary", "Take on the appearance of someone else."),
          "Enhanced Beauty",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Enhanced Beauty"),
          "Eye of the Beholder",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Eye of the Beholder", ":summary", "* Appear differently to different viewers."),
          "Face of Terror",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Face of Terror"),
          "Fairest of them All",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fairest of them All")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Armor",
        ":summary",
        "* Armor normally alters appearance and may be a permanent alteration or a suit that may be donned.\n* [+1 Value] for Armor that can appear on demand.\n* [+2 Value] for Armor that cannot be detected.\nBody Armor may be permanent or temporary.  If permanent, no time is needed to activate it, but is must either be donned and carried or it permanently alters appearance.",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "1-Handed", "Ablative Armor", "Armor: Abdomen", "Armor: Arms", "Armor: Chest", "Armor: Feet", "Armor: Hands", "Armor: Head", "Armor: Legs", "Armor: Shoulders", "Armor: Vitals", "Auto Med System", "Body Flares", "Cryo Sleep System", "Environmental Containment", "Environmental Independence", "Floation Device", "Grappling Hoist", "Infrared Dampener", "Missile Mount", "Radar Dampener", "Radar Jammer", "Reactive Armor", "Resist: Bash", "Resist: Cold", "Resist: Corrosion", "Resist: Electricity", "Resist: Energy", "Resist: Fire", "Resist: Hack", "Resist: Magnetism", "Resist: Pierce", "Resist: Plasma", "Resist: Pressure", "Resist: Radiation", "Resist: Slash", "Turret Mount", "Ultraviolet Jammer", "Underwater Operation")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Artificial: Arms",
        ":summary",
        "* All abilities assume both arms are artificial. If only one is used all abilities are at -1.",
        ":stat",
        "Shadow",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Cybernetic Blade",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Blade"),
          "Cybernetic Claws",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Claws", ":reference", "* I'm the best at what I do - Wolverine"),
          "Cybernetic Electrifier",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Electrifier", ":summary", "* Discharge a massive electric charge through the palms of the hands."),
          "Cybernetic Fingernails",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Fingernails"),
          "Cybernetic Hammer",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Hammer"),
          "Cybernetic Knife",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Knife", ":titles", "Punch Blade"),
          "Cybernetic Knuckles",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Knuckles"),
          "Cybernetic Saw",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Saw"),
          "Cybernetic Shredder",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Shredder"),
          "Cybernetic Spike",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Spike"),
          "Cybernetic Strength",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Strength"),
          "Cybernetic Weapon Arm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Weapon Arm", ":summary", "* Nonconsealable.\n* One or both arms may be replaced with heavy weapons from rifles, grenade launchers, micromissile launchers, up to miniguns."),
          "Cybernetic Weapon Hand",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Weapon Hand", ":summary", "* A regular pistol or SMG of any sort may be modified to fit into a cybernetic arm. This ability may be purchased for each arm."),
          "Cybernetic Whip",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Whip"),
          "Extension Hand",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Extension Hand"),
          "Extra Cybernetic Arm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Extra Cybernetic Arm"),
          "False Fingerprints",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "False Fingerprints"),
          "False Palmprint",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "False Palmprint"),
          "Grapple Hand",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Grapple Hand"),
          "Monofilament Whip",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Monofilament Whip"),
          "Smartgun Link",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Smartgun Link"),
          "Sonic Filter",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sonic Filter", ":summary", "* Reduces sonic damage"),
          "Tactile Enhancer",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tactile Enhancer"),
          "Tool Hand",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tool Hand")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Artificial: Hearing",
        ":summary",
        "* All abilities assume both ears are artificial. If only one is used all abilities are at -1.",
        ":stat",
        "Shadow",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Antideafening",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Antideafening"),
          "Bug Detector",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Bug Detector"),
          "Enhanced Hearing Range",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Enhanced Hearing Range", ":summary", "* Can hear supersonic and subsonic sounds."),
          "Noise Filter",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Noise Filter"),
          "Parabolic Hearing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Parabolic Hearing"),
          "Radar Sensor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Radar Sensor"),
          "Sonar Sensor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sonar Sensor"),
          "Stethoscope Hearing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Stethoscope Hearing"),
          "Voice Stress Analyzer",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Voice Stress Analyzer", ":summary", "* Detects stress in the target's voice.  Often this means lying.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Artificial: Implants",
        ":stat",
        "Shadow",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Animated Tatoo",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Animated Tatoo"),
          "Artificial Gills",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Artificial Gills"),
          "Biomesh Skin",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Biomesh Skin"),
          "Breast Enhancement",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Breast Enhancement", ":summary", "* Size and shape may be changed at will"),
          "Body Plating",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Body Plating"),
          "Contraceptive Implant",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Contraceptive Implant"),
          "Cybersnake",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybersnake", ":summary", "* A visious close combat weapon that is implanted in mouth, stomach, or genitals! When in Close Combat range, the Cybersnake may lash out with surprise and land a potentially fatal blow."),
          "Cyberteeth",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cyberteeth", ":reference", "* Jaws - Moonraker", ":titles", "Cyberfangs"),
          "Cybernetic Rebreather",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Rebreather", ":summary", "* May survive without fresh air for 10 minutes per level."),
          "Cybernetic Tail",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Tail", ":summary", "* Adds a tail"),
          "Disease Filter",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Disease Filter"),
          "Drug Filter",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Drug Filter"),
          "False DNA",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "False DNA"),
          "Gas Filter",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Gas Filter", ":summary", "* Filters harmful gases from the particles from the air, so they never reach the lungs."),
          "Hair Colorizing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hair Colorizing"),
          "Hair Styleshifting",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hair Styleshifting"),
          "Jamming Transmitter",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Jamming Transmitter"),
          "Medical Injection System",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Medical Injection System"),
          "Motion Sensor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Motion Sensor"),
          "Nasal Filter",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Nasal Filter", ":summary", "* Removes particles from the air including sand, dust, pollen, and other large particles."),
          "Olfactory Enhancer",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Olfactory Enhancer"),
          "Poison Sniffer",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Poison Sniffer"),
          "Poison Bite",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Poison Bite"),
          "Reflex Enhancer",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Reflex Enhancer"),
          "Reinforced Bones",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Reinforced Bones"),
          "Sexual Implant",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sexual Implant"),
          "Skin Colorizing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Skin Colorizing"),
          "Stimulant Injectors",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Stimulant Injectors"),
          "Subdermal Holster",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Subdermal Holster"),
          "Subdermal Pouch",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Subdermal Pouch"),
          "Subdermal Transponder",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Subdermal Transponder"),
          "Toxin Filter",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Toxin Filter"),
          "Voice Amplifier",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Voice Amplifier"),
          "Voice Descrambler",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Voice Descrambler", ":summary", "* May understand encrypted audio information if you know the key."),
          "Voice Scrambler",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Voice Scrambler", ":summary", "* May speak in encrypted phrases that only a descrambler with the key can understand."),
          "Voice Synthesizer",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Voice Synthesizer")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Artificial: Interface",
        ":summary",
        "* Cybernetic Interface include mostly software-based sensors and systems.",
        ":titles",
        "Neuralware",
        ":stat",
        "Shadow",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Co-processor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Co-processor"),
          "Cybernetic Countermeasures",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Countermeasures", ":summary", "* Hardens cybernetic computer components against attempts to hack or scramble it systems."),
          "Cybernetic Datapad",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Datapad"),
          "Cybernetic Recorders",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Recorders", ":summary", "* Can record or playback audio and video"),
          "Direct Comm Link",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Direct Comm Link", ":summary", "* Listen to your music collection or radio stations, watch television, surf the web, or make phone calls.\n* Because these are neural links, they do not actually require cybernetic eyes or ears."),
          "Direct Neural Link",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Direct Neural Link"),
          "Medical Scanner",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Medical Scanner"),
          "Memory Chip Interface",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Memory Chip Interface"),
          "Pain Suppressor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Pain Suppressor"),
          "Security Scanner",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Security Scanner"),
          "Skill Chip Interface",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Skill Chip Interface", ":reference", "* I know Kung Fu\n* Do you know how to fly that thing? Not yet. - The Matrix"),
          "Translation Software",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Translation Software"),
          "Vehicle Link",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vehicle Link")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Artificial: Legs",
        ":summary",
        "* All abilities assume both legs are mechanical. If only one is used all abilities are at -1.",
        ":stat",
        "Shadow",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Cybernetic Kick",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Kick"),
          "Cybernetic Leap",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Leap"),
          "Cybernetic Rocket Launcher",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Rocket Launcher"),
          "Cybernetic Running",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Running"),
          "Cybernetic Tractor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Tractor", ":summary", "* Nonconsealable.\n* Replace both legs with wheels or treads."),
          "Extra Cybernetic Leg",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Extra Cybernetic Leg"),
          "Prehensile Foot",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Prehensile Foot"),
          "Spike Foot",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Spike Foot"),
          "Talon Foot",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Talon Foot"),
          "Webbed Foot",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Webbed Foot", ":summary", "* Enhanced swimming")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Artificial: Vision",
        ":stat",
        "Shadow",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Colorizing Eyes",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Colorizing Eyes"),
          "Cybernetic Antidazzle",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Antidazzle"),
          "Cybernetic Camera",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Camera"),
          "Cybernetic Eye Laser",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Eye Laser"),
          "Cybernetic Heat Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Heat Vision"),
          "Cybernetic Image Enhancement",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Image Enhancement"),
          "Cybernetic Laser Pointer",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Laser Pointer"),
          "Cybernetic Microscopic Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Microscopic Vision"),
          "Cybernetic Night Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Night Vision"),
          "Cybernetic Rangefinder",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Rangefinder"),
          "Cybernetic Targeting System",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Targeting System"),
          "Cybernetic Telescopic Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cybernetic Telescopic Vision"),
          "False Retina",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "False Retina")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Atomic Control",
        ":titles",
        "Molecular Control",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Destruction", "Disintegrate")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Charm",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Commanding Presense")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Cold",
        ":reference",
        "Cold Miser, Frozen",
        ":summary",
        "* Cold abilities slow the movement of particles in the target. This slowing causes heat to leave the target. Therefore, cold powers also trigger a rush of hot air to rise from the target swirling wind all around.\n* Symbol - Bluish White Snowflake\n* Personality: Cold Elementalist personalities are influenced by their link to Cold.\n** Examples: Cold, Icy, Chilly, Severe, Harsh, Brutal, Reserved",
        ":titles",
        "Frost Lord, Ice Breaker, Ice Queen, Snow Queen, Ice Princess",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Avalanche",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Avalanche"),
          ":Blizzard",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blizzard"),
          "Call Cold",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Call Cold", ":titles", "Coldsnap"),
          ":Chill",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Chill", ":summary", "* Damage are Slow"),
          ":Comet",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Comet", ":summary", "* A massive ball of cold falls from the sky."),
          "Control Cold",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Control Cold", ":summary", "* [Reaction]: Redirect a cold effect to another target."),
          "Frost Whip",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Frost Whip", ":titles", "Frost Lash"),
          "Frost Weapon",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Frost Weapon", ":summary", "* Add cold damage to normal attack.", ":titles", "Freezing Strike"),
          "Glacial Wall",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Glacial Wall"),
          "Ice Armor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ice Armor", ":titles", "Frozen Man, Ice Form, Ice Man Cometh"),
          "Ice Blast",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ice Blast", ":titles", "Frost Bite"),
          "Ice Bridge",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ice Bridge"),
          "Ice Castle",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Ice Castle"),
          "Ice Flow",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Ice Flow"),
          "Ice Riding",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ice Riding", ":summary", "* Provides [Skating] ability without the requirement of Skates.", ":titles", "Ice Walk"),
          "Ice Sculpture",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ice Sculpture"),
          "Ice Slide",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ice Slide"),
          "Ice Storm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ice Storm", ":titles", "Hail Storm"),
          "Icy Prison",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Icy Prison"),
          ":Snowblind",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Snowblind")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Cabin",
        ":titles",
        "Quarters",
        ":summary",
        "* The power to have living quarters inside. The maximum Mass is determined by [Rating]. The amount allocated per person determines the endurance before resupply.",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Centrifuge Chamber", "Cryogenic Chamber", "Ejection System", "Living Quarters", "Luxury Facilities", "Marine Ready Room", "Passenger Seating", "Prison Facilities", "Quarters: Captain", "Quarters: Crew", "Quarters: VIP", "Storm Chamber")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Cargo",
        ":titles",
        "Cargo Hold",
        ":summary",
        "* The ability to carry cargo. The maximum Mass is determined by [Rating].",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Fuel Scoop", "Tanker Hold")
      ),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Combine", ":reference", "* Form feet and legs; form arms and body; and I'll form the head! - Keith, Voltron\n* Mobile Suit Gundam ZZ\n* Getter Robo", ":summary", "* The Unit combines from multiple smaller Units.\n* [Action]: Combine the smaller Units. All Units must be present.\n* This [Power] is similar to [Hanger] and [Transform], but the Units are prechosen at creation and their [Cost] is included in the Combine Unit Cost.\n* Combiner [Rating] must be the total of all Units that [Combine]."),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Density", ":summary", "* Your mass is increased or decreased. This is normally permanent but may be altered. Related Powers: [Phasing], [Size]."),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Digging",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Drilling", "Excavating", "Tunneling")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Dimensional",
        ":reference",
        "* I reject your reality and substitute my own. - Adam Savage, Mythbusters",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Dimension Drop",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dimension Drop", ":summary", "* Send a small object through a dimensional portal and immediately close it again. This is most practical for sending messages or explosives."),
          "Dimensional Interference",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dimensional Interference", ":summary", "* Create an area that is more difficult to use dimensional or teleporting abilities."),
          "Dimensional Portal",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dimensional Portal", ":titles", "Gate"),
          "Dimensional Teleport",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dimensional Teleport", ":summary", "* Move rapidly from one location to another by creating a wormhole between the locations."),
          "Dimension Trace",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dimension Trace", ":summary", "* Detect the origin of a Teleporter, Dimensional Portal, or an [Outsider]."),
          "Dimension Track",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dimension Track", ":summary", "* Track the destination of someone who recently travelled using Teleport or Dimensional Travel. Also can be used to track an [Outsider] as if the user had [Tracking]."),
          "Dimensional Trap",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dimensional Trap", ":summary", "* Open a Dimensional Portal that opens when a target enters the area, draws them through, and then closes behind."),
          "Dimensional Walk",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dimensional Walk", ":summary", "* Move rapidly over terrain by quickly phasing in and out of the current space."),
          "Faster than Light",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Faster than Light"),
          ":Gate",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Gate"),
          "Identify Dimension",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Identify Dimension", ":summary", "* Ability to gain knowledge of the current dimension or the home dimension of an object or being from another dimension."),
          ":Warp",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Warp"),
          ":Waypoint",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Waypoint")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Diseases",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Fungal Growth", "Intestinal Parasite", "Rabid")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Domination",
        ":reference",
        "* We don't need no education.  We don't need no thought control. - Pink Floyd, The Wall\n* He accepted everything. The past was alterable. The past had never been altered. Oceania was at war with Eastasia. Oceania had always been at war with Eastasia. Jones, Aaronson, and Rutherford were guilty of the crimes they were charged with. He had never seen the photograph that disproved their guilt. It had never existed; he had invented it. He remembered remembering contradictory things, but those were false memories, products of self deception. How easy it all was! - 1984\n* Every move you make, every vow you break, every smile you fake, every claim you stake, I'll be watching you. Every single day... - Every Breath You Take, The Police\n* Your face will turn to alabaster. When you find your servant is your master. You'll be wrapped around my finger. - Wrapped around your Finger, The Police\n* I know this steak doesn't exist. I know that when I put it in my mouth, the Matrix is telling my brain that it is juicy and delicious. After nine years, you know what I realize? Ignorance is bliss. - Cypher, The Matrix\n* Kotodama - Power of language in Japanese",
        ":titles",
        "Dominator, Master, Puppet Master, Puppeteer",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Brainwashing",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Brainwashing"),
          "Conditioning",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Conditioning", ":reference", "Manchurian Candidate", ":summary", "* Low level success creates a confused zombie.\n* High level success creates fanatical loyalty."),
          "Edit Memories",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Edit Memories"),
          "Indoctrination",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Indoctrination", ":summary", "Slowly convert a subject into a willing servant."),
          "Induce Delusions",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Induce Delusions", ":summary", "Create paranoid delusions in the target."),
          "Past Life Regression",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Past Life Regression"),
          "Private World",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Private World", ":summary", "Create a specific dream world that the subject believes is real."),
          "Retrive Memories",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Retrive Memories"),
          "Subconscious Trigger",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Subconscious Trigger"),
          "Subjugation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Subjugation"),
          "Subliminal Messaging",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Subliminal Messaging"),
          "Suggestion",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Suggestion", ":summary", "Change"),
          "Word of Command",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Brainwashing")
        ),
        ":specialtymap",
        nx_tactics_base.f_specialtymap_from_tactics_keys(tactics, "Hypnotism")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Earth",
        ":summary",
        "* Earth is the element of substance. Earth Elementalists must be persistent, stoic, strong and enduring. They must be subbornly immobile in mind and spirit.\n* Symbol - Brown Mountain",
        ":titles",
        "Earth Lord, Earth Master, Geomancer",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Buried Alive",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Buried Alive", ":reference", "* I've done far worse than kill you. I've hurt you. And I wish to go on hurting you. I shall leave you as you left me, as you left her; marooned for all eternity in the center of a dead planet... buried alive! Buried alive...! - Khan, Star Trek II: The Wrath of Khan", ":summary", "* Collapse earth to close an opening."),
          "Call Rockslide",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Call Rockslide"),
          "Control Earth",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Control Earth", ":summary", "* [Reaction]: Redirect an earth effect to another target."),
          ":Earthbind",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Earthbind", ":summary", "* Gravity increases for target flying unit. [-1 Altitude] for each success. No effect on units that are not flying.", ":titles", "Grip of Earth"),
          "Earth Move",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Earth Move", ":summary", "* Pushes a mound of earth like a bulldozer."),
          "Earth Sight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Earth Sight", ":summary", "* By touching the ground with bare skin, detect any object directly touching the ground in sight range regardless of intervening obstacle. This ability is particularly useful underground, for seeing through walls, and for indirect fire.", ":titles", "Earthsense"),
          "Earth Till",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Earth Till", ":summary", "* Softens earth. Also can prepare earth for planting crops in a large area."),
          "Earth Walk",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Earth Walk", ":summary", "* Ignore movement penalties while travelling over natural earth or stone."),
          "Earth Wall",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Earth Wall"),
          "Earthquake",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Earthquake"),
          "Landslide",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Landslide", ":summary", "* Causes a weak section of earth or rock to collapse."),
          "Mountain out of a Molehill",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mountain out of a Molehill", ":summary", "* Grow a small pile of earth bigger and bigger."),
          "Pass Through Earth",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Pass Through Earth", ":summary", "* Allows the user to move through earth as if it were water."),
          "Quagmire",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Quagmire", ":summary", "* Any unit in the area is must spend double movement when moving.", ":titles", "Mudslide, Quicksand"),
          "Sandstorm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sandstorm"),
          "Shatter",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Shatter", ":summary", "* [Attack] - Does no damage to the target, but instead damages its [Armor].", ":titles", "Armor Break"),
          "Sinkhole",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sinkhole", ":summary", "* A prone character on bare earth begins to sink.", ":titles", "Dirt Nap"),
          "Solidify",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Solidify", ":summary", "* Any liquified solid become solid again."),
          "Stone Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Stone Form", ":summary", "* [Requires]: Cover body in dust, dirt, or mud.\n* [Action]: Gain attributes of [Earth] as well as [Earth Walk] for the turn.\n* [Continue]: May make [Strike] and [Grab] [Earth] [Close Combat] attacks at Level."),
          "Stone Pillar",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Stone Pillar", ":summary", "* [Action]: Summon a pillar of Stone within Range. (Removing any others)\n* [Reaction]: IF anything touches the pillar THEN you may make a basic Earth [Attack].\n* [Reaction]: IF you use an Earth ability THEN you may arc it to strike from the pillar instead."),
          "Treacherous Ground",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Treacherous Ground", ":summary", "* Creates a patch of broken earth or rock that will trip anything moving across it at more than a slow walk."),
          "Tremor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tremor", ":summary", "* Summons a small living earthquake in broken earth or rock. Earth elementals love nothing more than knocking things over."),
          "Volcanic Eruption",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Volcanic Eruption")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Electricity",
        ":summary",
        "* Electric Elementalist personalities are influenced by their link to Electricity.\n* Energetic, Explosive, Dynamic, Animated, Spark of Life, High Strung\n* [Crits] may be used to place 2 [Stun] each (or 2 [Damage] each if the target is [Mechanical])",
        ":titles",
        "Lightning",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Absorb Electricity", "Arc Lightning", "Ball Lightning", "Body Electric", "Call Lightning", "Control Lightning", "Electromagnetic Pulse", "Lightning Charge", "Lightning Lash", "Lightning Pillar", "Lightning Warp", "Resist: Electricity")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Empathy",
        ":summary",
        "The ability to feel the joys and pains of others",
        ":titles",
        "Empath",
        ":stat",
        "Spirit",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Change of Heart",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Change of Heart"),
          "Compulsion",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Compulsion"),
          "Cure Insanity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cure Insanity"),
          "Demoralize",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Demoralize"),
          "Depression",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Depression"),
          "Despair",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Despair"),
          "Ego Crush",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ego Crush", ":summary", "* Reduce the [Will] of the target to make them more ... pliable."),
          "Empathic Bond",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Empathic Bond", ":summary", "* Create a permanent empathic connection with a single target with an already established deep connection (typically lovers or longtime friends). Each senses the other's strong feelings over any distance. No effort is required to maintain the bond, but only one such bond can be maintained at a time."),
          "Empathic Healing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Empathic Healing", ":reference", "* The Empath - Star Trek", ":summary", "* Feel the pain the target is experiencing. Slowly duplicate all the damage from a target onto yourself and then begin healing.\n* Continuous. Each turn, duplicate 1 damage or negative condition from the target onto yourself. Once all have been duplicated, instead remove a damage or condition from the target."),
          "Empathic Link",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Empathic Link", ":summary", "* Create an empathic connection with a target. Each senses the other's honest feelings. This ability creates trust if the parties are being honest, or mistrust if the parties are false.", ":titles", "Telesthesia"),
          "Empathic Sense",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Empathic Sense", ":summary", "* Sense nearby sentient creatures by their emotions. A general sense of the emotions can be determined as well."),
          "Enrage",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Enrage"),
          "Enrapture",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Enrapture", ":titles", "Rapture"),
          "Enthrall",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Enthrall"),
          "Fear Eater",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fear Eater", ":summary", "* Remove a [Fear] from the target and gain [Will]."),
          "Guilt",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Guilt"),
          "Heal Mental Trauma",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Heal Mental Trauma"),
          "Lie Detector",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Lie Detector"),
          "Nostalgia",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Nostalgia"),
          "Obsession",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Obsession"),
          "Project Pain",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Project Pain", ":titles", "Pain Shared is a Pain Doubled", ":summary", "* Relive a past (or current) trauma and project those feelings on a target. If you have more than 1 damage you may move 1 to the target. If you have more than 1 negative condition, you may move 1 negative condition to the target."),
          "Share Pain",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Share Pain", ":reference", "* Your pain runs deep. ... Share your pain with me... and gain strength from the sharing. - Sybok, Star Trek V: The Final Frontier", ":summary", "* Feel the pain the target is experiencing and create trust through the shared experience.", ":titles", "Pain Shared is Pain Halved"),
          "Swap Sensations",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Swap Sensations"),
          "Sympathy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sympathy"),
          "Terrify",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Terrify")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Energy Manipulation",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Control Energy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Control Energy", ":summary", "* [Reaction]: Redirect an energy effect to another target."),
          "Energy Absorption",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Energy Absorption"),
          "Energy Drain",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Energy Drain"),
          "Energy Vampire",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Energy Vampire")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Engine",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Damage Control Team",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Damage Control Team", ":summary", "A crack team conducts emergency repairs.\n* [Action]: Roll vs. [Damage].  Each [Hit] removes a [White Token].  Each [Critical Hit] removes a [Black Token]. These repairs last until the end of the battle."),
          "Gas Engine",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Gas Engine"),
          "Diesel Engine",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Diesel Engine"),
          "Flex Fuel Engine",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Flex Fuel Engine"),
          "Electric Engine",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Electric Engine"),
          "Fission Engine",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fission Engine"),
          "Fusion Engine",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fusion Engine", ":summary", "* 'rockets point down' principle\n* Everything has a price. And the price of powerful rockets with nuclear propulsion is of course the dread horror of deadly atomic radiation. But the danger can be brought under control with appropriate counter-measures, and by treating the power plant with the respect it deserves. And the same measures will come in handy if your ship may be facing hostile nuclear warheads."),
          "Geared for Endurance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Geared for Endurance", ":summary", "* Vehicle is designed for Endurance and can travel unusually long distances without resupply and is exceptionally rugged."),
          "Geared for Power",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Geared for Power", ":summary", "* Vehicle is designed for Power and can tow, lift, or push 50% more load than usual."),
          "Geared for Speed",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Geared for Speed", ":summary", "* Vehicle is designed for Speed and can accelerate faster and can temporarily exceed normal speed rating."),
          "High Mobility",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "High Mobility", ":summary", "* Vehicles with this ability sacrifice overall speed for rapid turning. Movement systems are divided across the entire vehicle to maximize mobility, but this greatly reduces maximum speed.\n* -2 Speed, Unit may use Infantry movement rules."),
          "Red Line",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Red Line", ":summary", "* Engineering can push any of the ships' systems for extra performance, but run the risk of significant damage.\n* [Action]: Roll vs. the target system. Any [Hits] increase that system by 1 for [Hits] turns. Each [Critical Hit] increases that system by a further 1. Negative [Hits] reduce that system by the [Hits] for [Hits] turns. For each system [Critical Hit], the system takes a [System Damage Token].")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Equipment",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Active Camouflage",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Active Camouflage"),
          "Air Locks",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Air Locks"),
          "Airlift Ready",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Airlift Ready", ":summary", "* Ability to be quickly picked up and dropped by [Airlift] vehicles without them landing."),
          "Alarm System",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Alarm System", ":summary", "* When armed, this defensive system will raise a warning whenever a person gets too close."),
          "Anti-Personnel Charges",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Anti-Personnel Charges", ":summary", "* When armed, this defensive system will automatically detonate whenever a person gets too close."),
          "Artificial Intelligence",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Artificial Intelligence"),
          "Atmospheric Sensors",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Atmospheric Sensors"),
          "Automated Combat System",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Automated Combat System"),
          "Autopilot",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Autopilot"),
          "Biological Sensors",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Biological Sensors"),
          "Boarding Equipment",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Boarding Equipment", ":titles", "Grapple Launchers, Magnetic Mooring Lines"),
          "Camouflage Net",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Camouflage Net"),
          "Catapult Hook",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Catapult Hook", ":summary", "* Can take off and land from carriers and gain the initial speed benefit of carrier catapults."),
          "Climbing Apparatus",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Climbing Apparatus"),
          "Cloaking",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cloaking", ":titles", "Stealth Technology", ":summary", "* Reduces detection by radar, heat and other similar vehicle detection systems."),
          "Cold Protection",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cold Protection"),
          "Crane Arm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Crane Arm"),
          "Desert Protection",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Desert Protection"),
          "Detailed Scan",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Detailed Scan"),
          "Easy to Modify",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Easy to Modify"),
          "Electronic Counter-Countermeasures",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "EElectronic Counter-Countermeasures", ":titles", "ECM, Jamming"),
          "Electronic Countermeasures",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Electronic Countermeasures", ":titles", "EECM, Jamming"),
          "Electronic Warfare",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Electronic Warfare", ":titles", "EW"),
          "Grapple Launcher",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Grapple Launcher"),
          "Gun Ports",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Gun Ports", ":summary", "Allows crew to use small arms fire without sacrificing armor protection."),
          "Haywire Resistance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Haywire Resistance", ":summary", "* Resists the Haywire attack"),
          "Humanoid Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Humanoid Form"),
          "Landing Gear",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Landing Gear"),
          "Landing Gear: Snow",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Landing Gear: Snow"),
          "Landing Gear: Water",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Landing Gear: Water"),
          "Laser Link",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Laser Link"),
          "Locate Target",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Locate Target"),
          "Long Range Package",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Long Range Package"),
          "Luxury Package",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Luxury Package"),
          "Manipulator Arm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Manipulator Arm"),
          "Missile Decoys",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Missile Decoys", ":titles", "Chaff Dispenser, Flares"),
          "Minelayer",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Minelayer"),
          "Minesweeper",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Minesweeper"),
          "Navigation System",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Navigation System"),
          "Off-Road Package",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Off-Road Package"),
          "Quantum Entanglement Comm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Quantum Entanglement Comm", ":summary", "* A technique used to transfer quantum information from one quantum system to another over vast distances."),
          "Radio Comm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Radio Comm"),
          "Radio Comm AM",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Radio Comm AM"),
          "Radio Comm CB",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Radio Comm CB"),
          "Radio Comm FM",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Radio Comm FM"),
          "Ram Plate",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ram Plate"),
          "Remote Controlled",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Remote Controlled"),
          "Sport Package",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sport Package"),
          "Streamlining",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Streamlining"),
          "Tool Arm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tool Arm"),
          "Towing Capacity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Towing Capacity"),
          "Training Facilities",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Training Facilities"),
          "Vector Movement",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vector Movement", ":summary", "* Movement in frictionless environments follow Newton's first law, a object in motion tends to stay in motion.\n* Units will continue at their current speed.\n* [Speed] can used to increase or decrease current speed.\n* [Speed] can also be used to sideslip left or right by 1 space.\n* Facing can be changed by one side each space moved, but this does not change speed or direction."),
          "Weapons Locker",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Weapons Locker")
        ),
        ":specialtymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_specialtymap},
          ":Battleship",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Battleship", ":summary", "* A large (3 space) ship dedicated to being a battleship may carry a Spinal Mount weapon.\n* Spinal Mount"),
          "Colony Vessel",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Colony Vessel", ":summary", "* Cryogenic Chamber"),
          "Cargo Vessel",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Cargo Vessel", ":summary", "* Cargo Hold\n* Tanker Hold"),
          "Factory Vessel",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Factory Vessel", ":summary", "* Factory\n* Refinery\n* Tanker Hold"),
          "Heavy Bomber",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Heavy Bomber"),
          "Heavy Carrier",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Heavy Carrier", ":summary", "* A large (3 space) ship dedicated to being a carrier can carry 1 extra unit (4 units) in its Hanger.\n* Hanger\n* Launch Catapult"),
          "Luxury Vessel",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Luxury Vessel", ":summary", "* Living Quarters\n* Luxury Facilities"),
          "Prison Vessel",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Prison Vessel"),
          "Science Vessel",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Science Vessel", ":summary", "* Science Lab\n* Sensor Arrays"),
          "Search and Rescue Vessel",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Search and Rescue Vessel", ":summary", "* Wide array of sensors\n* Multipurpse rescue vehicles\n* Heavy construction equipment\n* Emergency medical facilities\n* Space for evacuation and emergency supplies"),
          "Stealth Vessel",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Stealth Vessel", ":summary", "* Cloaking Device\n* ECM\n* Stealth Equipment"),
          "Transport Vessel",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Transport Vessel", ":summary", "* Living Quarters")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Explosive",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Bombardier Spray",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Bombardier Spray"),
          "Explosive Body",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Explosive Body")
        ),
        "Explosive Punch",
        vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Explosive Punch")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Factory",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Factory: Manufacturing", "Factory: Military", "Factory: Pharmaceutical", "Factory: Vehicle", "Mining Rig", "Oil Rig", "Refinery: Gas", "Refinery: Oil", "Refinery: Ore", "Shipyard: Aircraft", "Shipyard: Mobile", "Shipyard: Naval", "Shipyard: Spaceship")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Fire",
        ":reference",
        "* Fire. It's a living thing, Brian. It breathes, it eats, and it hates. The only way to beat it is to think like it. To know that this flame will spread this way across the door and up across the ceiling, not because of the physics of flammable liquids, but because it wants to. Some guys on this job, the fire owns them, makes 'em fight it on it's level, but the only way to truly kill it is to love it a little. - Donald Rimgate, Backdraft\n* Dry is good and wind is better. Count the years you always knew it. Strike a match go on and do it...Oh light the sky and hold on tight, the world is burning down. - Shawn Colvin, Sunny Came Home",
        ":summary",
        "* Fire is the element of power. Fire Elementalists must have desire, passion, and the energy and drive to achieve it.\n* Symbol - Red Flame\n* Passionate, Fiery, Explosive, Incendiary, Violent",
        ":titles",
        "Arsonist, Fire Lord, Firebomber, Firestarter, Firewalker, Pyrokinetic, Pyromancer, Pyromaniac, Volcanist",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Burning Eyes",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Burning Eyes", ":summary", "* Flaming eyes may see heat.", ":titles", "Fire Eyes"),
          "Control Fire",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Control Fire", ":reference", "* Pyro - X-Force", ":summary", "* [Action]: Change the shape of fire.\n* [Reaction]: Redirect a fire effect to another target."),
          "Cinder Cloud",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cinder Cloud"),
          "Cleansing Fire",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cleansing Fire"),
          ":Combustion",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Combustion", ":summary", "* Summons a small living flame on combustible material. Fire elementals love nothing more than creating fires."),
          "Eternal Flame",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Eternal Flame", ":summary", "* Creates a flame that burns without fuel for as long as desired (only one at a time)."),
          "Fan the Flames",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fan the Flames"),
          "Fire Break",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fire Break", ":summary", "* Create an area where fire is smothered (does not effect existing heat)."),
          "Fire Breathing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fire Breathing"),
          "Fire Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fire Form", ":summary", "* Body becomes living flame.\n* [Action]: Gain attributes of [Fire] as well as [Fire Breathing] and [Fire Walk] for the turn.\n* [Continue]: May make [Strike] and [Grab] [Fire] [Close Combat] attacks at Level."),
          "Fire Lore",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fire Lore"),
          "Fire Storm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fire Storm", ":titles", "Rain of Fire"),
          "Fire Walk",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fire Walk", ":reference", "* I touch the fire and freezes me. I look into it and its black. Why can't I feel? My skin should crack and peel. I want the fire back. Now through the smoke, she calls to me, to make my way across the flame. To save the day or maybe melt away. I guess it's all the same. So I will walk through the fire, cause whereelse can I turn. I will walk through the fire and let it... The torch I bear is scorthing me, and Buffy's laughing I've no doubt. I hope she fries. I'm free if that bitch dies. I'd better help her out. Cause she is drawn to the fire. Some people never learn, and she will walk through the fire and let it... These endless days are finally ending in a blaze. And we are caught in the fire. The point of no return. So we will walk through the fire and let it burn. - Buffy the Vampire Slayer, Once More with Feeling", ":summary", "* Walk through flames. Gain [Armor] vs. Fire and ignore [Burning] effects."),
          "Fire Ward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fire Ward"),
          ":Fireworks",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fireworks"),
          "Flame Cage",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Flame Cage"),
          "Flame Whip",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Flame Whip", ":titles", "Fire Lash"),
          "Flame Skin",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Flame Skin", ":summary", "* Immolate body in Fire\n* [Action]: Gain attributes of [Fire].\n* [Continue]: May make [Strike] and [Grab] [Fire] [Close Combat] attacks at Level.", ":titles", "Burning Man, Fire Armor, Immolate"),
          "Flaming Weapon",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Flaming Weapon", ":summary", "* Add the [Fire] trait to a weapon or to unarmed attacks.", ":titles", "Fire Fist, Flame Tongue, Flamebrand, Flaming Arrow, Flaming Sword"),
          "Inferno",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Inferno", ":titles", "Pyroclasm", ":reference", "The embers of oblivion. Past, present, and future. A forbidden force that subsumes all creation. By my blood, by my flesh. The commandments set by the old gods are now shattered. Heavens! Earth! You will never forget my name! I am called Megumin! Foremost prodigy among Crimson Demons. Behold my Power! Explosion! - Megumin, Konosuba"),
          "Living Flame",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Living Flame"),
          "Pyroclastic Flow",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Pyroclastic Flow", ":reference", "* A fast-moving current of volcanic hot gas and rock, which reaches speeds up to 700 km/h (450 mph). The gas can reach temperatures of about 1,000 °C (1,830 °F). Pyroclastic flows normally hug the ground and travel downhill, or spread laterally under gravity.", ":titles", "Pyrolclastic Cloud, Pyronado"),
          "Ring of Fire",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ring of Fire"),
          ":Smother",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Smother"),
          "Summon Efreet",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Summon Efreet"),
          "Summon Salamander",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Summon Salamander"),
          "Wall of Fire",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wall of Fire", ":summary", "* Forms a continuous [Wall] of [Fire].\n* [Requires]: A flammable fuel must exist for the whole length of the wall."),
          ":Wildfire",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wildfire", ":summary", "* Air in the area becomes bone dry and overheated. +1 [Fire] or [Air] abilities.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Flexible",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Animated Hair",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Animated Hair"),
          "Arm Stretch",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Arm Stretch", ":summary", "* [Action]: May perform known [Punch] ability at range."),
          "Body Stretch",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Body Stretch", ":reference", "* You need to be more ... flexible. - Elastigirl, The Incredibles"),
          "Bouncing Ball",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Bouncing Ball"),
          ":Engulf",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Engulf"),
          "Hair Whip",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hair Whip"),
          "Leg Stretch",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Leg Stretch", ":summary", "* [Action]: May perform known [Kick] ability at range."),
          "Tentacles",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tentacles"),
          "Tentacle Hammer",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tentacle Hammer"),
          "Tentacle Spear",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tentacle Spear"),
          "Tentacle Whip",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tentacle Whip")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Forces",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Amplify Repulsion",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Amplify Repulsion", ":summary", "* Massively increase the repulsive force between two objects. This can increase magnetic repulsion and also increase the movement of two objects that have just collided to increase Knockback."),
          "Control Force",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Control Force", ":summary", "* [Reaction]: Redirect a force effect to another target."),
          "Bands of Force",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Bands of Force", ":titles", "Crimson Bands of Cyttorak"),
          "Force Blast",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Force Blast"),
          "Force Break",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Force Break"),
          "Force Wall",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Force Wall"),
          "Pressor Force",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Pressor Force", ":summary", "* Apply low but steady pressure pushing an object away.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Flight",
        ":image",
        "Rules/Images/MoveFlight.png",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Afterburner",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Afterburner"),
          "Air Droppable",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Air Droppable"),
          "Airlift",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Airlift", ":summary", "* Ability to pick up and drop cargo or [Airlift Ready] vehicles without landing."),
          "Atmospheric",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Atmospheric"),
          "Diving Attack",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Diving Attack", ":summary", "[Power]: [Flight]\n* This Unit can attack straight down."),
          "Diving Wings",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Diving Wings", ":summary", "+1 when pulling out of a dive"),
          "Glide",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Glide", ":titles", "Glider, Parachute", ":summary", "* Can glide without using power and may gain altitude when flying over hot air currents."),
          "Levitate",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Levitate", ":summary", "* Levitate is a slow form of movement with a maximum speed of just half a normal Move. Levitating is very stable, silent, can move in any direction, and requires no concentration. Levitating causes no noise or movement related penalties and can avoid most terrain penalties as well."),
          "Lighter Than Air",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Lighter Than Air"),
          "Nape of Earth Flight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Nape of Earth Flight"),
          ":Orbital",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Orbital"),
          "Reentry System",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Reentry System", ":summary", "* A heat shield (either inflatable or built in) for atmospheric reentry.", ":titles", "Ballute"),
          "Rocket Engine",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Rocket Engine"),
          "Stratospheric Flight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Stratospheric Flight"),
          "Supersonic Flight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Supersonic Flight"),
          "Trans-atmospheric Flight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Trans-atmospheric Flight"),
          ":VTOL",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "VTOL", ":summary", "* Hovering units may [Move] backwards.\n* Hovering units may use [Vector Movement] rule."),
          "Winged Flight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Winged Flight", ":summary", "* If the unit has wings, it must have this ability or fly at a penalty.\n* If the unit grew up with wings, this ability is assumed.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Gravity",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Call Anti-Gravity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Call Anti-Gravity"),
          "Call Gravity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Call Gravity"),
          "Control Gravity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Control Gravity", ":summary", "* [Reaction]: Redirect a gravity effect to another target."),
          "Gravity Field",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Gravity Field"),
          "Gravity Well",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Gravity Well")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Hanger",
        ":summary",
        "* The Unit can carry other Units (especially vehicles).\n* The Hanger can hold Unit [Cost] up to [Rating].\n* A unit may carry 1 small unit (1 space) per space it takes up.\n* Action: Move 1 unit into or out of the hanger. The unit may not Move or take any Action the turn it moves into or out of the hanger.\n* Ship's Boat\n* Air Raft\n* Starfighter\n* Starbomber\n* Repair Drones\n* Mobile Armor",
        ":titles",
        "Vehicle Bay",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Catapult Launcher", "Catapult Hook Capture", "Escape Pod", "Marine Drop Pod")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Healing",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Lernaean Regeneration", "Regeneration", "Regrowth")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Heat",
        ":reference",
        "Heat Miser",
        ":summary",
        "* Heat is different from Fire.",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Heat Mirage",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Heat Mirage", ":summary", "* Create vague illusions in heated areas. The scale of the illusion is only limited by the size of the heated area."),
          "Heat Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Heat Vision", ":summary", "* May see heat.", ":titles", "Thermal Vision"),
          ":Heatwave",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Heatwave")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Illusion",
        ":reference",
        "* Fantasy... can only survive with an underlying reality. Reality... is the stillness buried deep beneath the illusion. This is eternity. - Raiden Shogun, Genshin Impact",
        ":summary",
        "* Illusion is the art of fooling the target into believing in something that is not really there.\n* [Synergy]: [Art]\n* Illusions [Distract] and [Taunt].\n* Illusion Physical - A hologram. Everyone sees it. Can be recorded. Skill determines complexity.\n* Illusion Mental - Appears only in the mind of the target. Can only be defeated by being disbelieved.\n* Illusion Psychological - Very personal. User doesn't know what target sees.\n* Illusions\n** Alter the perceptions to see and hear things that do not exist.\n** Skill roll determines the difficulty to detect the illusion, but even those who detect the illusion cannot see through the illusion including the caster.\n** Illusions may be enormous, altering terrain and populating it with any number of creatures.\n** Illusions may cover real things, but cannot make them disappear.\n** Illusions may not do damage or take damage since they are not really there.\n** Note: unliving creatures cannot detect or be influenced by illusions.\n* Phantasms\n** Phantasmal objects appear real, but are only partially real and are destroyed with a single [Damage Token].\n** All [Phantasm]s are moved independently each time the unit Moves.  All [Phantasm]s perform the same actions as the unit but no effect. When [Phantasm]s are attacked they take effects normally but are uneffected by effects except [Damage] which immediately destroys them.",
        ":titles",
        "Illusionist",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Conjure Effigy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Conjure Effigy", ":summary", "* Create a phantasmal copy of an object touched. The Effigy appears real in most ways, but does not function as the original and will shatter to dust if force is applied to it."),
          "Conjure Phantasmal Force",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Conjure Phantasmal Force", ":summary", "Conjures a phantasmal minion."),
          "Conjure Phantom Monster",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Conjure Phantom Monster"),
          "Conjure Simulacrum",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Conjure Simulacrum"),
          "Dazzling Beauty",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dazzling Beauty", ":summary", "Raises the appearance of the caster."),
          "Disembodied Voice",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Disembodied Voice"),
          ":Forgetfulness",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Forgetfulness", ":summary", "* Roll vs. Spirit. Target forgets a specific fact or time period."),
          ":Foxfire",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Foxfire"),
          "Hidden Thing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hidden Thing", ":summary", "* A Phantasm may be placed on other objects making them partially or completely invisible."),
          "Hypnotic Eyes",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hypnotic Eyes", ":summary", "Criticals: [Fascination]"),
          "Illusion Shattered",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Illusion Shattered", ":reference", "* Raiden Shogun, Genshin Impact"),
          "Illusionary Image",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Illusionay Image", ":summary", "A permanent realistic image. Skill determines size and realism. Advanced versions are 3D or moving."),
          "Illusionary Meal",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Illusionary Meal", ":summary", "* Creates a tasty meal out of other less appetizing things. The meal appears and tastes anyway the user wishes. The meal serves level squared human sized persons. The original ingredients may be unpleasant but cannot be harmful."),
          "Illusionary Wall",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Illusionary Wall", ":summary", "* Appears to be a real wall of any sort including magical ones, but has no real effect except to obscure or block line of sight."),
          "Mental Block",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mental Block", ":summary", "* Roll vs. Spirit. Target becomes confused and forgets how to a chosen power for Hits Turns."),
          ":Mirage",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mirage", ":summary", "Also known as Illusionary Terrain."),
          "Mirror of the Soul",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mirror of the Soul", ":summary", "* A person's true nature can be ascertained by looking in his or her eyes."),
          "Mirror Image",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mirror Image", ":summary", "* [Mind]: Replace the unit with a [Phantasm] and place 1+Criticals additional [Phantasm]s 1 space from the unit.  Secretly mark one of these [Phantasm]s as the unit. When all other Mirror Images are destroyed, replace the final [Phantasm] with the unit."),
          "Mistaken Identity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mistaken Identity", ":summary", "* [Action]: Choose a willing unit of roughly equal size and switch places with that unit.\n* Range: [Mind]"),
          "Phantom Pain",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Phantom Pain"),
          "Phantom Smell",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Phantom Smell"),
          "Phantom Sound",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Phantom Sound"),
          "Phantom Weapon",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Phantom Weapon"),
          "Shattered Image",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Shattered Image", ":summary", "* [Mind]: Destroy any number of [Illusion]s to cause [Stun] and [Confusion] to targets in the area.", ":titles", "Broken Mirror"),
          "Shimmer",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Shimmer"),
          "Simulacrum",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Simulacrum"),
          "Sleight of Mind",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Sleight of Mind"),
          "Smoke and Mirrors",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Smoke and Mirrors"),
          "Taste of Ambrosia",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Taste of Ambrosia"),
          "Taste of Ashes",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Taste of Ashes"),
          ":Vertigo",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vertigo")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Intuition",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Danger Sense",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Danger Sense", ":summary", "* [Event]: Chance to detect a surprise attack."),
          "Deja Vu",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Deja Vu", ":summary", "* [Event]: Chance to recognize a series of events as if they had happened before. This gives insight into how these events might play out."),
          ":Insight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Insight", ":summary", "* [Action]: Synergy with a [Mind] ability."),
          "Instinctive Defense",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Instinctive Defense", ":summary", "* [Passive]: Synergy with Defense Rolls."),
          "Paranormal Memory",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paranormal Memory", ":summary", "* [Action]: Attempt to remember events that happened in an alternate timeline or universe."),
          ":Psychometry",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Psychometry", ":summary", "Obtain information about an individual by making physical contact with an object that belongs to them.\n* [Action]: Attempt to remember events associated with an object.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Inertia",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Impact Absorption", "Inertial Dampening", "Unstoppable")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Invisibility",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Invisible", "Transparent", "Vanish")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Laboratory",
        ":summary",
        "* Special labs for analyzing information. Science labs are very flexible and can be used for any number of quick analytics. Obviously, they are severly limited compared to proper research facilities.\n* Like [Transform] When purchasing a Laboratory, create one or more Units to represent the labooratories. The Rating of the Laboratory is the total cost of the Units.",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Analyze Target",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Analyze Target"),
          "Chemical Lab",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Chemical Lab"),
          "Biological Lab",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Biological Lab"),
          "Geological Lab",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Geological Lab"),
          "Geological Scan",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Geological Scan"),
          "Medical Lab",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Medical Lab", ":titles", "Sick Bay"),
          "Physics Lab",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Physics Lab"),
          "Scan for Life",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Scan for Life"),
          "Scan for Weapons",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Scan for Weapons")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Life Support",
        ":titles",
        "Environment",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Acceleration Dampening",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Acceleration Dampening"),
          "Air Filtration",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Air Filtration"),
          "Artificial Gravity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Artificial Gravity"),
          "Ejection Systems",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ejection Systems"),
          "Food Production",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Food Production"),
          "Low Pressure Resistance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Low Pressure Resistance"),
          "High Pressure Resistance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "High Pressure Resistance"),
          "Radiation Shielding",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Radiation Shielding"),
          "Heat Resistance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Heat Resistance"),
          "Cold Resistance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cold Resistance"),
          "Storm Cellar",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Storm Cellar", ":summary", "* The crew will occupy the cellar when the sun kicks up a solar storm of radiation. As these can last for days, one had better include a few crew-days worth of food, water, and tranquilizers. If you are relying upon algae for your oxygen, it deserves space in the storm cellar as well. This probably also applies to stored food too. Particle radiation can destroy a lot of the vitamins in food. Alas, computers and other digital electronics are also vulnerable to radiation. If there is a critical failure outside, thenit is time to start drawing straws to decide who gets to heroically commit suicide by saving the ship."),
          "Water Filtration",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Water Filtration"),
          ":Watertight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Watertight")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Light",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Blinding Light",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blinding Light"),
          "Call Light",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Call Light"),
          "Control Light",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Control Light", ":summary", "* [Reaction]: Redirect a light effect to another target."),
          ":Flash",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Flash"),
          ":Glow",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Glow"),
          ":Laser",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Laser"),
          "Light Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Light Form"),
          "Project Image",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Project Image"),
          "Shine Down",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Shine Down", ":reference", "* Raiden Shogun, Genshin Impact"),
          "Solar Beam",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Solar Beam")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Longevity",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Eternal Youth", "Long Life", "Reanimation", "Reincarnation", "Reincarnation - Transference", "Suspended Animation", "True Immortality")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Lycanthropy",
        ":summary",
        "* Lycanthropy is an inherited trait that normally lies dormant. It seems to be triggered by near death experiences with other Lycanthropes.\n!Traits\n* Permanent - Lycanthropy is an inherited trait and cannot be 'cured'.\n* Rage - Lycanthropes are easily angered and are subject to berserk rages.\n** [Anytime]: When taunted or after taking 2 or more damage, the unit must roll Lycanthropy vs. Spirit, gaining [Berserk] Tokens for each Hit. If the unit has any [Berserk] Tokens it immediately takes a non human Lycanthropy form on its next [Action].\n** [Daily]: On the first nights of the waxing and waning Moons or on any night under a Full Moon, the unit must check for going berserk as if taunted.\n* [Tooth and Claw]\n** Requires: Must be in a non human form.\n** Passive\n** +1 Melee or Close Combat for each [Rage] Token.",
        ":stat",
        "Beast",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Animal Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Animal Form", ":summary", "* Action: Change to specific animal unit.\n** +1 Move, -2 Mind, +1 Spirit.\n** Clothes and Armor are destroyed or dropped.  All Equipment is dropped.\n** Gain [Natural Weaponry] and [Regeneration] Abilities.\n** Duration: Until sunrise."),
          "Primal Animal Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Primal Animal Form", ":reference", "American Werewolf in London"),
          "Beastman Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Beastman Form", ":reference", "Wolfman or Mr. Hyde.", ":summary", "* Action: Change to bestial humanoid unit.\n** +1 Body, -1 Mind.\n** Shirt and Armor is destroyed or dropped.\n** Gain [Regeneration] Ability.\n** Duration: Until sunrise."),
          "Crinos Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Crinos Form", ":reference", "The Howling", ":summary", "* Requires: [Animal Form], [Beastman Form]\n* Action: Change to specific Crinos unit.\n** +2 Body, -2 Mind, +1 Spirit.\n** Clothes and Armor are destroyed or dropped.\n** All Equipment not in hands is dropped.\n** Gain [Natural Weaponry], [Armor], and [Regeneration] Abilities.\n** Each [Bleeding] or [Damage] Token taken grants a [Rage] Token.\n** Each [Bleeding] Token inflicted grants a [Rage] Token.\n** Each adjacent Ally or Foe slain grants a [Rage] Token.\n** Remove a [Rage] Token instead of gaining a [Hold], [Control], [Morale], [Despair] or [Fear] Token.\n** If [Rage] Tokens exceed Spirit, then roll [Rage] vs [Will] or gain a [Berserk] Token.\n** Duration: Until sunrise."),
          "Human Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Human Form", ":summary", "* Action: Change back to human unit from other Lycanthropy form.\n* Duration: Indefinite"),
          "Mark Territory",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mark Territory", ":summary", "* By scenting an area, animals and supernatural beings will recognize the scent as a warning to stay away. Aggressive beings may be drawn to it."),
          "Mirror Walk",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mirror Walk", ":summary", "* Action: As a creature of spirit, Lycanthropes may enter the [Spirit Realm] merely by looking at their reflection in any surface."),
          "Spirit Claw",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Spirit Claw", ":summary", "* Allows unit to attack targets across the [Veil].")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Madness",
        ":titles",
        "Lunatic, Madman, Manic",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Delirium",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Delirium"),
          ":Delusions",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Delusions"),
          ":Dementia",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dementia"),
          "False Memories",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "False Memories", ":summary", "* Alter the memories of the target."),
          ":Hyteria",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hyteria"),
          "Induce Paranoia",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Induce Paranoia"),
          "Maze of the Mind",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Maze of the Mind", ":summary", "* Confuses the target's senses so it cannot accurately choose its direction. This can be extremely hazardous to fast moving units.\n* [Skill]: [Brilliance]\n* [Move]: Whenever the unit moves, its direction is randomized from among its normal movement options (including diving and climbing for air units)."),
          "Mind Twist",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mind Twist"),
          "Through the Looking Glass",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Through the Looking Glass", ":reference", "* I'm sorry to tell you this, but you've suffered a schizoid embolism. We can't snap you out of your fantasy... and I've been sent in to try to talk you down. - Total Recall"),
          ":Tripping",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tripping"),
          "Twisted Words",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Twisted Words", ":summary", "* This subtle power is a sort of malicious therapy, and it requires nothing more than casual conversation. Its influence is hidden by inflections and suggestions. The victim finds themselves increasing agitated as their inner demons bubble to the surface. This can lead to confusion, a panic attack, nervous breakdown or even a psychotic break."),
          "Warped Image",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Warped Image", ":summary", "* Share your own derangements with the target. This also rouses the Shadow."),
          "Wave of Madness",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wave of Madness")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Magnetism",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Control Magnetism",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Control Magnetism", ":summary", "* [Reaction]: Redirect a magnetic effect to another target."),
          "Magnetic Field",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Magnetic Field"),
          "Magnetic Pull",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Magnetic Pull"),
          ":Magnetize",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Magnetize"),
          "Magnetic Storm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Magnetic Storm")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Mental Combat",
        ":titles",
        "Psionic, Scanner",
        ":stat",
        "Mind",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Brain Drain", "Brain Freeze", "Brain Storm", "Ego Whip", "Feeblemind", "Feedback Loop", "Lobotomize", "Mental Blast", "Mental Prison", "Summon Id Monster", "Tabula Rasa")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Mental Connection",
        ":reference",
        "Scanners",
        ":titles",
        "Esper, Mentalist, Psionic, Scanner, Telepath",
        ":stat",
        "Mind",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Cloud Senses",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cloud Senses", ":reference", "These aren't the droids you're looking for... - Obi-Wan Kenobi, Star Wars", ":summary", "Reduce chance that target will notice things."),
          ":Confusion",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Confusion"),
          "Intellect Fortress",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Intellect Fortress"),
          ":Lingua-Franca",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Lingua-Franca", ":summary", "Synergy with [Linguistics]"),
          "Memory Lapse",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Memory Lapse"),
          "Memory Restoration",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Memory Restoration", ":summary", "* Retrieve lost memories from a subject."),
          "Mental Bond",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mental Bond"),
          "Mental Cloak",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mental Cloak", ":summary", "All living units must roll Mind vs Mental Cloak to target this unit.  Another target may not be chosen."),
          "Mental Grip",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mental Grip"),
          "Mental Gymnastics",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mental Gymnastics"),
          "Mental Probe",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mental Probe", ":summary", "Delve deeper into targets memories each turn.", ":titles", "Mind Probe"),
          "Mental Projection",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mental Projection"),
          "Mind Reading",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mind Reading", ":summary", "Owner of target unit must announce the next Hits movements and actions that unit will perform.  That unit must perform those actions if it is able."),
          "Mind's Eye",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mind's Eye", ":summary", "* Eye - The caster can close his eyes and see into the astral world instead of the real world."),
          "Psionic Blade",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Psionic Blade"),
          "Psionic Knife",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Psionic Knife"),
          "Store Consciousness",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Store Consciousness", ":summary", "* [Action]: At the moment of another unit's death, capture its spirit within one's own mind.\n* [Action]: If the dead unit's body can somehow be restored (or a perfect duplicate can be found), transfer the captured spirit back into the body."),
          ":Telepathy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Telepathy", ":summary", "Unit owner may have up to a Hits minute secret conversation with anyone (Player or not, strategy or not). Clock starts once roll is made."),
          "Transfer Consciousness",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Transfer Consciousness", ":reference", "* Change Now! - Captain Jinyu, Dragonball Z", ":titles", "Body Swap")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Mental Fortitude",
        ":stat",
        "Mind, Spirit",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Gestalt",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Gestalt", ":reference", "The whole is greater than the sum of its parts - Gestalt Psychology", ":summary", "* This ability allows a unit to share knowledge with another unit that also has [Gestalt]. They may give information or loan an ability to the target.", ":titles", "Hive Mind"),
          "Intellect Fortress",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Intellect Fortress", ":summary", "Ward"),
          ":Concentration",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Concentration", ":summary", "* [Buff Self]: Place X Concentration Tokens on the user, and place 1 negative token under each Concentration token. Covered tokens are treated as if they do not exist while covered."),
          "Mirror Mind",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mirror Mind", ":summary", "Mental defense that creates Feedback."),
          "Peace of Mind",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Peace of Mind", ":summary", "Find the Quiet Place in your mind"),
          "Tower of Iron Will",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tower of Iron Will", ":summary", "Ward")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Mind Over Matter",
        ":titles",
        "Telekinesis, Psychokinesis",
        ":stat",
        "Mind",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Invisible Hand",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Invisible Hand", ":summary", "* Lift items from a distance."),
          ":Levitate",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Levitate", ":summary", "* Lift oneself off the ground."),
          "Mind Crush",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mind Crush", ":summary", "* Hold an object in place and crush it."),
          "Telekinetic Manipulation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Telekinetic Manipulation", ":summary", "* Perform delicate manipulation on items from a distance. An example would be to perform lock picking over distance."),
          "Telekinetic Projectile",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Telekinetic Projectile", ":summary", "* Throw a small object at high speed."),
          "Telekinetic Push",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Telekinetic Push", ":summary", "* Push items from a distance."),
          "Telekinetic Shield",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Telekinetic Shield"),
          "Telekinetic Strike",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Telekinetic Strike", ":summary", "* Attack unit from a distance."),
          "Telekinetic Touch",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Telekinetic Touch", ":summary", "* Feel items from a distance.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Movement",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Wall Crawling", "Wall Running", "Water Walking", "Water Running")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Movement: Ground",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "2-Legged", "3-Legged", "4-Legged", "6-Legged", "8-Legged", "Hover", "Jump Jets", "Off Roading", "Snowcraft", "Tracked", "Turbo Booster", "Wheeled")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Movement: Interstellar",
        ":reference",
        "* I created the Event Horizon to reach the stars, but she's gone much, much farther than that. She tore a hole in our universe, a gateway to another dimension. A dimension of pure chaos. Pure... evil. When she crossed over, she was just a ship. But when she came back... she was alive! - Dr. Weir, Event Horizon",
        ":summary",
        "* Jump Drives generate energy pulses in the ship's drive to create ripples in the fabric of space.  Each pulse must be precisely timed to the apex of each ripple to create an increasing harmonic wave (the 'Wave Motion' effect). Eventually, the energy of the occillation becomes too great, a tear in space is produced, and the starship falls in.",
        ":titles",
        "Gate Drive, Stargate, Wave Motion Engine, Wormhole",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Hyperdrive", "Strategic Warp Jump", "Tactical Warp Jump")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Movement: Space",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Chemical Rockets",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Chemical Rockets"),
          "Impulse Drive",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Impulse Drive", ":summary", "* The Impulse Drive is a drive system based upon the concept that repeated energy releases at the same harmonic frequency will cause small ripples in the fabric of space.\n* By rhythmic repetition, the Drive can cause an action/reaction effect against the fabric of space itself, therefore no longer needing reaction mass to travel large distances.\n* Further, the ripples in space cause space itself to slightly change orientation on each wave. Anything crossing a wave will suffer minor disruption. Light, lasers, radio waves, radiation, and relativistic particles are increasingly scattered as they strike each wave effectively dispersing them.\n\n* This spatial effect has a number of implications on space travel:\n* High energy radiation becomes unfocused effectively creating radiation shielding proportionate to the distance from the source.\n* Energy weapons, relativistic particle weapons, and railguns become unfocused and scattered effectively increasing the armor of the vessel proportionate to the distance of the weapon.\n* At long distances, the energy detected by radar and other detection devices (even telescopes) become diffused. This effectively provides the vessel with increased stealth proportionate to the distance of the detector.\n* At closer distances, microcircuitry becomes prone to failure and damage. This makes computer chips, the foundation of modern computer science, next to useless. Therefore, computer systems must be turned off when the wave drive is active. Piloting, weaponry, and navigation must therefore be performed manually with limited automation.", ":titles", "Impulse, Ripple Drive, Wave Drive"),
          "Ion Drive",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ion Drive"),
          "Nuclear Rockets",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Nuclear Rockets"),
          "Reaction Mass",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Reaction Mass"),
          "Subspace Drive",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Subspace Drive", ":reference", "* Comet Empire Subspace Attack Submarine", ":summary", "* By creating a minor fold in space, a unit may drop almost completely out of normal space while maintaining a small window through which it may still interact with normal space."),
          "Torch Drive",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Torch Drive", ":summary", "* This drive creates a tight gravity well around the ship dropping it partially out of normal space. Because the ship is no longer in normal space, it does not actually move. What does move is the interface between normal space and the ship. Speed and direction are adjusted by controlling the depth and shape of the field.\n* There are a number of distinct advantages to this drive system. Because the ship in not moving, it is not subject to inertia or problems incurred at relativistic speeds.\n* Combat with the Torch drive is unique for several reasons. The occupants are not subject to the enormous stress of maneuvering at relativistic speeds. Conventional weapons have greatly reduced effect because only damage that crosses the interface has any effect on the ship.\n* Weaknesses - The Torch drive must also maintain a protective gravity bubble to defend against its own gravity well. Weapons designed to disrupt the Torch drive have a strong effect by making the ship more vulnerable to damage, by reducing its speed, by subjecting it to increased stress from travelling at relativistic speeds, and by exposing it to its own gravity well.", ":titles", "TISA, Trans-Gravitic, Interphased, Sub-Light Anamoly Drive"),
          "Rocket Booster",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Rocket Booster", ":titles", "Boost, Turbo Booster"),
          "Vernier Thruster",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vernier Thruster", ":titles", "Apogee Motor")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Movement: Water",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Hydrofoil",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hydrofoil"),
          ":Sailed",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sailed", ":image", "Maps/Windsock.png", ":reference", "Estimated 18ft Skiff speeds at 20mph winds:\n0 (180deg), 16mph (150deg), 26mph (120deg), 31mph (90deg), 32mph (60deg), 27mph (30deg), 19mph (0deg)\n\nEstimated ice yacht speeds at 30mph winds:\n0 (180deg), 95mph (150deg), 144mph (120deg), 165mph (90deg), 155mph (60deg), 115mph (30deg), 30mph (0deg)", ":summary", "* Wind direction has an effect on all vehicles but it is most pronounced on sailing vessels.\n* [Setup] - Point Windsock in direction of the wind.  If wind direction is not already determined, roll a die to randomize the wind direction.\n* [Move] - [-1 Speed] when starting the turn against the wind at an angle.\n* [Move] - [-2 Speed] when starting the turn directly against the wind.\n\n* Sailing speed is based on Wind speed, direction, angle of motion and vesselsize.\n* Same direction as wind (Running Downwind): Max Speed = Wind Speed\n* 30 degrees off direction (Broad Reach): Max Speed = Wind Speed * 1.3 (* 4 on ice)\n* 60 degrees off direction (Broad Reach): Max Speed = Wind Speed * 1.5 (* 5 on ice)\n* 90 degrees off direction (Beam Reach): Max Speed = Wind Speed * 1.4  (* 5.5 on ice)\n* 120 degrees off direction (Close Reach): Max Speed = Wind Speed * 1.2 (* 4.8 on ice)\n* 150 degrees off direction (Close Hauled): Max Speed = Wind Speed * .7 (* 4 on ice)\n* 180 degrees (Head To Wind or In Irons): Max Speed = 0\n\n* Over distance, sailboats average speed over distance is further limited by their length at waterline:\n* This is estimated to be about 1.34 x the square root of the waterline length.\n* For a 144 ft sailboat at the waterline, the square root is 12, and the boat will probably not exceed 12 x 1.34, or about 16 knots/18mph/30kph.\n* A 100 footer should do 13.4 knots/15mph/25kph.\n* A 30 footer should do 7.34 knots/8mph/13kph.\n* A 16 footer should do 5.36 knots/6mph/10kph."),
          ":Submersible",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Submersible")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Natural Weaponry",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Autotomy", "Bite", "Bull Rush", "Burrowing", "Claw", "Claw Rake", "Constrict", "Death Roll", "Feather Blades", "Feather Knives", "Horns", "Jaw Lock", "Jaws of Death", "Neck Bite", "Overwhelm", "Pounce", "Quill Attack", "Ripping Bite", "Savage Genitalia", "Spines", "Sting", "Swallow Whole", "Tail Sweep", "Tongue Lash", "Trample", "Tusk Gore")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Phasing",
        ":titles",
        "Intangibility",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_abilitylist(
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dematerialize"),
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dematerialize Other"),
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Phase Jump", ":summary", "* The ability to move without travelling through the intervening space.\n* [Action]: Instantly move to any empty space up to 1/3 speed away without passing through any intervening spaces."),
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Phase Walk", ":summary", "* The ability to move through solid matter.\n* [Action]: Move at half speed ignoring terrain penalties or other objects. While Phase Walking, the user takes no physical damage (unless it is magical). If the move ends in a solid object, the user is still considered to be Phase Walking unitl it no longer ends it turn on a solid object. No attacks can be made this turn.")
        )
      ),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Power Copy"),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Power Disruption"),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Power Drain"),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Power Feedback"),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Power Fluctuation"),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Power Reflection"),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Power Theft"),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Power Vampire"),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Presence",
        ":abilitymap",
        vx_core.f_new({"any-1": nx_tactics_base.t_abilitymap}, tactics, "Charm of Virgo", "Desire")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Psychic Power",
        ":summary",
        "* This skill is used when manifesting and controlling a [Power] that directly affect the [Will] of targets.\n* Psychic Powers must have range and see or 'know' the target.",
        ":titles",
        "Psychic Combat, Psychological Warfare, Soul Combat, Spirit Combat, Test of Will",
        ":stat",
        "Will",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Ego Whip", "Psychic Duel", "Psychic Knife", "Tower of Iron Will")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Netrunning",
        ":reference",
        "* Do not try and bend the spoon. That's impossible. Instead, only try to realize the truth. What truth? There is no spoon. There is no spoon? Then you will see that it is not the spoon that bends. It is only yourself. - The Matrix\n* You must let it all go... Fear... Doubt... Disbelief. Free Your Mind. - Morpheus, The Matrix",
        ":summary",
        "* By directly connecting the brain to a computer program, the user can greatly increase his reaction time and resourcefulness while travelling in cyberspace.\n* Netrunners - Outlaw computer jocks or hackers.\n* SysOps - Corporate or government computer system defenders.\n* ICE - Intrusion Countermeasures Electronics. Guardian software designed to thwart hackers and intrusion programs.\n* Black ICE - ICE programs designed to trap and harm the hackers or software it is defending against. This can range from induced system failures, data loss, or dangerous electric feedback. Numerous safeguards exist against such dangerous software, but Black ICE attempts to lure the user into believing that by lowering these safeguards that he will have the opportunity to steal information. Often to make this lure credible, actual information must be put at risk.\n* ICE Breker - Software designed to counter ICE.\n* Avatar - The digital representation of those in the NET.",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Code Breaker Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Code Breaker Program", ":summary", "* Attempts to fool a [Gateway Program] that you are a legitimate user."),
          "Crash Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Crash Program"),
          "Denial Of Service Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Denial Of Service Program", ":summary", "* Attempts to overwhelm the target program with millions of requests, thereby preventing legitimate users from accessing it until it can catch up with all of the requests.", ":titles", "DOS"),
          "Feedback Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Feedback Program"),
          "Flatline Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Flatline Program"),
          "Freeze Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Freeze Program", ":summary", "* Attempts to alter the target program's internal clock, thereby slowing it or causing it to become non-responsive for a short about of time."),
          "Jackhammer Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Jackhammer Program", ":summary", "* Attempts to damage a [Firewall Program]. Such blatant attempts immediately raise alarms and are often a tool of last resort."),
          "Phishing Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Phishing Program", ":titles", "Password Research Program"),
          "Speedtrap Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Speedtrap Program"),
          "Stealth Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Stealth Program"),
          "Succubus Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Succubus Program"),
          "Task Killer Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Task Killer Program"),
          "Tracer Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tracer Program", ":titles", "Bloodhound"),
          "Trojan Horse Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Trojan Horse Program"),
          "Worm Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Worm Program"),
          "Camera Control Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Camera Control Program"),
          "Communications Uplink Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Communications Uplink Program"),
          "Elevator Control Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Elevator Control Program"),
          "Engine Control Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Engine Control Program"),
          "Factory Control Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Factory Control Program"),
          "Lock Control Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Lock Control Program"),
          "Navigation Control Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Navigation Control Program"),
          "Printer Control Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Printer Control Program"),
          "Telecom Control Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Telecom Control Program"),
          "Vehicle Control Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vehicle Control Program"),
          ":Firewall",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Firewall"),
          "Gateway Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Gateway Program", ":titles", "Login Screen, Padlock"),
          "Guardian Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Guardian Program", ":titles", "Doberman"),
          "Intrusion Detection System",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Intrusion Detection System", ":titles", "Alarm, Watchdog"),
          "Worm Consumer Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Worm Consumer Program", ":titles", "Aardvark, Robin"),
          "Daemon Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Daemon Program"),
          "Database Search Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Database Search Program"),
          "Decryption Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Decryption Program"),
          "Encryption Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Encryption Program"),
          "Filelocker Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Filelocker Program"),
          "Unerase Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Unerase Program"),
          "Adware Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Adware Program"),
          "Eraser Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Eraser Program"),
          "Malware Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Malware Program"),
          "Memory Cosumer Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Memory Cosumer Program"),
          "Metamorphic Virus",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Metamorphic Virus"),
          "Polymorphic Virus",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Polymorphic Virus"),
          "Spyware Program",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Spyware Program"),
          "Program: Zombie",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Program: Zombie")
        ),
        ":specialtymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_specialtymap},
          "Attack Programs",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Attack Programs"),
          "Control Programs",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Control Programs"),
          "Protection Programs",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Protection Programs", ":titles", "ICE"),
          ":Utilities",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Utilities"),
          ":Viruses",
          vx_core.f_new({"any-1": nx_tactics_base.t_specialty}, ":name", "Viruses")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Quickness",
        ":titles",
        "Celerity, Hyperspeed, Quickening, High Speed",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "After Image",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "After Image", ":reference", "* Dragon Ball\n* Phantom Miria - Claymore", ":summary", "* [Evade]: Instantly make a Move without triggering Opportunity Attacks."),
          "Fast Actions",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fast Actions", ":summary", "* Time to complete time consuming actions is dramatically reduced."),
          "Hyper Punch",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hyper Punch", ":summary", "* Action: Perform a basic [Attack] on a single target. If the attack succeeds, roll additional damage dice up to level."),
          "Hyper Running",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hyper Running"),
          "Hyper Swimming",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hyper Swimming"),
          "Hyper Storm",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hyper Storm", ":summary", "Action: Use a Move and perform a basic [Attack] up to 1 target per level on each target along your path. If the attack succeeds, roll additional damage dice up to level.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Radiation",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Fallout",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fallout"),
          "Radiation Beam",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Radiation Beam"),
          "Radiation Blast",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Radiation Blast")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Reality Warping",
        ":reference",
        "* Franklin Richards",
        ":summary",
        "* Perhaps equal to Time Travel as the most powerful of all abilities. By altering reality, seemingly nothing is beyond possibility.",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Closed Universe",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Closed Universe", ":reference", "* M.C. Escher, Relativity\n* Land of the Lost", ":summary", "* Exits from a location loop back upon themselves to leave a person back where they started.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Bonds",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Entanglement", "Line Swinging")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Senses",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "360 Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "360 Vision"),
          "Blood Scent",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blood Scent"),
          "Cosmic Awareness",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cosmic Awareness", ":reference", "Captain Marvel, Gundam New Types"),
          "Death Sense",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Death Sense"),
          "Electromagnetic Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Electromagnetic Vision", ":summary", "See into radio and radiation band of electromagnetic spectrum"),
          "Enhanced Hearing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Enhanced Hearing"),
          "Enhanced Smell",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Enhanced Smell"),
          "Enhanced Taste",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Enhanced Taste"),
          "Enhanced Touch",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Enhanced Touch"),
          "Microscopic Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Microscopic Vision"),
          "Motion Detection",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Motion Detection"),
          "Night Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Night Vision", ":titles", "Light Intensifying"),
          "Radar Sense",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Radar Sense"),
          "Radio Sense",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Radio Sense", ":summary", "* May hear radio, television, shortwave, and even cellular telephone communications when concentrating."),
          ":Sonar",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sonar", ":titles", "Echo Location"),
          "Telescopic Hearing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Telescopic Hearing"),
          "Telescopic Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Telescopic Vision"),
          "Thermal Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Thermal Vision"),
          "Tracking Sense",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tracking Sense"),
          "Ultrasonic/Subsonic Hearing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ultrasonic/Subsonic Hearing", ":summary", "* Hear ultra high or low pitched sounds. Subsonic sounds can travel extreme distances and are some of the communication systems used by whales and elephants."),
          "Ultraviolet Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ultraviolet Vision"),
          "X-Ray Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "X-Ray Vision", ":reference", "* Superman: Bruce Wayne? Batman: You peeked. - Superman and Batman, Superman: The Animated Series", ":summary", "* See through solid objects. The higher the density the blurrier the vision.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Shape Shift",
        ":titles",
        "Shapeshifter",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Imitation: Physical",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Imitation: Physical", ":reference", "* So, how do we know who's human? If I was an imitation, a perfect imitation, how would you know it was really me? - Childs, The Thing")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Shielding",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Point Defense", "Shield Modulation", "Shield Redirection", "Shielding: Magical")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Size",
        ":reference",
        "* So many tinyies - Tarkaz the Tribeless, Runeterra",
        ":summary",
        "* Grow or Shrink. This change does not change your Mass. Combine with [Density] to actually change [Body] stat.",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Big",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Big", ":summary", "* You are permenantly larger and heavier."),
          ":Growth",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Growth"),
          ":Shrinking",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Shrinking"),
          ":Big",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Small", ":summary", "* You are permenantly smaller and lighter.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Sound",
        ":summary",
        "* Sonic attacks are a form of vibration/explosive attack that generaly does [Concussive Damage]. They also can cause temporary or permanent deafness.",
        ":titles",
        "Sonic",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Mimicry",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mimicry", ":summary", "* Exactly duplicate sounds you have just heard or committed to memory.  At high levels, even modem communication can be duplicated."),
          "Sonic Wave",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sonic Wave"),
          "Sound Carries",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sound Carries")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Spawning",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Copy Other",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Copy Other", ":summary", "Split target into 2 copies, each with -1 on all abilities."),
          "Copy Self",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Copy Self", ":summary", "Split yourself into 2 copies, each with -1 on all abilities."),
          "Detach Body Parts",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Detach Body Parts"),
          ":Offspring",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Offspring", ":reference", "* A Cell gets out, and it will IMITATE EVERYTHING on the face of the EARTH! AND NOTHING CAN STOP IT! - Blair, The Thing")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Special Ability",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Cannibal", "Chaotic", "Corrupted", "Ethereal", "Feeding Frenzy", "Giant", "Huge", "Lernaean Poison", "Mindless", "Monstrous", "Nemean Invulnerability", "Prey", "Rapid Metabolism", "Savage", "Skeletal", "Soulless", "Tainted", "Undead", "Zombified")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Strength",
        ":reference",
        "* Technique is for lightweights. - Sett, Runeterra",
        ":stat",
        "Body",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Power Leap", "Power Lift", "Power Strike", "Power Throw", "Shockwave", "Thunderclap")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Teleportation",
        ":titles",
        "Instant Transmission, Teleporter, Transporter",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Teleport Away",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Teleport Away", ":summary", "* Teleport an object/objects to a precisely known location.\n* Level determines size of object/objects and distance.\n* Tricks: Teleporting mines, bombs, fighters, drill missiles.", ":titles", "Smite"),
          "Teleport Self",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Teleport Self"),
          "Teleport Toward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Teleport Toward", ":reference", "Beam me up Scotty", ":summary", "* Teleport an object/objects that you know the exact location of to your location.\n* Level determines size of object/objects and distance.")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Time",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Age Alteration",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Age Alteration"),
          "Freeze Time",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Freeze Time"),
          ":Postcognition",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Postcognition"),
          ":Precognition",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Precognition"),
          "Redirect Time",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Redirect Time", ":summary", "* [Reaction]: Redirect a time effect to another target."),
          "Slow Time",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Slow Time"),
          "Time Lapse",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Time Lapse"),
          "Time Stop",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Time Stop", ":summary", "* Ability to briefly exit the normal timestream. This effectively freezes time for a few seconds. The user is can move freely, but nothing but air can be moved or harmed. Note that doors cannot be opened and air is thick to move through or breathe.", ":titles", "Freeze Time, Time Slip")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Time Travel",
        ":image",
        "Units/SpaceAndTime/Vortex.jpg",
        ":summary",
        "* The Vortex is a point of null space-time. It is a tunnel through which one can escape the bounds of space-time.\n* Here time and distance have no meaning. Travelers through the Vortex have no sense of their own body, but have a strong sense that they have been in the Vortex forever. Some suggest that this may actually be true.\n* Entering the Vortex is like dying. Leaving is like being born. Some suggest that this birth and death cycle is the reason why only living things may be brought through the Vortex.",
        ":titles",
        "Chronos, Eye of Harmony, Yog-Sothoth",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Reverse Time",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Reverse Time", ":summary", "* Rewind recent events within the surrounding area and possibly choose a different [Action]."),
          ":Rewind",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Rewind"),
          "Temporal Tracking",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Temporal Tracking", ":summary", "* Ability to track a time traveler to his/her destination."),
          "Time Loop",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Time Loop"),
          "Time Shift",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Time Shift"),
          "Travel to the Future",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Travel to the Future"),
          "Travel to the Past",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Travel to the Past")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Toughness",
        ":titles",
        "Fortitude, Resistence",
        ":stat",
        "Body",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          ":Resilience",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resilience"),
          "Resist Acid",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Acid"),
          "Resist Cold",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Cold"),
          "Resist Disease",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Disease"),
          "Resist Electricity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Electricity"),
          "Resist Exposure",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Exposure"),
          "Resist Fire",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Fire", ":summary", "[Reduce Damage]: Reduce [Weapon Rating] by [Rating].\nNote: Not the same as Resist Heat"),
          "Resist Gravity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Gravity"),
          "Resist Heat",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Heat", ":summary", "[Reduce Damage]: Reduce [Weapon Rating] by [Rating].\nNote: Not the same as Resist Fire"),
          "Resist Hunger",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Hunger"),
          "Resist Poison",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Poison"),
          "Resist Pressure",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Pressure"),
          "Resist Radiation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Radiation"),
          "Resist Space",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Space"),
          "Resist Thirst",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Thirst"),
          "Resist Vacuum",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Vacuum"),
          "Resist Water",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Resist Water"),
          "Suspended Animation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Suspended Animation")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Toxins",
        ":reference",
        "* Say 'ah'. Some poisons can kill people in the thousands with that amount. Like botulinum toxin. It inhibits acetylcholine release, causing loss of muscle tone, lethary, .. dizziness .., visual impairment.., heavy eyelids, intense thirst, loss of speech, vomiting, diarrhea, stomach distention, breathing difficulty.. then.. respiratory failure. - A.K.I, Street Fighter 6",
        ":titles",
        "Poisonous, Venomous",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Blinding Spit", "Blinding Toxin", "Irritating Toxin", "Paralyzing Bite", "Paralyzing Spit", "Paralyzing Spray", "Paralyzing Sting", "Poison Bite", "Poison Blood", "Poison Spit", "Poison Spray", "Poison Sting", "Poison Touch", "Poisonous Flesh", "Poisonous Skin")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Transfiguration",
        ":summary",
        "* The ability to mold flesh.",
        ":titles",
        "Fleshcrafting, Fleshmolder, Vissisitude",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Blinding", "Body Morph", "Deafening", "Face Molding", "Face Off", "Malleate", "Sensory Deprivation", "Sensory Overload")
      ),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Transform", ":reference", "* The Transformers\n* Zeta Gundam\n* Robotech\n* Let me change into something a little more... Comfortable. - Elise, Runeterra", ":summary", "* Transform allows a unit to switch into a different form. Each form must be designnated at creation time, and each form must purchase its abilities sepearately. This is particularly useful for abilities that have penalties (e.g. High Mobility).\n* [Action]: Change into one of the Units.\n* This [Power] is similar to [Hanger] and [Combiner], but the Units are prechosen at creation and their [Cost] is included in the Transformer Unit Cost.\n* The Transform [Rating] must be high enough to hold all of the Units [Cost]."),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Transformation",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Change Clothing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Change Clothing"),
          "Gaseous Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Gaseous Form"),
          "Liquid Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Liquid Form"),
          "Matter Chameleon",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Matter Chameleon", ":reference", "Kevin from Ben 10", ":summary", "* Transform body into any material touched"),
          "Metal Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Metal Form", ":reference", "* Colossus - X-men\n* I'm bulletproof, nothing to lose...fire away, fire away...richochet, you take your aim... fire away, fire away...you shoot me down, but I won't fall...I am titanium - David Guetta, Titanium", ":summary", "* Transform body into any material touched"),
          "Plant Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Plant Form", ":reference", "* Swamp Thing, Man-Thing"),
          "Quick Change",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Quick Change")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Transmutation",
        ":summary",
        "* The ability to transform others.",
        ":titles",
        "Polymorpher, Reality Warper, Shaper, Transmuter",
        ":stat",
        "Mind",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "Molecular Alteration", "Petrification", "Polymorph")
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Vampirism",
        ":summary",
        "* Any unit with Vampirism is by definition a [Vampire].\n* [Deploy]: Start with [Vampire Blood] Tokens equal to Vampirisim.\n* Generations - When a Vampire is created, it automatically gains the Vampire Generation ability one less than the one who created them. A Vampire can only gain a lower Generation by [Diablerie].\n* Vitae - The blood\n* Hunger - Vampires are always hungry, unless they have recently killed.",
        ":stat",
        "Beast",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Vampire: 15th Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 15th Generation", ":titles", "Stray"),
          "Vampire: 14th Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 14th Generation", ":summary", "* The last generation is known as thin-blooded vampires and start with only basic Vampiric powers. During the Dark Ages the Thirteenth Generation was believed to be the last, but in the Final Nights this is comprised of the 14th and 15th Generations.", ":titles", "Thin Blood"),
          "Vampire: 13th Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 13th Generation"),
          "Vampire: 12th Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 12th Generation", ":summary", "* Although they lack the powers of the lower generations, the vampires of the 12th and 13th generations stand above men, capable of besting the strongest mortal knight in battle and wielding influence over barons, merchants and courts."),
          "Vampire: 11th Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 11th Generation"),
          "Vampire: 10th Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 10th Generation", ":summary", "* While they are comparatively young, most vampires created within the last few centuries belong to the tenth and eleventh generation."),
          "Vampire: 9th Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 9th Generation"),
          "Vampire: 8th Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 8th Generation", ":summary", "* Achieving a delicate balance between age and generation, these vampires are the most visible ones of the 14th century. They are nowhere near as old as most Cainites of lower generation, which places them in a delicate position. Most Cainites of eighth and ninth generation overcome this disadvantage by siring large covens of childer."),
          "Vampire: 7th Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 7th Generation"),
          "Vampire: 6th Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 6th Generation", ":summary", "* Many of the vampires of the sixth and seventh generation are the self-styled lords of Cainite society. Although they are not as powerful as the Methuselahs, these Cainites are still formidable opponents, who gladly sacrifice mystical and spiritual power for temporal influence. These Cainites rule over vast kingdoms, donning the crown of monarchs and commanding armies of younger Cainites and mortal thralls."),
          "Vampire: 5th Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 5th Generation", ":titles", "Methuselah"),
          "Vampire: 4th Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 4th Generation", ":summary", "* Methsuselahs are the most powerful modern Vampires that have been encountered. They are terrifyingly alien and powerful. It is hard to imagine the power of the lower Generations, given the strenght of the 4th Generation.", ":titles", "Methuselah"),
          "Vampire: 3rd Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 3rd Generation", ":summary", "* Thirteen ancient Vampires were thought to have survived past the great flood and to have started the existing clans. Presumably the Antediluvians are of such age and potency of blood that they possess nearly god-like power, and in fact some of them may be deities. Most believe these god-like beings to be either in torpor, manipulating the Jyhad, or dead. While some clans regard their progenitor favorably, as a whole the Antediluvians are often portrayed as boogeymen that will one day rise and devour their descendants in at time called Gehenna.", ":titles", "Antedeluvlain"),
          "Vampire: 2nd Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 2nd Generation", ":summary", "* It is said that there were three second generation Vampires: Enoch, the Wise (Caine's advisor), Irad, the Strong (Caine's general) and Zillah, the Beautiful (Caine's wife). They lived in the first city and presumably created the Antedeluvians, but nothing is known of them after their childer rose up against them in the final nights of the First City. Perhaps the Second Generation perished in the Deluge, or at the hands of their childer."),
          "Vampire: 1st Generation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vampire: 1st Generation", ":summary", "* Only Cain, the original Vampire, is 1st generation. After all this time, his abilities would be beyond imagination."),
          "Blood Bond",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blood Bond"),
          "Blood Sight",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blood Sight", ":summary", "* See blood through the skin.\n* With close observation, subtle blood characteristics can be detected including blood diseases, poisoning, or Diablerie"),
          "Consume Flesh",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Consume Flesh", ":summary", "* Consume the flesh of a grabbed unit. Gain a [Vampire Blood] token and target gains a [Damage] and a [Spirit Damage].\n* You may not gain more [Vampire Blood] than target has [Will], though you gain one more [Vampire Blood] if the target is slain by drinking its blood.\n* You may not have more [Vampire Blood] than [Vampirism].\n* You may not drink from the dead."),
          "Drink Blood",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Drink Blood", ":summary", "* Drink blood from a grabbed unit. Gain a [Vampire Blood] token and target gains a [Damage] and a [Spirit Damage].\n* You may not gain more [Vampire Blood] than target has [Will], though you gain one more [Vampire Blood] if the target is slain by drinking its blood.\n* You may not have more [Vampire Blood] than [Vampirism].\n* You may not drink from the dead.", ":titles", "The Kiss"),
          ":Embrace",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Embrace", ":reference", "* It was magical. The surrender. The exquisite suicide of giving in ... words cannot encompass that experience ... I asked him ... 'What gives you the right?' ... My question had struck no chord of mercy ... Rather, I believe he wanted me to become as he was and see for myself what gave him the right - what gives all of our kind the right.", ":summary", "* Sire - When a Vampire creates a another the creator is called its Sire."),
          ":Torpor",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Torpor", ":summary", "* If slain, but the body is not burned or the head severed, the vampire will not die but instead enter a deep sleep while his body slowly recovers.\n* It is said that very old Vampires may be sleeping for centuries in Torpor.")
        ),
        ":weaknessmap",
        nx_tactics_base.f_weaknessmap_from_weaknesslist(
          vx_core.f_new({"any-1": nx_tactics_base.t_weakness}, ":name", "Diablerie", ":summary", "* Diablerie is the act of a vampire drinking the blood of another vampire until it is destroyed. It is the ultimate symbol of the treachery innate in vampire society.\n* Diablerie is standard practice among the Sabbat and is strictly forbidden by the Carmarilla on pain of final death. Diablerie is one of the defining differences between the two sects.\n* Drinking blood from mortals is an ecstatic experience, the moment of death the climax. Drinking the eternal blood of vampires is that much more gratifying, with the moment of death a feeling like no other. Particularly corrupt vampires will commit diablerie simply for the pleasure.\n* This weakness is gained automatically when it is used successfully. Once gained, this ability forever marks the user and is clearly visible to those with can read auras.\n* [Requires]: Can only be used after a [Drink Blood] or [Consume Flesh] action on a vampire that drains the last of his blood.\n* [Automatic]: The vampire is destroyed and the [Diablerie] ability is gained. If the destroyed vampire has a higher level in [Vampirism], then the acting vampire immediately gains one level in [Vampirism]."),
          vx_core.f_new({"any-1": nx_tactics_base.t_weakness}, ":name", "Rarified Tastes", ":titles", "Blood Connoisseur", ":summary", "* As Vampires age, their taste for blood becomes increasingly refined and they can no longer tolerate 'common' blood. Very old Vampires have exceedingly exotic tastes.")
        )
      ),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Vibration", ":titles", "Tremors"),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Water",
        ":reference",
        "* Davy Jones Locker\n* The power of water is its ability to change shape. - Genshin Impact",
        ":summary",
        "* Adaptable, Adjustable, Easy-going, Empathic, Flexible, Fluid, Patient, Serene, Versatile, Wrathful\n* Water is the element of change. Water elementalists must be adaptable, fluid, and flexible in their attitude (though not arbitrary). They are generally patient and empathetic, but they are also known for the intensity of their wrath. Their flexiblitity is often reflected in their sexuality.\n* Symbol - Blue Teardop\n* Water is the source of life and after Air it is the thing that we need most urgently to survive. Pure, unspoiled water can bestow many amazing benefits and has been the rise and fall of many empires. Of course, water can also be the source of a quick death.\n* Though Water washes away impurities, it does so by taking them unto itself and Water always remembers.",
        ":titles",
        "Aquamancer, Hydromancer, Wave Rider",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Call Water",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Call Water", ":titles", "Flashflood"),
          "Control Water",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Control Water", ":summary", "* [Reaction]: Redirect a water effect to another target."),
          "Extinguish",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Extinguish"),
          "Fountain of Youth",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Fountain of Youth"),
          "Liquify",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Liquify", ":summary", "* Any solid becomes a liquid."),
          "Part Water",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Part Water"),
          "Purify Water",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Purify Water"),
          "Ride the Wave",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ride the Wave", ":summary", "* Slide on water"),
          "Scrying Pool",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Scrying Pool", ":summary", "* Look at your reflection in any pool of water, drop something in, and when the ripples recede you may see the current reflection from any other body of water that you have seen your reflection in."),
          "Summon Current",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Summon Current", ":summary", "* Summons a small living water flow in moving water. Water elementals love nothing more than pushing things around."),
          "Summon Undine",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Summon Undine"),
          "Tides",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tides", ":summary", "* Raise or lower water level."),
          "Tsunami",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tsunami"),
          "Undertow",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Undertow", ":summary", "* Creates a strong downward current that can suck things downward."),
          "Wall of Water",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wall of Water", ":summary", "* [Effect]: [Wall] of Water\n* [Requires]: May only be cast in water.\n* [Anytime]: Turbulence strikes any surface or underwater unit that crosses it."),
          "Water Weapon",
          nx_tactics_base.f_ability_from_tactics_key(tactics, "Water Weapon"),
          "Water Breathing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Water Breathing"),
          "Water Form",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Water Form", ":summary", "* [Requires]: Douse body in at least a bucket of water.\n* [Continuous]: May make [Strike] and [Grab] Water Close Combat attacks at Level. Gain attributes of Water as well as [Water Breathing] and [Walk on Water]. [Pierce Resistance], [Slash Resisteance], [Fire Resistance], [Impact Vulnerable], [Heat Vulnerable], [Electric Vulnerable].", ":titles", "Liquifiy"),
          "Water Spout",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Water Spout"),
          "Water Walk",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Water Walk", ":summary", "* Move on or under water as if it were solid ground of any desired slope."),
          "Waters of Life",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Waters of Life"),
          "Watery Grave",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Watery Grave"),
          ":Wave",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wave", ":summary", "Intensifies existing waves or creates new waves."),
          "Wave Ride",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wave Ride"),
          "Whirlpool",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Whirlpool"),
          "Wishing Well",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wishing Well")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Weakness: Cursed",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Dark Fate",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Dark Fate"),
          "Haunted",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Haunted")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Weakness: Mental",
        ":summary",
        "* Note: Mental Weaknesses may be physical in nature, but they are grouped here because they effect mental function.",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Addiction",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Addiction"),
          "Addle Minded",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Addle Minded", ":titles", "Absent Minded, Addle Minded, Airhead", ":summary", "* Tendency to forget to do things or misplace things.  The missed things may be trival, important, or critical."),
          "Alien Thoughts",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Alien Thoughts"),
          "Amnesia",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Amnesia", ":reference", "* Memento", ":summary", "* Unit has strange lapses of memory. It may forget generally known facts, friends, family, or own identity."),
          "Anxious",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Anxious"),
          "Bipolar",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Bipolar", ":summary", "* Prone to fits of erratic up moods and severe depression. May be moody, lie around and mope, risk life and limb, or even suicidal.", ":titles", "Manic Depressive"),
          "Blind Hatred",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blind Hatred"),
          "Bloodthirsty",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Bloodthirsty", ":summary", "* Must attack Bleeding Enemies first. May attack Bleeding Allies if a Spirit roll fails."),
          "Brainwashed",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Brainwashed"),
          "Catatonia",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Catatonia"),
          "Compulsive Liar",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Compulsive Liar"),
          "Cleptomania",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cleptomania"),
          "Cyberpsychosis",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cyberpsychosis", ":reference", "* Something happens when you start to add metal and plastic to people. They start to change. And it isn't pretty - Cyberpunk RPG", ":summary", "* A psychotic aberration suffered by excessive users of cyberware. It begins as a sense of loss for the portions of the body replaced with unfeeling machinery. Later it manifests as a Overconfidence and detachment from other people (sometimes in favor of machines). Extreme cases lead to more serious derangements such as: Martyr Syndrome, Megalomania, Delusions of Grandear, Inferiority Complex, and Messiah Complex."),
          "Delusional",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Delusional", ":reference", "* The walls of reality will come crashing down. One minute you'll be the savior of the rebel cause.  The next thing you know you'll be Cohagen's busom buddy. You'll even have fantasies of alien civilizations, as you requested, but in the end, back on Earth, you'll be lobotomized! - Dr. Edgemar, Total Recall", ":titles", "Free-form Delusion, Schizoid Embelism", ":summary", "* Believe things that are not real.  May hear voices or see things."),
          "Flashbacks",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Flashbacks"),
          "Frightened",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Frightened", ":summary", "* Lacks nerve, especially in combat.  May freeze or flee.", ":titles", "Cowardly"),
          "Hallucinations",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hallucinations"),
          "Homicidal",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Homicidal"),
          "Inferiority Complex",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Inferiority Complex"),
          "Intolerant",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Intolerant"),
          "Manic",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Manic"),
          "Martyr Syndrome",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Martyr Syndrome"),
          "Masochism",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Masochism", ":summary", "* Dislikes self. Will go out of way to injure oneself. May seek verbal, physical, psychological, or sexual abuse. May seek life threatening abuse."),
          "Megalomania",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Megalomania", ":titles", "Delusions of Grandeur, Messiah Complex", ":summary", "* A specific form of delusion that you are more important than you are. May believe you are destined for greatness, a Messiah, or even God."),
          "Mental Decay",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mental Decay", ":titles", "Alzheimers"),
          "Multiple Personalities",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Multiple Personalities", ":reference", "Sybil", ":summary", "* More than one distinct personality. Personalities may change under stress or randomly.  Personalities may like, dislike, or be oblivious to each other. Some may be dangerous to self or others."),
          "Narssicist",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Narssicist"),
          "Nightmares",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Nightmares"),
          "Obsessed",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Obsessed", ":summary", "* Focused on a single person or object and will talk about it all the time. May risk embarrassment, financial loss, or bodily harm to pursue it."),
          "Obsessive Compulsive",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Obsessive Compulsive", ":titles", "OCD", ":summary", "* Compulsively performs trivial activities."),
          "Overcompensating",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Overcompensating", ":summary", "* Constantly attempt to draw attention away from preceived flaw."),
          "Overconfidence",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Overconfidence"),
          "Paranoia",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paranoia", ":reference", "Just because you're paranoid doesn't mean they aren't after you. - Catch 22", ":summary", "* Belief that enemies are everywhere. May rant endlessly about the conspiracy, compulsively work on defenses, risk everything to stop them."),
          "Phobia",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Phobia", ":summary", "* Unreasoning fear of some common thing. Fear of dogs, heights, sounds, or colors. May feel discomfort, paralyzing fear, beserk fear, or catatonia."),
          "Post Traumatic Stress Disorder",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Post Traumatic Stress Disorder"),
          "Pyromania",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Pyromania"),
          "Robophobia",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Robophobia", ":reference", "* Uncanny Valley - The theory that as a robot is made more humanlike in its appearance and motion, the emotional response from a human being to the robot will become increasingly positive, until a point is reached beyond which the response quickly becomes that of strong revulsion. However, as the appearance and motion continue to become less distinguishable from a human being, the emotional response becomes positive once more.\n* This area of repulsive response aroused by a robot with appearance and motion between a 'barely human' and 'fully human' entity is called the uncanny valley. The name captures the idea that a robot which is 'almost human' will seem overly strange and corpselike.\n* Not robots...walking dead. They pretend we control them...but really... - Doctor Who, The Robots of Death\n* The name 'Grimwade's Syndrome' was an in-joke reference to production assistant Peter Grimwade who had bemoaned the fact that the stories on which he was assigned to work almost always involved robots. - Doctor Who, The Robots of Death", ":summary", "* Fear of Robots", ":titles", "Grimwade's Syndrome, Uncanny Valley"),
          "Refuses to Kill",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Refuses to Kill"),
          "Sadistic",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sadistic"),
          "Sex Crazed",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sex Crazed", ":titles", "Cassonova, Heartbreaker, Lady Killer, Libertine, Lothario, Romeo, Sex Addict"),
          "Shy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Shy", ":summary", "* Hate dealing with others.  Avoid interactions with new people.  May need to retreat from others."),
          "Skittish",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Skittish"),
          "Sociopath",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sociopath"),
          "Stubborn",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Stubborn", ":summary", "* Will not give in or compromise.  May risk embarrassment, financial loss, or injury to prove you're right."),
          "Tempermental",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tempermental", ":titles", "Bad Tempered, Hot Tempered", ":reference", "* Dr:What do we have? #2:Sea Bass. Dr:Riiiight? #2:They are mutated Sea Bass. Dr:Really? Are they ill-tempered? #2:Absolutely. Dr:Well that's a start. - Dr. Evil and Number 2 - Austin Powers", ":summary", "* Constantly irritable. When temper flares will risk embarrassment, financial loss, incarceration, or life and limb."),
          "Vengeful",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vengeful")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Weakness: Physical",
        ":titles",
        "Aberrations, Inhumanity, The Price of Power, Taint",
        ":summary",
        "A being that has a great deal of power becomes increasingly inhuman as power increases. Physical powers become harder to conceal growing increasingly monstrous and mentality leans more toward megalomania, messiah complex, or detached alien.",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Allergy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Allergy", ":summary", "Affected by substances or energies that have little or no effect on normal people."),
          "Asthma",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Asthma"),
          "Atrophy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Atrophy", ":summary", "* One or more limbs has limited mobility"),
          "Blind",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Blind"),
          "Brittle",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Brittle"),
          "Child",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Child", ":summary", "* You are still a child and have difficulty getting others to take you seriously. This is usually taken with [Short]."),
          "Cold Blooded",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Cold Blooded"),
          "Color Blindness",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Color Blindness"),
          ":Contagious",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Contagious", ":summary", "Spreads disease."),
          "Clumsy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Clumsy"),
          "Deaf",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Deaf"),
          "Deformity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Deformity", ":summary", "* Reduces Social Skills and some Physical Skills."),
          "Disfigured",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Disfigured", ":summary", "* Reduces Social Skills dramatically."),
          "Extra Body Parts",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Extra Body Parts"),
          "Hard of Hearing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hard of Hearing"),
          "Lame",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Lame", ":summary", "* Reduces Speed"),
          "Leprosy",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Leprosy"),
          "Missing Body Parts",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Missing Body Parts"),
          "Mute",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Mute"),
          "Obvious",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Obvious", ":summary", "* Easy to detect and target", ":titles", "Large Profile"),
          "Obvious",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Obvious", ":summary", "* Easy to identify and track", ":titles", "Energy Signature, Heat Signature"),
          "Numb",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Numb"),
          "Old",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Old"),
          "Paralyzed",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Paralyzed"),
          "Parasitic Infection",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Parasitic Infection"),
          "Peeling Skin",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Peeling Skin"),
          "Poor Vision",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Poor Vision"),
          "Short",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Short", ":summary", "* This minor weakness reduces vision over objects and movement speed.\n* It can, however, provide benefits to [Stealth]."),
          "Sterile",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Sterile", ":summary", "* May not produce offspring"),
          "Tasteless",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Tasteless"),
          "Temperature Control Problem",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Temperature Control Problem", ":summary", "* Cannot regulate temperature correctly"),
          "Terminal Condition",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Terminal Condition"),
          "Unusual Appearance",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Unusual Appearance"),
          "Unusual Diet",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Unusual Diet", ":summary", "* Minor: Eat wood, garbage, hair, etc.\n* Major: Eat metal, energy\n* Extreme: Eat blood, human flesh, plutonium"),
          "Unusual Eyes",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Unusual Eyes", ":summary", "* Minor: Strange colored\n* Major: Animal-like, or glowing eyes\n* Extreme: Bug-eyes, or no eyes"),
          "Unusual Limbs",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Unusual Limbs", ":summary", "Gnarled, segmented, snake-like, eloganted or other bizarre looking limbs"),
          "Unusual Musculature",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Unusual Musculature", ":summary", "Bulging muscles or wasted looking"),
          "Unusual Skin",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Unusual Skin", ":summary", "* Minor: Strange colored\n* Major: Furry, Striped, Glowing\n* Extreme: Translucent, Reptilian, Rock-like, Exoskeleton, Oozing"),
          "Vulnerability",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vulnerability", ":summary", "* Take additional damage from certain effects"),
          "Vulnerable: Bleeding",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vulnerable: Bleeding"),
          "Vulnerable: Electricity",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vulnerable: Electricity"),
          "Vulnerable: Fire",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vulnerable: Fire"),
          "Vulnerable: Heat",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vulnerable: Heat"),
          "Vulnerable: Impact",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vulnerable: Impact"),
          "Vulnerable: Piercing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vulnerable: Piercing"),
          "Vulnerable: Radiation",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vulnerable: Radiation"),
          "Vulnerable: Slashing",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vulnerable: Slashing"),
          "Vulnerable: Unusual",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Vulnerable: Unusual", ":reference", "Kryptonite, Severe Allergies", ":summary", "* Take damage from things that are not dangerous to ordinary people."),
          "Wasting",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Wasting")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Weakness: Social",
        ":abilitymap",
        vx_core.f_new(
          {"any-1": nx_tactics_base.t_abilitymap},
          "Awkward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Awkward"),
          "Hideous",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hideous"),
          "Hunted",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Hunted"),
          "Naive",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Naive"),
          "Nemesis",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Nemesis"),
          "Noble",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Noble"),
          "Notorious",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Notorious"),
          "Speech Impediment",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Speech Impediment"),
          "Strangeness",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Strangeness"),
          "Terrifying",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Terrifying"),
          "Timid",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Timid"),
          "Ugly",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ugly"),
          "Unnatural Presense",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Unnatural Presense", ":summary", "* Subtly disturbing, homely, or too perfect and inspires negative attention from others."),
          "Ward",
          vx_core.f_new({"any-1": nx_tactics_base.t_ability}, ":name", "Ward", ":summary", "* You are devoted to taking care of another (who happens to get into trouble a lot).")
        )
      ),
      vx_core.f_new(
        {"any-1": nx_tactics_base.t_power},
        ":name",
        "Weapon",
        ":summary",
        "* A weapon of some kind. Must have [Weapon: Melee], [Weapon: Close Combat], [Weapon: Ranged], [Weapon: Firearm] or [Weapon: Gunnery]",
        ":abilitymap",
        nx_tactics_base.f_abilitymap_from_tactics_keys(tactics, "1-Handed", "2-Handed", "Arc:1-Side", "Arc:Front", "Autofire", "Bash", "Burstfire", "Close Weapon", "Firearm Weapon", "Gunnery Weapon", "Hack", "High-Explosive", "Melee Weapon", "Pierce", "Ranged Weapon", "Scattershot", "Slash", "Tracer Rounds")
      ),
      vx_core.f_new({"any-1": nx_tactics_base.t_power}, ":name", "Weather")
    )
    return output
  }

  /**
   * @function tactics_powermap_from_tactics
   * Returns a tactics updated with powermap
   * @param  {tactics} tactics
   * @return {tactics}
   */
  static t_tactics_powermap_from_tactics = {
    vx_type: vx_core.t_type
  }
  static e_tactics_powermap_from_tactics = {
    vx_type: nx_tactics_decks_power.t_tactics_powermap_from_tactics
  }

  // (func tactics-powermap<-tactics)
  static f_tactics_powermap_from_tactics(tactics) {
    let output = nx_tactics_base.e_tactics
    output = vx_core.f_let(
      {"any-1": nx_tactics_base.t_tactics},
      [],
      vx_core.f_new_from_type(vx_core.t_any_from_func, () => {
        const powermap = nx_tactics_decks_power.f_powermap_tactics(tactics)
        return vx_core.f_copy(tactics, ":powermap", powermap)
      })
    )
    return output
  }



  static {
    const constmap = vx_core.vx_new_map(vx_core.t_constmap, {
      
    })
    const emptymap = vx_core.vx_new_map(vx_core.t_map, {
      "powermap-tactics": nx_tactics_decks_power.e_powermap_tactics,
      "tactics-powermap<-tactics": nx_tactics_decks_power.e_tactics_powermap_from_tactics
    })
    const funcmap = vx_core.vx_new_map(vx_core.t_funcmap, {
      "powermap-tactics": nx_tactics_decks_power.t_powermap_tactics,
      "tactics-powermap<-tactics": nx_tactics_decks_power.t_tactics_powermap_from_tactics
    })
    const typemap = vx_core.vx_new_map(vx_core.t_typemap, {
      
    })
    const pkg = vx_core.vx_new_struct(vx_core.t_package, {
      "name": "nx/tactics/decks/power",
      "constmap": constmap,
      "emptymap": emptymap,
      "funcmap": funcmap,
      "typemap": typemap
    })
    vx_core.vx_global_package_set(pkg)

    // (func powermap-tactics)
    nx_tactics_decks_power.t_powermap_tactics['vx_value'] = {
      name          : "powermap-tactics",
      pkgname       : "nx/tactics/decks/power",
      extends       : ":func",
      idx           : 0,
      allowfuncs    : [],
      disallowfuncs : [],
      allowtypes    : [],
      disallowtypes : [],
      allowvalues   : [],
      disallowvalues: [],
      traits        : [vx_core.t_func],
      properties    : [],
      proplast      : {},
      fn            : nx_tactics_decks_power.f_powermap_tactics
    }

    // (func tactics-powermap<-tactics)
    nx_tactics_decks_power.t_tactics_powermap_from_tactics['vx_value'] = {
      name          : "tactics-powermap<-tactics",
      pkgname       : "nx/tactics/decks/power",
      extends       : ":func",
      idx           : 0,
      allowfuncs    : [],
      disallowfuncs : [],
      allowtypes    : [],
      disallowtypes : [],
      allowvalues   : [],
      disallowvalues: [],
      traits        : [vx_core.t_func],
      properties    : [],
      proplast      : {},
      fn            : nx_tactics_decks_power.f_tactics_powermap_from_tactics
    }

  }
}
